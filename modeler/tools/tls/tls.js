(()=>{var e={8185:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createFileSystemAdapter=t.FILE_SYSTEM_ADAPTER=void 0;const r=n(7147);t.FILE_SYSTEM_ADAPTER={lstat:r.lstat,stat:r.stat,lstatSync:r.lstatSync,statSync:r.statSync,readdir:r.readdir,readdirSync:r.readdirSync},t.createFileSystemAdapter=function(e){return void 0===e?t.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},t.FILE_SYSTEM_ADAPTER),e)}},1107:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IS_SUPPORT_READDIR_WITH_FILE_TYPES=void 0;const n=process.versions.node.split(".");if(void 0===n[0]||void 0===n[1])throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);const r=Number.parseInt(n[0],10),i=Number.parseInt(n[1],10),o=r>10,s=10===r&&i>=10;t.IS_SUPPORT_READDIR_WITH_FILE_TYPES=o||s},5923:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Settings=t.scandirSync=t.scandir=void 0;const r=n(1411),i=n(3953),o=n(6913);function s(e={}){return e instanceof o.default?e:new o.default(e)}t.Settings=o.default,t.scandir=function(e,t,n){"function"!=typeof t?r.read(e,s(t),n):r.read(e,s(),t)},t.scandirSync=function(e,t){const n=s(t);return i.read(e,n)}},1411:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.readdir=t.readdirWithFileTypes=t.read=void 0;const r=n(6203),i=n(4595),o=n(1107),s=n(6582),a=n(4587);function c(e,t,n){t.fs.readdir(e,{withFileTypes:!0},((r,o)=>{if(null!==r)return void l(n,r);const c=o.map((n=>({dirent:n,name:n.name,path:a.joinPathSegments(e,n.name,t.pathSegmentSeparator)})));if(!t.followSymbolicLinks)return void d(n,c);const u=c.map((e=>function(e,t){return n=>{e.dirent.isSymbolicLink()?t.fs.stat(e.path,((r,i)=>{if(null!==r)return t.throwErrorOnBrokenSymbolicLink?void n(r):void n(null,e);e.dirent=s.fs.createDirentFromStats(e.name,i),n(null,e)})):n(null,e)}}(e,t)));i(u,((e,t)=>{null===e?d(n,t):l(n,e)}))}))}function u(e,t,n){t.fs.readdir(e,((o,c)=>{if(null!==o)return void l(n,o);const u=c.map((n=>{const i=a.joinPathSegments(e,n,t.pathSegmentSeparator);return e=>{r.stat(i,t.fsStatSettings,((r,o)=>{if(null!==r)return void e(r);const a={name:n,path:i,dirent:s.fs.createDirentFromStats(n,o)};t.stats&&(a.stats=o),e(null,a)}))}}));i(u,((e,t)=>{null===e?d(n,t):l(n,e)}))}))}function l(e,t){e(t)}function d(e,t){e(null,t)}t.read=function(e,t,n){t.stats||!o.IS_SUPPORT_READDIR_WITH_FILE_TYPES?u(e,t,n):c(e,t,n)},t.readdirWithFileTypes=c,t.readdir=u},4587:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.joinPathSegments=void 0,t.joinPathSegments=function(e,t,n){return e.endsWith(n)?e+t:e+n+t}},3953:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.readdir=t.readdirWithFileTypes=t.read=void 0;const r=n(6203),i=n(1107),o=n(6582),s=n(4587);function a(e,t){return t.fs.readdirSync(e,{withFileTypes:!0}).map((n=>{const r={dirent:n,name:n.name,path:s.joinPathSegments(e,n.name,t.pathSegmentSeparator)};if(r.dirent.isSymbolicLink()&&t.followSymbolicLinks)try{const e=t.fs.statSync(r.path);r.dirent=o.fs.createDirentFromStats(r.name,e)}catch(e){if(t.throwErrorOnBrokenSymbolicLink)throw e}return r}))}function c(e,t){return t.fs.readdirSync(e).map((n=>{const i=s.joinPathSegments(e,n,t.pathSegmentSeparator),a=r.statSync(i,t.fsStatSettings),c={name:n,path:i,dirent:o.fs.createDirentFromStats(n,a)};return t.stats&&(c.stats=a),c}))}t.read=function(e,t){return!t.stats&&i.IS_SUPPORT_READDIR_WITH_FILE_TYPES?a(e,t):c(e,t)},t.readdirWithFileTypes=a,t.readdir=c},6913:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1017),i=n(6203),o=n(8185);t.default=class{constructor(e={}){this._options=e,this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!1),this.fs=o.createFileSystemAdapter(this._options.fs),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,r.sep),this.stats=this._getValue(this._options.stats,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0),this.fsStatSettings=new i.Settings({followSymbolicLink:this.followSymbolicLinks,fs:this.fs,throwErrorOnBrokenSymbolicLink:this.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return null!=e?e:t}}},322:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createDirentFromStats=void 0;class n{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}}t.createDirentFromStats=function(e,t){return new n(e,t)}},6582:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fs=void 0;const r=n(322);t.fs=r},8980:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createFileSystemAdapter=t.FILE_SYSTEM_ADAPTER=void 0;const r=n(7147);t.FILE_SYSTEM_ADAPTER={lstat:r.lstat,stat:r.stat,lstatSync:r.lstatSync,statSync:r.statSync},t.createFileSystemAdapter=function(e){return void 0===e?t.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},t.FILE_SYSTEM_ADAPTER),e)}},6203:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.statSync=t.stat=t.Settings=void 0;const r=n(2654),i=n(8946),o=n(8328);function s(e={}){return e instanceof o.default?e:new o.default(e)}t.Settings=o.default,t.stat=function(e,t,n){"function"!=typeof t?r.read(e,s(t),n):r.read(e,s(),t)},t.statSync=function(e,t){const n=s(t);return i.read(e,n)}},2654:(e,t)=>{"use strict";function n(e,t){e(t)}function r(e,t){e(null,t)}Object.defineProperty(t,"__esModule",{value:!0}),t.read=void 0,t.read=function(e,t,i){t.fs.lstat(e,((o,s)=>{null===o?s.isSymbolicLink()&&t.followSymbolicLink?t.fs.stat(e,((e,o)=>{if(null!==e)return t.throwErrorOnBrokenSymbolicLink?void n(i,e):void r(i,s);t.markSymbolicLink&&(o.isSymbolicLink=()=>!0),r(i,o)})):r(i,s):n(i,o)}))}},8946:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.read=void 0,t.read=function(e,t){const n=t.fs.lstatSync(e);if(!n.isSymbolicLink()||!t.followSymbolicLink)return n;try{const n=t.fs.statSync(e);return t.markSymbolicLink&&(n.isSymbolicLink=()=>!0),n}catch(e){if(!t.throwErrorOnBrokenSymbolicLink)return n;throw e}}},8328:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(8980);t.default=class{constructor(e={}){this._options=e,this.followSymbolicLink=this._getValue(this._options.followSymbolicLink,!0),this.fs=r.createFileSystemAdapter(this._options.fs),this.markSymbolicLink=this._getValue(this._options.markSymbolicLink,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0)}_getValue(e,t){return null!=e?e:t}}},5439:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Settings=t.walkStream=t.walkSync=t.walk=void 0;const r=n(9346),i=n(215),o=n(4078),s=n(8690);function a(e={}){return e instanceof s.default?e:new s.default(e)}t.Settings=s.default,t.walk=function(e,t,n){"function"!=typeof t?new r.default(e,a(t)).read(n):new r.default(e,a()).read(t)},t.walkSync=function(e,t){const n=a(t);return new o.default(e,n).read()},t.walkStream=function(e,t){const n=a(t);return new i.default(e,n).read()}},9346:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4714);t.default=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new r.default(this._root,this._settings),this._storage=[]}read(e){this._reader.onError((t=>{!function(e,t){e(t)}(e,t)})),this._reader.onEntry((e=>{this._storage.push(e)})),this._reader.onEnd((()=>{!function(e,t){e(null,t)}(e,this._storage)})),this._reader.read()}}},215:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2781),i=n(4714);t.default=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new i.default(this._root,this._settings),this._stream=new r.Readable({objectMode:!0,read:()=>{},destroy:()=>{this._reader.isDestroyed||this._reader.destroy()}})}read(){return this._reader.onError((e=>{this._stream.emit("error",e)})),this._reader.onEntry((e=>{this._stream.push(e)})),this._reader.onEnd((()=>{this._stream.push(null)})),this._reader.read(),this._stream}}},4078:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(9555);t.default=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new r.default(this._root,this._settings)}read(){return this._reader.read()}}},4714:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2361),i=n(5923),o=n(373),s=n(6865),a=n(5274);class c extends a.default{constructor(e,t){super(e,t),this._settings=t,this._scandir=i.scandir,this._emitter=new r.EventEmitter,this._queue=o(this._worker.bind(this),this._settings.concurrency),this._isFatalError=!1,this._isDestroyed=!1,this._queue.drain=()=>{this._isFatalError||this._emitter.emit("end")}}read(){return this._isFatalError=!1,this._isDestroyed=!1,setImmediate((()=>{this._pushToQueue(this._root,this._settings.basePath)})),this._emitter}get isDestroyed(){return this._isDestroyed}destroy(){if(this._isDestroyed)throw new Error("The reader is already destroyed");this._isDestroyed=!0,this._queue.killAndDrain()}onEntry(e){this._emitter.on("entry",e)}onError(e){this._emitter.once("error",e)}onEnd(e){this._emitter.once("end",e)}_pushToQueue(e,t){const n={directory:e,base:t};this._queue.push(n,(e=>{null!==e&&this._handleError(e)}))}_worker(e,t){this._scandir(e.directory,this._settings.fsScandirSettings,((n,r)=>{if(null===n){for(const t of r)this._handleEntry(t,e.base);t(null,void 0)}else t(n,void 0)}))}_handleError(e){!this._isDestroyed&&s.isFatalError(this._settings,e)&&(this._isFatalError=!0,this._isDestroyed=!0,this._emitter.emit("error",e))}_handleEntry(e,t){if(this._isDestroyed||this._isFatalError)return;const n=e.path;void 0!==t&&(e.path=s.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),s.isAppliedFilter(this._settings.entryFilter,e)&&this._emitEntry(e),e.dirent.isDirectory()&&s.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(n,void 0===t?void 0:e.path)}_emitEntry(e){this._emitter.emit("entry",e)}}t.default=c},6865:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.joinPathSegments=t.replacePathSegmentSeparator=t.isAppliedFilter=t.isFatalError=void 0,t.isFatalError=function(e,t){return null===e.errorFilter||!e.errorFilter(t)},t.isAppliedFilter=function(e,t){return null===e||e(t)},t.replacePathSegmentSeparator=function(e,t){return e.split(/[/\\]/).join(t)},t.joinPathSegments=function(e,t,n){return""===e?t:e.endsWith(n)?e+t:e+n+t}},5274:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(6865);t.default=class{constructor(e,t){this._root=e,this._settings=t,this._root=r.replacePathSegmentSeparator(e,t.pathSegmentSeparator)}}},9555:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5923),i=n(6865),o=n(5274);class s extends o.default{constructor(){super(...arguments),this._scandir=r.scandirSync,this._storage=[],this._queue=new Set}read(){return this._pushToQueue(this._root,this._settings.basePath),this._handleQueue(),this._storage}_pushToQueue(e,t){this._queue.add({directory:e,base:t})}_handleQueue(){for(const e of this._queue.values())this._handleDirectory(e.directory,e.base)}_handleDirectory(e,t){try{const n=this._scandir(e,this._settings.fsScandirSettings);for(const e of n)this._handleEntry(e,t)}catch(e){this._handleError(e)}}_handleError(e){if(i.isFatalError(this._settings,e))throw e}_handleEntry(e,t){const n=e.path;void 0!==t&&(e.path=i.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),i.isAppliedFilter(this._settings.entryFilter,e)&&this._pushToStorage(e),e.dirent.isDirectory()&&i.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(n,void 0===t?void 0:e.path)}_pushToStorage(e){this._storage.push(e)}}t.default=s},8690:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1017),i=n(5923);t.default=class{constructor(e={}){this._options=e,this.basePath=this._getValue(this._options.basePath,void 0),this.concurrency=this._getValue(this._options.concurrency,Number.POSITIVE_INFINITY),this.deepFilter=this._getValue(this._options.deepFilter,null),this.entryFilter=this._getValue(this._options.entryFilter,null),this.errorFilter=this._getValue(this._options.errorFilter,null),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,r.sep),this.fsScandirSettings=new i.Settings({followSymbolicLinks:this._options.followSymbolicLinks,fs:this._options.fs,pathSegmentSeparator:this._options.pathSegmentSeparator,stats:this._options.stats,throwErrorOnBrokenSymbolicLink:this._options.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return null!=e?e:t}}},6455:(e,t,n)=>{"use strict";const r=n(5602),i=n(5281);class o extends Error{constructor(e){if(!Array.isArray(e))throw new TypeError("Expected input to be an Array, got "+typeof e);let t=(e=[...e].map((e=>e instanceof Error?e:null!==e&&"object"==typeof e?Object.assign(new Error(e.message),e):new Error(e)))).map((e=>"string"==typeof e.stack?i(e.stack).replace(/\s+at .*aggregate-error\/index.js:\d+:\d+\)?/g,""):String(e))).join("\n");t="\n"+r(t,4),super(t),this.name="AggregateError",Object.defineProperty(this,"_errors",{value:e})}*[Symbol.iterator](){for(const e of this._errors)yield e}}e.exports=o},3755:e=>{"use strict";e.exports=(...e)=>[...new Set([].concat(...e))]},5623:e=>{"use strict";function t(e,t,i){e instanceof RegExp&&(e=n(e,i)),t instanceof RegExp&&(t=n(t,i));var o=r(e,t,i);return o&&{start:o[0],end:o[1],pre:i.slice(0,o[0]),body:i.slice(o[0]+e.length,o[1]),post:i.slice(o[1]+t.length)}}function n(e,t){var n=t.match(e);return n?n[0]:null}function r(e,t,n){var r,i,o,s,a,c=n.indexOf(e),u=n.indexOf(t,c+1),l=c;if(c>=0&&u>0){for(r=[],o=n.length;l>=0&&!a;)l==c?(r.push(l),c=n.indexOf(e,l+1)):1==r.length?a=[r.pop(),u]:((i=r.pop())<o&&(o=i,s=u),u=n.indexOf(t,l+1)),l=c<u&&c>=0?c:u;r.length&&(a=[o,s])}return a}e.exports=t,t.range=r},3644:(e,t,n)=>{var r=n(1048),i=n(5623);e.exports=function(e){if(!e)return[];"{}"===e.substr(0,2)&&(e="\\{\\}"+e.substr(2));return y(function(e){return e.split("\\\\").join(o).split("\\{").join(s).split("\\}").join(a).split("\\,").join(c).split("\\.").join(u)}(e),!0).map(d)};var o="\0SLASH"+Math.random()+"\0",s="\0OPEN"+Math.random()+"\0",a="\0CLOSE"+Math.random()+"\0",c="\0COMMA"+Math.random()+"\0",u="\0PERIOD"+Math.random()+"\0";function l(e){return parseInt(e,10)==e?parseInt(e,10):e.charCodeAt(0)}function d(e){return e.split(o).join("\\").split(s).join("{").split(a).join("}").split(c).join(",").split(u).join(".")}function h(e){if(!e)return[""];var t=[],n=i("{","}",e);if(!n)return e.split(",");var r=n.pre,o=n.body,s=n.post,a=r.split(",");a[a.length-1]+="{"+o+"}";var c=h(s);return s.length&&(a[a.length-1]+=c.shift(),a.push.apply(a,c)),t.push.apply(t,a),t}function f(e){return"{"+e+"}"}function p(e){return/^-?0\d/.test(e)}function m(e,t){return e<=t}function g(e,t){return e>=t}function y(e,t){var n=[],o=i("{","}",e);if(!o||/\$$/.test(o.pre))return[e];var s,c=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(o.body),u=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(o.body),d=c||u,v=o.body.indexOf(",")>=0;if(!d&&!v)return o.post.match(/,.*\}/)?y(e=o.pre+"{"+o.body+a+o.post):[e];if(d)s=o.body.split(/\.\./);else if(1===(s=h(o.body)).length&&1===(s=y(s[0],!1).map(f)).length)return(S=o.post.length?y(o.post,!1):[""]).map((function(e){return o.pre+s[0]+e}));var _,b=o.pre,S=o.post.length?y(o.post,!1):[""];if(d){var w=l(s[0]),E=l(s[1]),R=Math.max(s[0].length,s[1].length),x=3==s.length?Math.abs(l(s[2])):1,C=m;E<w&&(x*=-1,C=g);var P=s.some(p);_=[];for(var T=w;C(T,E);T+=x){var O;if(u)"\\"===(O=String.fromCharCode(T))&&(O="");else if(O=String(T),P){var k=R-O.length;if(k>0){var D=new Array(k+1).join("0");O=T<0?"-"+D+O.slice(1):D+O}}_.push(O)}}else _=r(s,(function(e){return y(e,!1)}));for(var A=0;A<_.length;A++)for(var N=0;N<S.length;N++){var M=b+_[A]+S[N];(!t||d||M)&&n.push(M)}return n}},5281:(e,t,n)=>{"use strict";const r=n(2037),i=/\s+at.*(?:\(|\s)(.*)\)?/,o=/^(?:(?:(?:node|(?:internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)\.js:\d+:\d+)|native)/,s=void 0===r.homedir?"":r.homedir();e.exports=(e,t)=>(t=Object.assign({pretty:!1},t),e.replace(/\\/g,"/").split("\n").filter((e=>{const t=e.match(i);if(null===t||!t[1])return!0;const n=t[1];return!n.includes(".app/Contents/Resources/electron.asar")&&!n.includes(".app/Contents/Resources/default_app.asar")&&!o.test(n)})).filter((e=>""!==e.trim())).map((e=>t.pretty?e.replace(i,((e,t)=>e.replace(t,t.replace(s,"~")))):e)).join("\n"))},5497:(e,t,n)=>{e.exports=n(1261)},1261:(e,t,n)=>{"use strict";var r=n(2081).exec,i=n(2081).execSync,o=n(7147),s=n(1017),a=o.access,c=o.accessSync,u=o.constants||o,l="win32"==process.platform,d=function(e,t,n){!function(e,t){a(e,u.F_OK,(function(e){t(!e)}))}(e,(function(i){if(i)!function(e,t){a(e,u.F_OK|u.X_OK,(function(e){t(null,!e)}))}(e,n);else r("command -v "+t+" 2>/dev/null && { echo >&1 "+t+"; exit 0; }",(function(e,t,r){n(null,!!t)}))}))},h=function(e,t){if(function(e){try{return c(e,u.F_OK),!1}catch(e){return!0}}(e))try{return!!i("command -v "+t+" 2>/dev/null && { echo >&1 "+t+"; exit 0; }")}catch(e){return!1}return function(e){try{return c(e,u.F_OK|u.X_OK),!0}catch(e){return!1}}(e)},f=function(e){return/[^A-Za-z0-9_\/:=-]/.test(e)&&(e=(e="'"+e.replace(/'/g,"'\\''")+"'").replace(/^(?:'')+/g,"").replace(/\\'''/g,"\\'")),e};l&&(f=function(e){return/[\\]/.test(e)?'"'+s.dirname(e)+'"'+":"+('"'+s.basename(e)+'"'):'"'+e+'"'}),e.exports=function e(t,n){var i=f(t);if(!n&&"undefined"!=typeof Promise)return new Promise((function(n,r){e(t,(function(e,i){i?n(t):r(e)}))}));l?function(e,t,n){/^(?!(?:.*\s|.*\.|\W+)$)(?:[a-zA-Z]:)?(?:(?:[^<>:"\|\?\*\n])+(?:\/\/|\/|\\\\|\\)?)+$/m.test(e)?r("where "+t,(function(e){n(null,null===e)})):n(null,!1)}(t,i,n):d(t,i,n)},e.exports.sync=function(e){var t=f(e);return l?function(e,t,n){if(!/^(?!(?:.*\s|.*\.|\W+)$)(?:[a-zA-Z]:)?(?:(?:[^<>:"\|\?\*\n])+(?:\/\/|\/|\\\\|\\)?)+$/m.test(e))return!1;try{return!!i("where "+t,{stdio:[]})}catch(e){return!1}}(e,t):h(e,t)}},1048:e=>{e.exports=function(e,n){for(var r=[],i=0;i<e.length;i++){var o=n(e[i],i);t(o)?r.push.apply(r,o):r.push(o)}return r};var t=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},511:(e,t,n)=>{"use strict";const r=n(6113);e.exports=e=>{if(!Number.isFinite(e))throw new TypeError("Expected a finite number");return r.randomBytes(Math.ceil(e/2)).toString("hex").slice(0,e)}},5752:(e,t,n)=>{"use strict";const{promisify:r}=n(3837),i=n(1017),o=n(5839),s=n(6830),a=n(3859),c=n(77),u=n(8297),l=n(291),d=n(958),h=n(7974),f=r(d),p={glob:!1,unlink:c.unlink,unlinkSync:c.unlinkSync,chmod:c.chmod,chmodSync:c.chmodSync,stat:c.stat,statSync:c.statSync,lstat:c.lstat,lstatSync:c.lstatSync,rmdir:c.rmdir,rmdirSync:c.rmdirSync,readdir:c.readdir,readdirSync:c.readdirSync};function m(e,t){if(u(e))throw new Error("Cannot delete the current working directory. Can be overridden with the `force` option.");if(!l(e,t))throw new Error("Cannot delete files/directories outside the current working directory. Can be overridden with the `force` option.")}function g(e){return e=(e=Array.isArray(e)?e:[e]).map((e=>"win32"===process.platform&&!1===s(e)?a(e):e))}e.exports=async(e,{force:t,dryRun:n,cwd:r=process.cwd(),...s}={})=>{s={expandDirectories:!1,onlyFiles:!1,followSymbolicLinks:!1,cwd:r,...s},e=g(e);const a=(await o(e,s)).sort(((e,t)=>t.localeCompare(e))),c=await h(a,(async e=>(e=i.resolve(r,e),t||m(e,r),n||await f(e,p),e)),s);return c.sort(((e,t)=>e.localeCompare(t))),c},e.exports.sync=(e,{force:t,dryRun:n,cwd:r=process.cwd(),...s}={})=>{s={expandDirectories:!1,onlyFiles:!1,followSymbolicLinks:!1,cwd:r,...s},e=g(e);const a=o.sync(e,s).sort(((e,t)=>t.localeCompare(e))).map((e=>(e=i.resolve(r,e),t||m(e,r),n||d.sync(e,p),e)));return a.sort(((e,t)=>e.localeCompare(t))),a}},7974:(e,t,n)=>{"use strict";const r=n(6455);e.exports=async(e,t,{concurrency:n=1/0,stopOnError:i=!0}={})=>new Promise(((o,s)=>{if("function"!=typeof t)throw new TypeError("Mapper function is required");if(!Number.isSafeInteger(n)&&n!==1/0||!(n>=1))throw new TypeError(`Expected \`concurrency\` to be an integer from 1 and up or \`Infinity\`, got \`${n}\` (${typeof n})`);const a=[],c=[],u=e[Symbol.iterator]();let l=!1,d=!1,h=0,f=0;const p=()=>{if(l)return;const e=u.next(),n=f;if(f++,e.done)return d=!0,void(0===h&&(i||0===c.length?o(a):s(new r(c))));h++,(async()=>{try{const r=await e.value;a[n]=await t(r,n),h--,p()}catch(e){i?(l=!0,s(e)):(c.push(e),h--,p())}})()};for(let e=0;e<n&&(p(),!d);e++);}))},958:(e,t,n)=>{const r=n(9491),i=n(1017),o=n(7147);let s;try{s=n(2884)}catch(e){}const a={nosort:!0,silent:!0};let c=0;const u="win32"===process.platform,l=e=>{if(["unlink","chmod","stat","lstat","rmdir","readdir"].forEach((t=>{e[t]=e[t]||o[t],e[t+="Sync"]=e[t]||o[t]})),e.maxBusyTries=e.maxBusyTries||3,e.emfileWait=e.emfileWait||1e3,!1===e.glob&&(e.disableGlob=!0),!0!==e.disableGlob&&void 0===s)throw Error("glob dependency not found, set `options.disableGlob = true` if intentional");e.disableGlob=e.disableGlob||!1,e.glob=e.glob||a},d=(e,t,n)=>{"function"==typeof t&&(n=t,t={}),r(e,"rimraf: missing path"),r.equal(typeof e,"string","rimraf: path should be a string"),r.equal(typeof n,"function","rimraf: callback function required"),r(t,"rimraf: invalid options argument provided"),r.equal(typeof t,"object","rimraf: options should be object"),l(t);let i=0,o=null,a=0;const u=(e,r)=>e?n(e):(a=r.length,0===a?n():void r.forEach((e=>{const r=s=>{if(s){if(("EBUSY"===s.code||"ENOTEMPTY"===s.code||"EPERM"===s.code)&&i<t.maxBusyTries)return i++,setTimeout((()=>h(e,t,r)),100*i);if("EMFILE"===s.code&&c<t.emfileWait)return setTimeout((()=>h(e,t,r)),c++);"ENOENT"===s.code&&(s=null)}c=0,(e=>{o=o||e,0==--a&&n(o)})(s)};h(e,t,r)})));if(t.disableGlob||!s.hasMagic(e))return u(null,[e]);t.lstat(e,((n,r)=>{if(!n)return u(null,[e]);s(e,t.glob,u)}))},h=(e,t,n)=>{r(e),r(t),r("function"==typeof n),t.lstat(e,((r,i)=>r&&"ENOENT"===r.code?n(null):(r&&"EPERM"===r.code&&u&&f(e,t,r,n),i&&i.isDirectory()?m(e,t,r,n):void t.unlink(e,(r=>{if(r){if("ENOENT"===r.code)return n(null);if("EPERM"===r.code)return u?f(e,t,r,n):m(e,t,r,n);if("EISDIR"===r.code)return m(e,t,r,n)}return n(r)})))))},f=(e,t,n,i)=>{r(e),r(t),r("function"==typeof i),t.chmod(e,438,(r=>{r?i("ENOENT"===r.code?null:n):t.stat(e,((r,o)=>{r?i("ENOENT"===r.code?null:n):o.isDirectory()?m(e,t,n,i):t.unlink(e,i)}))}))},p=(e,t,n)=>{r(e),r(t);try{t.chmodSync(e,438)}catch(e){if("ENOENT"===e.code)return;throw n}let i;try{i=t.statSync(e)}catch(e){if("ENOENT"===e.code)return;throw n}i.isDirectory()?v(e,t,n):t.unlinkSync(e)},m=(e,t,n,i)=>{r(e),r(t),r("function"==typeof i),t.rmdir(e,(r=>{!r||"ENOTEMPTY"!==r.code&&"EEXIST"!==r.code&&"EPERM"!==r.code?r&&"ENOTDIR"===r.code?i(n):i(r):g(e,t,i)}))},g=(e,t,n)=>{r(e),r(t),r("function"==typeof n),t.readdir(e,((r,o)=>{if(r)return n(r);let s,a=o.length;if(0===a)return t.rmdir(e,n);o.forEach((r=>{d(i.join(e,r),t,(r=>{if(!s)return r?n(s=r):void(0==--a&&t.rmdir(e,n))}))}))}))},y=(e,t)=>{let n;if(l(t=t||{}),r(e,"rimraf: missing path"),r.equal(typeof e,"string","rimraf: path should be a string"),r(t,"rimraf: missing options"),r.equal(typeof t,"object","rimraf: options should be object"),t.disableGlob||!s.hasMagic(e))n=[e];else try{t.lstatSync(e),n=[e]}catch(r){n=s.sync(e,t.glob)}if(n.length)for(let e=0;e<n.length;e++){const r=n[e];let i;try{i=t.lstatSync(r)}catch(e){if("ENOENT"===e.code)return;"EPERM"===e.code&&u&&p(r,t,e)}try{i&&i.isDirectory()?v(r,t,null):t.unlinkSync(r)}catch(e){if("ENOENT"===e.code)return;if("EPERM"===e.code)return u?p(r,t,e):v(r,t,e);if("EISDIR"!==e.code)throw e;v(r,t,e)}}},v=(e,t,n)=>{r(e),r(t);try{t.rmdirSync(e)}catch(r){if("ENOENT"===r.code)return;if("ENOTDIR"===r.code)throw n;"ENOTEMPTY"!==r.code&&"EEXIST"!==r.code&&"EPERM"!==r.code||_(e,t)}},_=(e,t)=>{r(e),r(t),t.readdirSync(e).forEach((n=>y(i.join(e,n),t)));const n=u?100:1;let o=0;for(;;){let r=!0;try{const i=t.rmdirSync(e,t);return r=!1,i}finally{if(++o<n&&r)continue}}};e.exports=d,d.sync=y},367:(e,t,n)=>{"use strict";const r=n(1017),i=n(9847),o=e=>e.length>1?`{${e.join(",")}}`:e[0],s=(e,t)=>{const n="!"===e[0]?e.slice(1):e;return r.isAbsolute(n)?n:r.join(t,n)},a=(e,t)=>{if(t.files&&!Array.isArray(t.files))throw new TypeError(`Expected \`files\` to be of type \`Array\` but received type \`${typeof t.files}\``);if(t.extensions&&!Array.isArray(t.extensions))throw new TypeError(`Expected \`extensions\` to be of type \`Array\` but received type \`${typeof t.extensions}\``);return t.files&&t.extensions?t.files.map((n=>{return r.posix.join(e,(i=n,s=t.extensions,r.extname(i)?`**/${i}`:`**/${i}.${o(s)}`));var i,s})):t.files?t.files.map((t=>r.posix.join(e,`**/${t}`))):t.extensions?[r.posix.join(e,`**/*.${o(t.extensions)}`)]:[r.posix.join(e,"**")]};e.exports=async(e,t)=>{if("string"!=typeof(t={cwd:process.cwd(),...t}).cwd)throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof t.cwd}\``);const n=await Promise.all([].concat(e).map((async e=>await i.isDirectory(s(e,t.cwd))?a(e,t):e)));return[].concat.apply([],n)},e.exports.sync=(e,t)=>{if("string"!=typeof(t={cwd:process.cwd(),...t}).cwd)throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof t.cwd}\``);const n=[].concat(e).map((e=>i.isDirectorySync(s(e,t.cwd))?a(e,t):e));return[].concat.apply([],n)}},9186:(e,t,n)=>{"use strict";const r=n(5841),i=n(8170),o=n(9299),s=n(5443),a=(e,t={})=>{let n=[];if(Array.isArray(e))for(let r of e){let e=a.create(r,t);Array.isArray(e)?n.push(...e):n.push(e)}else n=[].concat(a.create(e,t));return t&&!0===t.expand&&!0===t.nodupes&&(n=[...new Set(n)]),n};a.parse=(e,t={})=>s(e,t),a.stringify=(e,t={})=>r("string"==typeof e?a.parse(e,t):e,t),a.compile=(e,t={})=>("string"==typeof e&&(e=a.parse(e,t)),i(e,t)),a.expand=(e,t={})=>{"string"==typeof e&&(e=a.parse(e,t));let n=o(e,t);return!0===t.noempty&&(n=n.filter(Boolean)),!0===t.nodupes&&(n=[...new Set(n)]),n},a.create=(e,t={})=>""===e||e.length<3?[e]:!0!==t.expand?a.compile(e,t):a.expand(e,t),e.exports=a},8170:(e,t,n)=>{"use strict";const r=n(5242),i=n(949);e.exports=(e,t={})=>{let n=(e,o={})=>{let s=i.isInvalidBrace(o),a=!0===e.invalid&&!0===t.escapeInvalid,c=!0===s||!0===a,u=!0===t.escapeInvalid?"\\":"",l="";if(!0===e.isOpen)return u+e.value;if(!0===e.isClose)return u+e.value;if("open"===e.type)return c?u+e.value:"(";if("close"===e.type)return c?u+e.value:")";if("comma"===e.type)return"comma"===e.prev.type?"":c?e.value:"|";if(e.value)return e.value;if(e.nodes&&e.ranges>0){let n=i.reduce(e.nodes),o=r(...n,{...t,wrap:!1,toRegex:!0});if(0!==o.length)return n.length>1&&o.length>1?`(${o})`:o}if(e.nodes)for(let t of e.nodes)l+=n(t,e);return l};return n(e)}},7659:e=>{"use strict";e.exports={MAX_LENGTH:65536,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:"\n",CHAR_NO_BREAK_SPACE:" ",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"\t",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\ufeff"}},9299:(e,t,n)=>{"use strict";const r=n(5242),i=n(5841),o=n(949),s=(e="",t="",n=!1)=>{let r=[];if(e=[].concat(e),!(t=[].concat(t)).length)return e;if(!e.length)return n?o.flatten(t).map((e=>`{${e}}`)):t;for(let i of e)if(Array.isArray(i))for(let e of i)r.push(s(e,t,n));else for(let e of t)!0===n&&"string"==typeof e&&(e=`{${e}}`),r.push(Array.isArray(e)?s(i,e,n):i+e);return o.flatten(r)};e.exports=(e,t={})=>{let n=void 0===t.rangeLimit?1e3:t.rangeLimit,a=(e,c={})=>{e.queue=[];let u=c,l=c.queue;for(;"brace"!==u.type&&"root"!==u.type&&u.parent;)u=u.parent,l=u.queue;if(e.invalid||e.dollar)return void l.push(s(l.pop(),i(e,t)));if("brace"===e.type&&!0!==e.invalid&&2===e.nodes.length)return void l.push(s(l.pop(),["{}"]));if(e.nodes&&e.ranges>0){let a=o.reduce(e.nodes);if(o.exceedsLimit(...a,t.step,n))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let c=r(...a,t);return 0===c.length&&(c=i(e,t)),l.push(s(l.pop(),c)),void(e.nodes=[])}let d=o.encloseBrace(e),h=e.queue,f=e;for(;"brace"!==f.type&&"root"!==f.type&&f.parent;)f=f.parent,h=f.queue;for(let t=0;t<e.nodes.length;t++){let n=e.nodes[t];"comma"!==n.type||"brace"!==e.type?"close"!==n.type?n.value&&"open"!==n.type?h.push(s(h.pop(),n.value)):n.nodes&&a(n,e):l.push(s(l.pop(),h,d)):(1===t&&h.push(""),h.push(""))}return h};return o.flatten(a(e))}},5443:(e,t,n)=>{"use strict";const r=n(5841),{MAX_LENGTH:i,CHAR_BACKSLASH:o,CHAR_BACKTICK:s,CHAR_COMMA:a,CHAR_DOT:c,CHAR_LEFT_PARENTHESES:u,CHAR_RIGHT_PARENTHESES:l,CHAR_LEFT_CURLY_BRACE:d,CHAR_RIGHT_CURLY_BRACE:h,CHAR_LEFT_SQUARE_BRACKET:f,CHAR_RIGHT_SQUARE_BRACKET:p,CHAR_DOUBLE_QUOTE:m,CHAR_SINGLE_QUOTE:g,CHAR_NO_BREAK_SPACE:y,CHAR_ZERO_WIDTH_NOBREAK_SPACE:v}=n(7659);e.exports=(e,t={})=>{if("string"!=typeof e)throw new TypeError("Expected a string");let n=t||{},_="number"==typeof n.maxLength?Math.min(i,n.maxLength):i;if(e.length>_)throw new SyntaxError(`Input length (${e.length}), exceeds max characters (${_})`);let b,S={type:"root",input:e,nodes:[]},w=[S],E=S,R=S,x=0,C=e.length,P=0,T=0;const O=()=>e[P++],k=e=>{if("text"===e.type&&"dot"===R.type&&(R.type="text"),!R||"text"!==R.type||"text"!==e.type)return E.nodes.push(e),e.parent=E,e.prev=R,R=e,e;R.value+=e.value};for(k({type:"bos"});P<C;)if(E=w[w.length-1],b=O(),b!==v&&b!==y)if(b!==o)if(b!==p)if(b!==f)if(b!==u)if(b!==l)if(b!==m&&b!==g&&b!==s)if(b!==d)if(b!==h)if(b===a&&T>0){if(E.ranges>0){E.ranges=0;let e=E.nodes.shift();E.nodes=[e,{type:"text",value:r(E)}]}k({type:"comma",value:b}),E.commas++}else if(b===c&&T>0&&0===E.commas){let e=E.nodes;if(0===T||0===e.length){k({type:"text",value:b});continue}if("dot"===R.type){if(E.range=[],R.value+=b,R.type="range",3!==E.nodes.length&&5!==E.nodes.length){E.invalid=!0,E.ranges=0,R.type="text";continue}E.ranges++,E.args=[];continue}if("range"===R.type){e.pop();let t=e[e.length-1];t.value+=R.value+b,R=t,E.ranges--;continue}k({type:"dot",value:b})}else k({type:"text",value:b});else{if("brace"!==E.type){k({type:"text",value:b});continue}let e="close";E=w.pop(),E.close=!0,k({type:e,value:b}),T--,E=w[w.length-1]}else{T++;let e=R.value&&"$"===R.value.slice(-1)||!0===E.dollar;E=k({type:"brace",open:!0,close:!1,dollar:e,depth:T,commas:0,ranges:0,nodes:[]}),w.push(E),k({type:"open",value:b})}else{let e,n=b;for(!0!==t.keepQuotes&&(b="");P<C&&(e=O());)if(e!==o){if(e===n){!0===t.keepQuotes&&(b+=e);break}b+=e}else b+=e+O();k({type:"text",value:b})}else{if("paren"!==E.type){k({type:"text",value:b});continue}E=w.pop(),k({type:"text",value:b}),E=w[w.length-1]}else E=k({type:"paren",nodes:[]}),w.push(E),k({type:"text",value:b});else{x++;let e;for(;P<C&&(e=O());)if(b+=e,e!==f)if(e!==o){if(e===p&&(x--,0===x))break}else b+=O();else x++;k({type:"text",value:b})}else k({type:"text",value:"\\"+b});else k({type:"text",value:(t.keepEscaping?b:"")+O()});do{if(E=w.pop(),"root"!==E.type){E.nodes.forEach((e=>{e.nodes||("open"===e.type&&(e.isOpen=!0),"close"===e.type&&(e.isClose=!0),e.nodes||(e.type="text"),e.invalid=!0)}));let e=w[w.length-1],t=e.nodes.indexOf(E);e.nodes.splice(t,1,...E.nodes)}}while(w.length>0);return k({type:"eos"}),S}},5841:(e,t,n)=>{"use strict";const r=n(949);e.exports=(e,t={})=>{let n=(e,i={})=>{let o=t.escapeInvalid&&r.isInvalidBrace(i),s=!0===e.invalid&&!0===t.escapeInvalid,a="";if(e.value)return(o||s)&&r.isOpenOrClose(e)?"\\"+e.value:e.value;if(e.value)return e.value;if(e.nodes)for(let t of e.nodes)a+=n(t);return a};return n(e)}},949:(e,t)=>{"use strict";t.isInteger=e=>"number"==typeof e?Number.isInteger(e):"string"==typeof e&&""!==e.trim()&&Number.isInteger(Number(e)),t.find=(e,t)=>e.nodes.find((e=>e.type===t)),t.exceedsLimit=(e,n,r=1,i)=>!1!==i&&(!(!t.isInteger(e)||!t.isInteger(n))&&(Number(n)-Number(e))/Number(r)>=i),t.escapeNode=(e,t=0,n)=>{let r=e.nodes[t];r&&(n&&r.type===n||"open"===r.type||"close"===r.type)&&!0!==r.escaped&&(r.value="\\"+r.value,r.escaped=!0)},t.encloseBrace=e=>"brace"===e.type&&(e.commas>>0+e.ranges>>0==0&&(e.invalid=!0,!0)),t.isInvalidBrace=e=>"brace"===e.type&&(!(!0!==e.invalid&&!e.dollar)||(e.commas>>0+e.ranges>>0==0||!0!==e.open||!0!==e.close)&&(e.invalid=!0,!0)),t.isOpenOrClose=e=>"open"===e.type||"close"===e.type||(!0===e.open||!0===e.close),t.reduce=e=>e.reduce(((e,t)=>("text"===t.type&&e.push(t.value),"range"===t.type&&(t.type="text"),e)),[]),t.flatten=(...e)=>{const t=[],n=e=>{for(let r=0;r<e.length;r++){let i=e[r];Array.isArray(i)?n(i,t):void 0!==i&&t.push(i)}return t};return n(e),t}},5242:(e,t,n)=>{"use strict";
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */const r=n(3837),i=n(5446),o=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),s=e=>"number"==typeof e||"string"==typeof e&&""!==e,a=e=>Number.isInteger(+e),c=e=>{let t=`${e}`,n=-1;if("-"===t[0]&&(t=t.slice(1)),"0"===t)return!1;for(;"0"===t[++n];);return n>0},u=(e,t,n)=>{if(t>0){let n="-"===e[0]?"-":"";n&&(e=e.slice(1)),e=n+e.padStart(n?t-1:t,"0")}return!1===n?String(e):e},l=(e,t)=>{let n="-"===e[0]?"-":"";for(n&&(e=e.slice(1),t--);e.length<t;)e="0"+e;return n?"-"+e:e},d=(e,t,n,r)=>{if(n)return i(e,t,{wrap:!1,...r});let o=String.fromCharCode(e);return e===t?o:`[${o}-${String.fromCharCode(t)}]`},h=(e,t,n)=>{if(Array.isArray(e)){let t=!0===n.wrap,r=n.capture?"":"?:";return t?`(${r}${e.join("|")})`:e.join("|")}return i(e,t,n)},f=(...e)=>new RangeError("Invalid range arguments: "+r.inspect(...e)),p=(e,t,n)=>{if(!0===n.strictRanges)throw f([e,t]);return[]},m=(e,t,n=1,r={})=>{let i=Number(e),o=Number(t);if(!Number.isInteger(i)||!Number.isInteger(o)){if(!0===r.strictRanges)throw f([e,t]);return[]}0===i&&(i=0),0===o&&(o=0);let s=i>o,a=String(e),p=String(t),m=String(n);n=Math.max(Math.abs(n),1);let g=c(a)||c(p)||c(m),y=g?Math.max(a.length,p.length,m.length):0,v=!1===g&&!1===((e,t,n)=>"string"==typeof e||"string"==typeof t||!0===n.stringify)(e,t,r),_=r.transform||(e=>t=>!0===e?Number(t):String(t))(v);if(r.toRegex&&1===n)return d(l(e,y),l(t,y),!0,r);let b={negatives:[],positives:[]},S=[],w=0;for(;s?i>=o:i<=o;)!0===r.toRegex&&n>1?b[(E=i)<0?"negatives":"positives"].push(Math.abs(E)):S.push(u(_(i,w),y,v)),i=s?i-n:i+n,w++;var E;return!0===r.toRegex?n>1?((e,t)=>{e.negatives.sort(((e,t)=>e<t?-1:e>t?1:0)),e.positives.sort(((e,t)=>e<t?-1:e>t?1:0));let n,r=t.capture?"":"?:",i="",o="";return e.positives.length&&(i=e.positives.join("|")),e.negatives.length&&(o=`-(${r}${e.negatives.join("|")})`),n=i&&o?`${i}|${o}`:i||o,t.wrap?`(${r}${n})`:n})(b,r):h(S,null,{wrap:!1,...r}):S},g=(e,t,n,r={})=>{if(null==t&&s(e))return[e];if(!s(e)||!s(t))return p(e,t,r);if("function"==typeof n)return g(e,t,1,{transform:n});if(o(n))return g(e,t,0,n);let i={...r};return!0===i.capture&&(i.wrap=!0),n=n||i.step||1,a(n)?a(e)&&a(t)?m(e,t,n,i):((e,t,n=1,r={})=>{if(!a(e)&&e.length>1||!a(t)&&t.length>1)return p(e,t,r);let i=r.transform||(e=>String.fromCharCode(e)),o=`${e}`.charCodeAt(0),s=`${t}`.charCodeAt(0),c=o>s,u=Math.min(o,s),l=Math.max(o,s);if(r.toRegex&&1===n)return d(u,l,!1,r);let f=[],m=0;for(;c?o>=s:o<=s;)f.push(i(o,m)),o=c?o-n:o+n,m++;return!0===r.toRegex?h(f,null,{wrap:!1,options:r}):f})(e,t,Math.max(Math.abs(n),1),i):null==n||o(n)?g(e,t,1,n):((e,t)=>{if(!0===t.strictRanges)throw new TypeError(`Expected step "${e}" to be a number`);return[]})(n,i)};e.exports=g},1436:e=>{"use strict";
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */e.exports=function(e){return"number"==typeof e?e-e==0:"string"==typeof e&&""!==e.trim()&&(Number.isFinite?Number.isFinite(+e):isFinite(+e))}},9433:(e,t,n)=>{"use strict";const r=n(3837),i=n(9186),o=n(9444),s=n(8702),a=e=>""===e||"./"===e,c=(e,t,n)=>{t=[].concat(t),e=[].concat(e);let r=new Set,i=new Set,s=new Set,a=0,c=e=>{s.add(e.output),n&&n.onResult&&n.onResult(e)};for(let s=0;s<t.length;s++){let u=o(String(t[s]),{...n,onResult:c},!0),l=u.state.negated||u.state.negatedExtglob;l&&a++;for(let t of e){let e=u(t,!0);(l?!e.isMatch:e.isMatch)&&(l?r.add(e.output):(r.delete(e.output),i.add(e.output)))}}let u=(a===t.length?[...s]:[...i]).filter((e=>!r.has(e)));if(n&&0===u.length){if(!0===n.failglob)throw new Error(`No matches found for "${t.join(", ")}"`);if(!0===n.nonull||!0===n.nullglob)return n.unescape?t.map((e=>e.replace(/\\/g,""))):t}return u};c.match=c,c.matcher=(e,t)=>o(e,t),c.any=c.isMatch=(e,t,n)=>o(t,n)(e),c.not=(e,t,n={})=>{t=[].concat(t).map(String);let r=new Set,i=[],o=c(e,t,{...n,onResult:e=>{n.onResult&&n.onResult(e),i.push(e.output)}});for(let e of i)o.includes(e)||r.add(e);return[...r]},c.contains=(e,t,n)=>{if("string"!=typeof e)throw new TypeError(`Expected a string: "${r.inspect(e)}"`);if(Array.isArray(t))return t.some((t=>c.contains(e,t,n)));if("string"==typeof t){if(a(e)||a(t))return!1;if(e.includes(t)||e.startsWith("./")&&e.slice(2).includes(t))return!0}return c.isMatch(e,t,{...n,contains:!0})},c.matchKeys=(e,t,n)=>{if(!s.isObject(e))throw new TypeError("Expected the first argument to be an object");let r=c(Object.keys(e),t,n),i={};for(let t of r)i[t]=e[t];return i},c.some=(e,t,n)=>{let r=[].concat(e);for(let e of[].concat(t)){let t=o(String(e),n);if(r.some((e=>t(e))))return!0}return!1},c.every=(e,t,n)=>{let r=[].concat(e);for(let e of[].concat(t)){let t=o(String(e),n);if(!r.every((e=>t(e))))return!1}return!0},c.all=(e,t,n)=>{if("string"!=typeof e)throw new TypeError(`Expected a string: "${r.inspect(e)}"`);return[].concat(t).every((t=>o(t,n)(e)))},c.capture=(e,t,n)=>{let r=s.isWindows(n),i=o.makeRe(String(e),{...n,capture:!0}).exec(r?s.toPosixSlashes(t):t);if(i)return i.slice(1).map((e=>void 0===e?"":e))},c.makeRe=(...e)=>o.makeRe(...e),c.scan=(...e)=>o.scan(...e),c.parse=(e,t)=>{let n=[];for(let r of[].concat(e||[]))for(let e of i(String(r),t))n.push(o.parse(e,t));return n},c.braces=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return t&&!0===t.nobrace||!/\{.*\}/.test(e)?[e]:i(e,t)},c.braceExpand=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return c.braces(e,{...t,expand:!0})},e.exports=c},5446:(e,t,n)=>{"use strict";
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */const r=n(1436),i=(e,t,n)=>{if(!1===r(e))throw new TypeError("toRegexRange: expected the first argument to be a number");if(void 0===t||e===t)return String(e);if(!1===r(t))throw new TypeError("toRegexRange: expected the second argument to be a number.");let o={relaxZeros:!0,...n};"boolean"==typeof o.strictZeros&&(o.relaxZeros=!1===o.strictZeros);let c=e+":"+t+"="+String(o.relaxZeros)+String(o.shorthand)+String(o.capture)+String(o.wrap);if(i.cache.hasOwnProperty(c))return i.cache[c].result;let u=Math.min(e,t),l=Math.max(e,t);if(1===Math.abs(u-l)){let n=e+"|"+t;return o.capture?`(${n})`:!1===o.wrap?n:`(?:${n})`}let d=p(e)||p(t),h={min:e,max:t,a:u,b:l},f=[],m=[];if(d&&(h.isPadded=d,h.maxLen=String(h.max).length),u<0){m=s(l<0?Math.abs(l):1,Math.abs(u),h,o),u=h.a=0}return l>=0&&(f=s(u,l,h,o)),h.negatives=m,h.positives=f,h.result=function(e,t,n){let r=a(e,t,"-",!1,n)||[],i=a(t,e,"",!1,n)||[],o=a(e,t,"-?",!0,n)||[];return r.concat(o).concat(i).join("|")}(m,f,o),!0===o.capture?h.result=`(${h.result})`:!1!==o.wrap&&f.length+m.length>1&&(h.result=`(?:${h.result})`),i.cache[c]=h,h.result};function o(e,t,n){if(e===t)return{pattern:e,count:[],digits:0};let r=function(e,t){let n=[];for(let r=0;r<e.length;r++)n.push([e[r],t[r]]);return n}(e,t),i=r.length,o="",s=0;for(let e=0;e<i;e++){let[t,i]=r[e];t===i?o+=t:"0"!==t||"9"!==i?o+=f(t,i,n):s++}return s&&(o+=!0===n.shorthand?"\\d":"[0-9]"),{pattern:o,count:[s],digits:i}}function s(e,t,n,r){let i,s=function(e,t){let n=1,r=1,i=l(e,n),o=new Set([t]);for(;e<=i&&i<=t;)o.add(i),n+=1,i=l(e,n);for(i=d(t+1,r)-1;e<i&&i<=t;)o.add(i),r+=1,i=d(t+1,r)-1;return o=[...o],o.sort(c),o}(e,t),a=[],u=e;for(let e=0;e<s.length;e++){let t=s[e],c=o(String(u),String(t),r),l="";n.isPadded||!i||i.pattern!==c.pattern?(n.isPadded&&(l=m(t,n,r)),c.string=l+c.pattern+h(c.count),a.push(c),u=t+1,i=c):(i.count.length>1&&i.count.pop(),i.count.push(c.count[0]),i.string=i.pattern+h(i.count),u=t+1)}return a}function a(e,t,n,r,i){let o=[];for(let i of e){let{string:e}=i;r||u(t,"string",e)||o.push(n+e),r&&u(t,"string",e)&&o.push(n+e)}return o}function c(e,t){return e>t?1:t>e?-1:0}function u(e,t,n){return e.some((e=>e[t]===n))}function l(e,t){return Number(String(e).slice(0,-t)+"9".repeat(t))}function d(e,t){return e-e%Math.pow(10,t)}function h(e){let[t=0,n=""]=e;return n||t>1?`{${t+(n?","+n:"")}}`:""}function f(e,t,n){return`[${e}${t-e==1?"":"-"}${t}]`}function p(e){return/^-?(0+)\d/.test(e)}function m(e,t,n){if(!t.isPadded)return e;let r=Math.abs(t.maxLen-String(e).length),i=!1!==n.relaxZeros;switch(r){case 0:return"";case 1:return i?"0?":"0";case 2:return i?"0{0,2}":"00";default:return i?`0{0,${r}}`:`0{${r}}`}}i.cache={},i.clearCache=()=>i.cache={},e.exports=i},3294:(e,t,n)=>{"use strict";const r=n(5135),i=n(3456),o=n(3403),s=n(4113),a=n(3862),c=n(4426);async function u(e,t){d(e);const n=l(e,i.default,t),r=await Promise.all(n);return c.array.flatten(r)}function l(e,t,n){const i=[].concat(e),o=new a.default(n),s=r.generate(i,o),c=new t(o);return s.map(c.read,c)}function d(e){if(![].concat(e).every((e=>c.string.isString(e)&&!c.string.isEmpty(e))))throw new TypeError("Patterns must be a string (non empty) or an array of strings")}!function(e){e.sync=function(e,t){d(e);const n=l(e,s.default,t);return c.array.flatten(n)},e.stream=function(e,t){d(e);const n=l(e,o.default,t);return c.stream.merge(n)},e.generateTasks=function(e,t){d(e);const n=[].concat(e),i=new a.default(t);return r.generate(n,i)},e.isDynamicPattern=function(e,t){d(e);const n=new a.default(t);return c.pattern.isDynamicPattern(e,n)},e.escapePath=function(e){return d(e),c.path.escape(e)}}(u||(u={})),e.exports=u},5135:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertPatternGroupToTask=t.convertPatternGroupsToTasks=t.groupPatternsByBaseDirectory=t.getNegativePatternsAsPositive=t.getPositivePatterns=t.convertPatternsToTasks=t.generate=void 0;const r=n(4426);function i(e,t,n){const i=[],o=r.pattern.getPatternsOutsideCurrentDirectory(e),s=r.pattern.getPatternsInsideCurrentDirectory(e),l=a(o),d=a(s);return i.push(...c(l,t,n)),"."in d?i.push(u(".",s,t,n)):i.push(...c(d,t,n)),i}function o(e){return r.pattern.getPositivePatterns(e)}function s(e,t){return r.pattern.getNegativePatterns(e).concat(t).map(r.pattern.convertToPositivePattern)}function a(e){return e.reduce(((e,t)=>{const n=r.pattern.getBaseDirectory(t);return n in e?e[n].push(t):e[n]=[t],e}),{})}function c(e,t,n){return Object.keys(e).map((r=>u(r,e[r],t,n)))}function u(e,t,n,i){return{dynamic:i,positive:t,negative:n,base:e,patterns:[].concat(t,n.map(r.pattern.convertToNegativePattern))}}t.generate=function(e,t){const n=o(e),a=s(e,t.ignore),c=n.filter((e=>r.pattern.isStaticPattern(e,t))),u=n.filter((e=>r.pattern.isDynamicPattern(e,t))),l=i(c,a,!1),d=i(u,a,!0);return l.concat(d)},t.convertPatternsToTasks=i,t.getPositivePatterns=o,t.getNegativePatternsAsPositive=s,t.groupPatternsByBaseDirectory=a,t.convertPatternGroupsToTasks=c,t.convertPatternGroupToTask=u},3456:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(9086),i=n(466);class o extends i.default{constructor(){super(...arguments),this._reader=new r.default(this._settings)}read(e){const t=this._getRootDirectory(e),n=this._getReaderOptions(e),r=[];return new Promise(((i,o)=>{const s=this.api(t,e,n);s.once("error",o),s.on("data",(e=>r.push(n.transform(e)))),s.once("end",(()=>i(r)))}))}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}}t.default=o},346:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4426),i=n(7769);t.default=class{constructor(e,t){this._settings=e,this._micromatchOptions=t}getFilter(e,t,n){const r=this._getMatcher(t),i=this._getNegativePatternsRe(n);return t=>this._filter(e,t,r,i)}_getMatcher(e){return new i.default(e,this._settings,this._micromatchOptions)}_getNegativePatternsRe(e){const t=e.filter(r.pattern.isAffectDepthOfReadingPattern);return r.pattern.convertPatternsToRe(t,this._micromatchOptions)}_filter(e,t,n,i){if(this._isSkippedByDeep(e,t.path))return!1;if(this._isSkippedSymbolicLink(t))return!1;const o=r.path.removeLeadingDotSegment(t.path);return!this._isSkippedByPositivePatterns(o,n)&&this._isSkippedByNegativePatterns(o,i)}_isSkippedByDeep(e,t){return this._settings.deep!==1/0&&this._getEntryLevel(e,t)>=this._settings.deep}_getEntryLevel(e,t){const n=t.split("/").length;if(""===e)return n;return n-e.split("/").length}_isSkippedSymbolicLink(e){return!this._settings.followSymbolicLinks&&e.dirent.isSymbolicLink()}_isSkippedByPositivePatterns(e,t){return!this._settings.baseNameMatch&&!t.match(e)}_isSkippedByNegativePatterns(e,t){return!r.pattern.matchAny(e,t)}}},7026:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4426);t.default=class{constructor(e,t){this._settings=e,this._micromatchOptions=t,this.index=new Map}getFilter(e,t){const n=r.pattern.convertPatternsToRe(e,this._micromatchOptions),i=r.pattern.convertPatternsToRe(t,this._micromatchOptions);return e=>this._filter(e,n,i)}_filter(e,t,n){if(this._settings.unique&&this._isDuplicateEntry(e))return!1;if(this._onlyFileFilter(e)||this._onlyDirectoryFilter(e))return!1;if(this._isSkippedByAbsoluteNegativePatterns(e.path,n))return!1;const r=this._settings.baseNameMatch?e.name:e.path,i=this._isMatchToPatterns(r,t)&&!this._isMatchToPatterns(e.path,n);return this._settings.unique&&i&&this._createIndexRecord(e),i}_isDuplicateEntry(e){return this.index.has(e.path)}_createIndexRecord(e){this.index.set(e.path,void 0)}_onlyFileFilter(e){return this._settings.onlyFiles&&!e.dirent.isFile()}_onlyDirectoryFilter(e){return this._settings.onlyDirectories&&!e.dirent.isDirectory()}_isSkippedByAbsoluteNegativePatterns(e,t){if(!this._settings.absolute)return!1;const n=r.path.makeAbsolute(this._settings.cwd,e);return r.pattern.matchAny(n,t)}_isMatchToPatterns(e,t){const n=r.path.removeLeadingDotSegment(e);return r.pattern.matchAny(n,t)}}},3046:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4426);t.default=class{constructor(e){this._settings=e}getFilter(){return e=>this._isNonFatalError(e)}_isNonFatalError(e){return r.errno.isEnoentCodeError(e)||this._settings.suppressErrors}}},92:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4426);t.default=class{constructor(e,t,n){this._patterns=e,this._settings=t,this._micromatchOptions=n,this._storage=[],this._fillStorage()}_fillStorage(){const e=r.pattern.expandPatternsWithBraceExpansion(this._patterns);for(const t of e){const e=this._getPatternSegments(t),n=this._splitSegmentsIntoSections(e);this._storage.push({complete:n.length<=1,pattern:t,segments:e,sections:n})}}_getPatternSegments(e){return r.pattern.getPatternParts(e,this._micromatchOptions).map((e=>r.pattern.isDynamicPattern(e,this._settings)?{dynamic:!0,pattern:e,patternRe:r.pattern.makeRe(e,this._micromatchOptions)}:{dynamic:!1,pattern:e}))}_splitSegmentsIntoSections(e){return r.array.splitWhen(e,(e=>e.dynamic&&r.pattern.hasGlobStar(e.pattern)))}}},7769:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(92);class i extends r.default{match(e){const t=e.split("/"),n=t.length,r=this._storage.filter((e=>!e.complete||e.segments.length>n));for(const e of r){const r=e.sections[0];if(!e.complete&&n>r.length)return!0;if(t.every(((t,n)=>{const r=e.segments[n];return!(!r.dynamic||!r.patternRe.test(t))||!r.dynamic&&r.pattern===t})))return!0}return!1}}t.default=i},466:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1017),i=n(346),o=n(7026),s=n(3046),a=n(218);t.default=class{constructor(e){this._settings=e,this.errorFilter=new s.default(this._settings),this.entryFilter=new o.default(this._settings,this._getMicromatchOptions()),this.deepFilter=new i.default(this._settings,this._getMicromatchOptions()),this.entryTransformer=new a.default(this._settings)}_getRootDirectory(e){return r.resolve(this._settings.cwd,e.base)}_getReaderOptions(e){const t="."===e.base?"":e.base;return{basePath:t,pathSegmentSeparator:"/",concurrency:this._settings.concurrency,deepFilter:this.deepFilter.getFilter(t,e.positive,e.negative),entryFilter:this.entryFilter.getFilter(e.positive,e.negative),errorFilter:this.errorFilter.getFilter(),followSymbolicLinks:this._settings.followSymbolicLinks,fs:this._settings.fs,stats:this._settings.stats,throwErrorOnBrokenSymbolicLink:this._settings.throwErrorOnBrokenSymbolicLink,transform:this.entryTransformer.getTransformer()}}_getMicromatchOptions(){return{dot:this._settings.dot,matchBase:this._settings.baseNameMatch,nobrace:!this._settings.braceExpansion,nocase:!this._settings.caseSensitiveMatch,noext:!this._settings.extglob,noglobstar:!this._settings.globstar,posix:!0,strictSlashes:!1}}}},3403:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2781),i=n(9086),o=n(466);class s extends o.default{constructor(){super(...arguments),this._reader=new i.default(this._settings)}read(e){const t=this._getRootDirectory(e),n=this._getReaderOptions(e),i=this.api(t,e,n),o=new r.Readable({objectMode:!0,read:()=>{}});return i.once("error",(e=>o.emit("error",e))).on("data",(e=>o.emit("data",n.transform(e)))).once("end",(()=>o.emit("end"))),o.once("close",(()=>i.destroy())),o}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}}t.default=s},4113:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(112),i=n(466);class o extends i.default{constructor(){super(...arguments),this._reader=new r.default(this._settings)}read(e){const t=this._getRootDirectory(e),n=this._getReaderOptions(e);return this.api(t,e,n).map(n.transform)}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}}t.default=o},218:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4426);t.default=class{constructor(e){this._settings=e}getTransformer(){return e=>this._transform(e)}_transform(e){let t=e.path;return this._settings.absolute&&(t=r.path.makeAbsolute(this._settings.cwd,t),t=r.path.unixify(t)),this._settings.markDirectories&&e.dirent.isDirectory()&&(t+="/"),this._settings.objectMode?Object.assign(Object.assign({},e),{path:t}):t}}},2117:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1017),i=n(6203),o=n(4426);t.default=class{constructor(e){this._settings=e,this._fsStatSettings=new i.Settings({followSymbolicLink:this._settings.followSymbolicLinks,fs:this._settings.fs,throwErrorOnBrokenSymbolicLink:this._settings.followSymbolicLinks})}_getFullEntryPath(e){return r.resolve(this._settings.cwd,e)}_makeEntry(e,t){const n={name:t,path:t,dirent:o.fs.createDirentFromStats(t,e)};return this._settings.stats&&(n.stats=e),n}_isFatalError(e){return!o.errno.isEnoentCodeError(e)&&!this._settings.suppressErrors}}},9086:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2781),i=n(6203),o=n(5439),s=n(2117);class a extends s.default{constructor(){super(...arguments),this._walkStream=o.walkStream,this._stat=i.stat}dynamic(e,t){return this._walkStream(e,t)}static(e,t){const n=e.map(this._getFullEntryPath,this),i=new r.PassThrough({objectMode:!0});i._write=(r,o,s)=>this._getEntry(n[r],e[r],t).then((e=>{null!==e&&t.entryFilter(e)&&i.push(e),r===n.length-1&&i.end(),s()})).catch(s);for(let e=0;e<n.length;e++)i.write(e);return i}_getEntry(e,t,n){return this._getStat(e).then((e=>this._makeEntry(e,t))).catch((e=>{if(n.errorFilter(e))return null;throw e}))}_getStat(e){return new Promise(((t,n)=>{this._stat(e,this._fsStatSettings,((e,r)=>null===e?t(r):n(e)))}))}}t.default=a},112:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(6203),i=n(5439),o=n(2117);class s extends o.default{constructor(){super(...arguments),this._walkSync=i.walkSync,this._statSync=r.statSync}dynamic(e,t){return this._walkSync(e,t)}static(e,t){const n=[];for(const r of e){const e=this._getFullEntryPath(r),i=this._getEntry(e,r,t);null!==i&&t.entryFilter(i)&&n.push(i)}return n}_getEntry(e,t,n){try{const n=this._getStat(e);return this._makeEntry(n,t)}catch(e){if(n.errorFilter(e))return null;throw e}}_getStat(e){return this._statSync(e,this._fsStatSettings)}}t.default=s},3862:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_FILE_SYSTEM_ADAPTER=void 0;const r=n(7147),i=n(2037),o=Math.max(i.cpus().length,1);t.DEFAULT_FILE_SYSTEM_ADAPTER={lstat:r.lstat,lstatSync:r.lstatSync,stat:r.stat,statSync:r.statSync,readdir:r.readdir,readdirSync:r.readdirSync};t.default=class{constructor(e={}){this._options=e,this.absolute=this._getValue(this._options.absolute,!1),this.baseNameMatch=this._getValue(this._options.baseNameMatch,!1),this.braceExpansion=this._getValue(this._options.braceExpansion,!0),this.caseSensitiveMatch=this._getValue(this._options.caseSensitiveMatch,!0),this.concurrency=this._getValue(this._options.concurrency,o),this.cwd=this._getValue(this._options.cwd,process.cwd()),this.deep=this._getValue(this._options.deep,1/0),this.dot=this._getValue(this._options.dot,!1),this.extglob=this._getValue(this._options.extglob,!0),this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!0),this.fs=this._getFileSystemMethods(this._options.fs),this.globstar=this._getValue(this._options.globstar,!0),this.ignore=this._getValue(this._options.ignore,[]),this.markDirectories=this._getValue(this._options.markDirectories,!1),this.objectMode=this._getValue(this._options.objectMode,!1),this.onlyDirectories=this._getValue(this._options.onlyDirectories,!1),this.onlyFiles=this._getValue(this._options.onlyFiles,!0),this.stats=this._getValue(this._options.stats,!1),this.suppressErrors=this._getValue(this._options.suppressErrors,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!1),this.unique=this._getValue(this._options.unique,!0),this.onlyDirectories&&(this.onlyFiles=!1),this.stats&&(this.objectMode=!0)}_getValue(e,t){return void 0===e?t:e}_getFileSystemMethods(e={}){return Object.assign(Object.assign({},t.DEFAULT_FILE_SYSTEM_ADAPTER),e)}}},4825:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.splitWhen=t.flatten=void 0,t.flatten=function(e){return e.reduce(((e,t)=>[].concat(e,t)),[])},t.splitWhen=function(e,t){const n=[[]];let r=0;for(const i of e)t(i)?(r++,n[r]=[]):n[r].push(i);return n}},7843:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isEnoentCodeError=void 0,t.isEnoentCodeError=function(e){return"ENOENT"===e.code}},6334:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createDirentFromStats=void 0;class n{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}}t.createDirentFromStats=function(e,t){return new n(e,t)}},4426:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.string=t.stream=t.pattern=t.path=t.fs=t.errno=t.array=void 0;const r=n(4825);t.array=r;const i=n(7843);t.errno=i;const o=n(6334);t.fs=o;const s=n(2003);t.path=s;const a=n(57);t.pattern=a;const c=n(6242);t.stream=c;const u=n(3021);t.string=u},2003:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeLeadingDotSegment=t.escape=t.makeAbsolute=t.unixify=void 0;const r=n(1017),i=/(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;t.unixify=function(e){return e.replace(/\\/g,"/")},t.makeAbsolute=function(e,t){return r.resolve(e,t)},t.escape=function(e){return e.replace(i,"\\$2")},t.removeLeadingDotSegment=function(e){if("."===e.charAt(0)){const t=e.charAt(1);if("/"===t||"\\"===t)return e.slice(2)}return e}},57:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.matchAny=t.convertPatternsToRe=t.makeRe=t.getPatternParts=t.expandBraceExpansion=t.expandPatternsWithBraceExpansion=t.isAffectDepthOfReadingPattern=t.endsWithSlashGlobStar=t.hasGlobStar=t.getBaseDirectory=t.isPatternRelatedToParentDirectory=t.getPatternsOutsideCurrentDirectory=t.getPatternsInsideCurrentDirectory=t.getPositivePatterns=t.getNegativePatterns=t.isPositivePattern=t.isNegativePattern=t.convertToNegativePattern=t.convertToPositivePattern=t.isDynamicPattern=t.isStaticPattern=void 0;const r=n(1017),i=n(7647),o=n(9433),s=/[*?]|^!/,a=/\[.*]/,c=/(?:^|[^!*+?@])\(.*\|.*\)/,u=/[!*+?@]\(.*\)/,l=/{.*(?:,|\.\.).*}/;function d(e,t={}){return!h(e,t)}function h(e,t={}){return""!==e&&(!(!1!==t.caseSensitiveMatch&&!e.includes("\\"))||(!!(s.test(e)||a.test(e)||c.test(e))||(!(!1===t.extglob||!u.test(e))||!(!1===t.braceExpansion||!l.test(e)))))}function f(e){return e.startsWith("!")&&"("!==e[1]}function p(e){return!f(e)}function m(e){return e.startsWith("..")||e.startsWith("./..")}function g(e){return e.endsWith("/**")}function y(e){return o.braces(e,{expand:!0,nodupes:!0})}function v(e,t){return o.makeRe(e,t)}t.isStaticPattern=d,t.isDynamicPattern=h,t.convertToPositivePattern=function(e){return f(e)?e.slice(1):e},t.convertToNegativePattern=function(e){return"!"+e},t.isNegativePattern=f,t.isPositivePattern=p,t.getNegativePatterns=function(e){return e.filter(f)},t.getPositivePatterns=function(e){return e.filter(p)},t.getPatternsInsideCurrentDirectory=function(e){return e.filter((e=>!m(e)))},t.getPatternsOutsideCurrentDirectory=function(e){return e.filter(m)},t.isPatternRelatedToParentDirectory=m,t.getBaseDirectory=function(e){return i(e,{flipBackslashes:!1})},t.hasGlobStar=function(e){return e.includes("**")},t.endsWithSlashGlobStar=g,t.isAffectDepthOfReadingPattern=function(e){const t=r.basename(e);return g(e)||d(t)},t.expandPatternsWithBraceExpansion=function(e){return e.reduce(((e,t)=>e.concat(y(t))),[])},t.expandBraceExpansion=y,t.getPatternParts=function(e,t){let{parts:n}=o.scan(e,Object.assign(Object.assign({},t),{parts:!0}));return 0===n.length&&(n=[e]),n[0].startsWith("/")&&(n[0]=n[0].slice(1),n.unshift("")),n},t.makeRe=v,t.convertPatternsToRe=function(e,t){return e.map((e=>v(e,t)))},t.matchAny=function(e,t){return t.some((t=>t.test(e)))}},6242:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;const r=n(155);function i(e){e.forEach((e=>e.emit("close")))}t.merge=function(e){const t=r(e);return e.forEach((e=>{e.once("error",(e=>t.emit("error",e)))})),t.once("close",(()=>i(e))),t.once("end",(()=>i(e))),t}},3021:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isEmpty=t.isString=void 0,t.isString=function(e){return"string"==typeof e},t.isEmpty=function(e){return""===e}},373:(e,t,n)=>{"use strict";var r=n(3650);function i(e,t,n){if("function"==typeof e&&(n=t,t=e,e=null),n<1)throw new Error("fastqueue concurrency must be greater than 1");var i=r(s),a=null,c=null,u=0,l=null,d={push:function(n,r){var s=i.get();s.context=e,s.release=h,s.value=n,s.callback=r||o,s.errorHandler=l,u===d.concurrency||d.paused?c?(c.next=s,c=s):(a=s,c=s,d.saturated()):(u++,t.call(e,s.value,s.worked))},drain:o,saturated:o,pause:function(){d.paused=!0},paused:!1,concurrency:n,running:function(){return u},resume:function(){if(!d.paused)return;d.paused=!1;for(var e=0;e<d.concurrency;e++)u++,h()},idle:function(){return 0===u&&0===d.length()},length:function(){var e=a,t=0;for(;e;)e=e.next,t++;return t},getQueue:function(){var e=a,t=[];for(;e;)t.push(e.value),e=e.next;return t},unshift:function(n,r){var s=i.get();s.context=e,s.release=h,s.value=n,s.callback=r||o,u===d.concurrency||d.paused?a?(s.next=a,a=s):(a=s,c=s,d.saturated()):(u++,t.call(e,s.value,s.worked))},empty:o,kill:function(){a=null,c=null,d.drain=o},killAndDrain:function(){a=null,c=null,d.drain(),d.drain=o},error:function(e){l=e}};return d;function h(n){n&&i.release(n);var r=a;r?d.paused?u--:(c===a&&(c=null),a=r.next,r.next=null,t.call(e,r.value,r.worked),null===c&&d.empty()):0==--u&&d.drain()}}function o(){}function s(){this.value=null,this.callback=o,this.next=null,this.release=o,this.context=null,this.errorHandler=null;var e=this;this.worked=function(t,n){var r=e.callback,i=e.errorHandler,s=e.value;e.value=null,e.callback=o,e.errorHandler&&i(t,s),r.call(e.context,t,n),e.release(e)}}e.exports=i,e.exports.promise=function(e,t,n){"function"==typeof e&&(n=t,t=e,e=null);var r=i(e,(function(e,n){t.call(this,e).then((function(e){n(null,e)}),n)}),n),s=r.push,a=r.unshift;return r.push=function(e){var t=new Promise((function(t,n){s(e,(function(e,r){e?n(e):t(r)}))}));return t.catch(o),t},r.unshift=function(e){var t=new Promise((function(t,n){a(e,(function(e,r){e?n(e):t(r)}))}));return t.catch(o),t},r.drained=function(){var e=r.drain;return new Promise((function(t){r.drain=function(){e(),t()}}))},r}},5302:(e,t,n)=>{"use strict";const r=n(77),i=n(1017),o=n(1381).mkdirsSync,s=n(318).utimesMillisSync,a=n(2733);function c(e,t,n,o){const s=(o.dereference?r.statSync:r.lstatSync)(t);if(s.isDirectory())return function(e,t,n,i,o){return t?d(n,i,o):function(e,t,n,i){return r.mkdirSync(n),d(t,n,i),l(n,e)}(e.mode,n,i,o)}(s,e,t,n,o);if(s.isFile()||s.isCharacterDevice()||s.isBlockDevice())return function(e,t,n,i,o){return t?function(e,t,n,i){if(i.overwrite)return r.unlinkSync(n),u(e,t,n,i);if(i.errorOnExist)throw new Error(`'${n}' already exists`)}(e,n,i,o):u(e,n,i,o)}(s,e,t,n,o);if(s.isSymbolicLink())return function(e,t,n,o){let s=r.readlinkSync(t);o.dereference&&(s=i.resolve(process.cwd(),s));if(e){let e;try{e=r.readlinkSync(n)}catch(e){if("EINVAL"===e.code||"UNKNOWN"===e.code)return r.symlinkSync(s,n);throw e}if(o.dereference&&(e=i.resolve(process.cwd(),e)),a.isSrcSubdir(s,e))throw new Error(`Cannot copy '${s}' to a subdirectory of itself, '${e}'.`);if(r.statSync(n).isDirectory()&&a.isSrcSubdir(e,s))throw new Error(`Cannot overwrite '${e}' with '${s}'.`);return function(e,t){return r.unlinkSync(t),r.symlinkSync(e,t)}(s,n)}return r.symlinkSync(s,n)}(e,t,n,o);if(s.isSocket())throw new Error(`Cannot copy a socket file: ${t}`);if(s.isFIFO())throw new Error(`Cannot copy a FIFO pipe: ${t}`);throw new Error(`Unknown file: ${t}`)}function u(e,t,n,i){return r.copyFileSync(t,n),i.preserveTimestamps&&function(e,t,n){(function(e){return 0==(128&e)})(e)&&function(e,t){l(e,128|t)}(n,e);(function(e,t){const n=r.statSync(e);s(t,n.atime,n.mtime)})(t,n)}(e.mode,t,n),l(n,e.mode)}function l(e,t){return r.chmodSync(e,t)}function d(e,t,n){r.readdirSync(e).forEach((r=>function(e,t,n,r){const o=i.join(t,e),s=i.join(n,e),{destStat:u}=a.checkPathsSync(o,s,"copy",r);return function(e,t,n,r){if(!r.filter||r.filter(t,n))return c(e,t,n,r)}(u,o,s,r)}(r,e,t,n)))}e.exports=function(e,t,n){"function"==typeof n&&(n={filter:n}),(n=n||{}).clobber=!("clobber"in n)||!!n.clobber,n.overwrite="overwrite"in n?!!n.overwrite:n.clobber,n.preserveTimestamps&&"ia32"===process.arch&&console.warn("fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269");const{srcStat:s,destStat:u}=a.checkPathsSync(e,t,"copy",n);return a.checkParentPathsSync(e,s,t,"copy"),function(e,t,n,s){if(s.filter&&!s.filter(t,n))return;const a=i.dirname(n);r.existsSync(a)||o(a);return c(e,t,n,s)}(u,e,t,n)}},2536:(e,t,n)=>{"use strict";e.exports={copySync:n(5302)}},7189:(e,t,n)=>{"use strict";const r=n(77),i=n(1017),o=n(1381).mkdirs,s=n(9257).pathExists,a=n(318).utimesMillis,c=n(2733);function u(e,t,n,r,a){const c=i.dirname(n);s(c,((i,s)=>i?a(i):s?d(e,t,n,r,a):void o(c,(i=>i?a(i):d(e,t,n,r,a)))))}function l(e,t,n,r,i,o){Promise.resolve(i.filter(n,r)).then((s=>s?e(t,n,r,i,o):o()),(e=>o(e)))}function d(e,t,n,i,o){(i.dereference?r.stat:r.lstat)(t,((s,a)=>s?o(s):a.isDirectory()?function(e,t,n,i,o,s){return t?m(n,i,o,s):function(e,t,n,i,o){r.mkdir(n,(r=>{if(r)return o(r);m(t,n,i,(t=>t?o(t):p(n,e,o)))}))}(e.mode,n,i,o,s)}(a,e,t,n,i,o):a.isFile()||a.isCharacterDevice()||a.isBlockDevice()?function(e,t,n,i,o,s){return t?function(e,t,n,i,o){if(!i.overwrite)return i.errorOnExist?o(new Error(`'${n}' already exists`)):o();r.unlink(n,(r=>r?o(r):h(e,t,n,i,o)))}(e,n,i,o,s):h(e,n,i,o,s)}(a,e,t,n,i,o):a.isSymbolicLink()?y(e,t,n,i,o):a.isSocket()?o(new Error(`Cannot copy a socket file: ${t}`)):a.isFIFO()?o(new Error(`Cannot copy a FIFO pipe: ${t}`)):o(new Error(`Unknown file: ${t}`))))}function h(e,t,n,i,o){r.copyFile(t,n,(r=>r?o(r):i.preserveTimestamps?function(e,t,n,r){if(function(e){return 0==(128&e)}(e))return function(e,t,n){return p(e,128|t,n)}(n,e,(i=>i?r(i):f(e,t,n,r)));return f(e,t,n,r)}(e.mode,t,n,o):p(n,e.mode,o)))}function f(e,t,n,i){!function(e,t,n){r.stat(e,((e,r)=>e?n(e):a(t,r.atime,r.mtime,n)))}(t,n,(t=>t?i(t):p(n,e,i)))}function p(e,t,n){return r.chmod(e,t,n)}function m(e,t,n,i){r.readdir(e,((r,o)=>r?i(r):g(o,e,t,n,i)))}function g(e,t,n,r,o){const s=e.pop();return s?function(e,t,n,r,o,s){const a=i.join(n,t),u=i.join(r,t);c.checkPaths(a,u,"copy",o,((t,i)=>{if(t)return s(t);const{destStat:c}=i;!function(e,t,n,r,i){r.filter?l(d,e,t,n,r,i):d(e,t,n,r,i)}(c,a,u,o,(t=>t?s(t):g(e,n,r,o,s)))}))}(e,s,t,n,r,o):o()}function y(e,t,n,o,s){r.readlink(t,((t,a)=>t?s(t):(o.dereference&&(a=i.resolve(process.cwd(),a)),e?void r.readlink(n,((t,u)=>t?"EINVAL"===t.code||"UNKNOWN"===t.code?r.symlink(a,n,s):s(t):(o.dereference&&(u=i.resolve(process.cwd(),u)),c.isSrcSubdir(a,u)?s(new Error(`Cannot copy '${a}' to a subdirectory of itself, '${u}'.`)):e.isDirectory()&&c.isSrcSubdir(u,a)?s(new Error(`Cannot overwrite '${u}' with '${a}'.`)):function(e,t,n){r.unlink(t,(i=>i?n(i):r.symlink(e,t,n)))}(a,n,s)))):r.symlink(a,n,s))))}e.exports=function(e,t,n,r){"function"!=typeof n||r?"function"==typeof n&&(n={filter:n}):(r=n,n={}),r=r||function(){},(n=n||{}).clobber=!("clobber"in n)||!!n.clobber,n.overwrite="overwrite"in n?!!n.overwrite:n.clobber,n.preserveTimestamps&&"ia32"===process.arch&&console.warn("fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269"),c.checkPaths(e,t,"copy",n,((i,o)=>{if(i)return r(i);const{srcStat:s,destStat:a}=o;c.checkParentPaths(e,s,t,"copy",(i=>i?r(i):n.filter?l(u,a,e,t,n,r):u(a,e,t,n,r)))}))}},6464:(e,t,n)=>{"use strict";const r=n(8981).fromCallback;e.exports={copy:r(n(7189))}},5590:(e,t,n)=>{"use strict";const r=n(8981).fromPromise,i=n(7749),o=n(1017),s=n(1381),a=n(4542),c=r((async function(e){let t;try{t=await i.readdir(e)}catch{return s.mkdirs(e)}return Promise.all(t.map((t=>a.remove(o.join(e,t)))))}));function u(e){let t;try{t=i.readdirSync(e)}catch{return s.mkdirsSync(e)}t.forEach((t=>{t=o.join(e,t),a.removeSync(t)}))}e.exports={emptyDirSync:u,emptydirSync:u,emptyDir:c,emptydir:c}},6530:(e,t,n)=>{"use strict";const r=n(8981).fromCallback,i=n(1017),o=n(77),s=n(1381);e.exports={createFile:r((function(e,t){function n(){o.writeFile(e,"",(e=>{if(e)return t(e);t()}))}o.stat(e,((r,a)=>{if(!r&&a.isFile())return t();const c=i.dirname(e);o.stat(c,((e,r)=>{if(e)return"ENOENT"===e.code?s.mkdirs(c,(e=>{if(e)return t(e);n()})):t(e);r.isDirectory()?n():o.readdir(c,(e=>{if(e)return t(e)}))}))}))})),createFileSync:function(e){let t;try{t=o.statSync(e)}catch{}if(t&&t.isFile())return;const n=i.dirname(e);try{o.statSync(n).isDirectory()||o.readdirSync(n)}catch(e){if(!e||"ENOENT"!==e.code)throw e;s.mkdirsSync(n)}o.writeFileSync(e,"")}}},1720:(e,t,n)=>{"use strict";const r=n(6530),i=n(4147),o=n(3635);e.exports={createFile:r.createFile,createFileSync:r.createFileSync,ensureFile:r.createFile,ensureFileSync:r.createFileSync,createLink:i.createLink,createLinkSync:i.createLinkSync,ensureLink:i.createLink,ensureLinkSync:i.createLinkSync,createSymlink:o.createSymlink,createSymlinkSync:o.createSymlinkSync,ensureSymlink:o.createSymlink,ensureSymlinkSync:o.createSymlinkSync}},4147:(e,t,n)=>{"use strict";const r=n(8981).fromCallback,i=n(1017),o=n(77),s=n(1381),a=n(9257).pathExists,{areIdentical:c}=n(2733);e.exports={createLink:r((function(e,t,n){function r(e,t){o.link(e,t,(e=>{if(e)return n(e);n(null)}))}o.lstat(t,((u,l)=>{o.lstat(e,((o,u)=>{if(o)return o.message=o.message.replace("lstat","ensureLink"),n(o);if(l&&c(u,l))return n(null);const d=i.dirname(t);a(d,((i,o)=>i?n(i):o?r(e,t):void s.mkdirs(d,(i=>{if(i)return n(i);r(e,t)}))))}))}))})),createLinkSync:function(e,t){let n;try{n=o.lstatSync(t)}catch{}try{const t=o.lstatSync(e);if(n&&c(t,n))return}catch(e){throw e.message=e.message.replace("lstat","ensureLink"),e}const r=i.dirname(t);return o.existsSync(r)||s.mkdirsSync(r),o.linkSync(e,t)}}},6072:(e,t,n)=>{"use strict";const r=n(1017),i=n(77),o=n(9257).pathExists;e.exports={symlinkPaths:function(e,t,n){if(r.isAbsolute(e))return i.lstat(e,(t=>t?(t.message=t.message.replace("lstat","ensureSymlink"),n(t)):n(null,{toCwd:e,toDst:e})));{const s=r.dirname(t),a=r.join(s,e);return o(a,((t,o)=>t?n(t):o?n(null,{toCwd:a,toDst:e}):i.lstat(e,(t=>t?(t.message=t.message.replace("lstat","ensureSymlink"),n(t)):n(null,{toCwd:e,toDst:r.relative(s,e)})))))}},symlinkPathsSync:function(e,t){let n;if(r.isAbsolute(e)){if(n=i.existsSync(e),!n)throw new Error("absolute srcpath does not exist");return{toCwd:e,toDst:e}}{const o=r.dirname(t),s=r.join(o,e);if(n=i.existsSync(s),n)return{toCwd:s,toDst:e};if(n=i.existsSync(e),!n)throw new Error("relative srcpath does not exist");return{toCwd:e,toDst:r.relative(o,e)}}}}},9259:(e,t,n)=>{"use strict";const r=n(77);e.exports={symlinkType:function(e,t,n){if(n="function"==typeof t?t:n,t="function"!=typeof t&&t)return n(null,t);r.lstat(e,((e,r)=>{if(e)return n(null,"file");t=r&&r.isDirectory()?"dir":"file",n(null,t)}))},symlinkTypeSync:function(e,t){let n;if(t)return t;try{n=r.lstatSync(e)}catch{return"file"}return n&&n.isDirectory()?"dir":"file"}}},3635:(e,t,n)=>{"use strict";const r=n(8981).fromCallback,i=n(1017),o=n(7749),s=n(1381),a=s.mkdirs,c=s.mkdirsSync,u=n(6072),l=u.symlinkPaths,d=u.symlinkPathsSync,h=n(9259),f=h.symlinkType,p=h.symlinkTypeSync,m=n(9257).pathExists,{areIdentical:g}=n(2733);function y(e,t,n,r){l(e,t,((s,c)=>{if(s)return r(s);e=c.toDst,f(c.toCwd,n,((n,s)=>{if(n)return r(n);const c=i.dirname(t);m(c,((n,i)=>n?r(n):i?o.symlink(e,t,s,r):void a(c,(n=>{if(n)return r(n);o.symlink(e,t,s,r)}))))}))}))}e.exports={createSymlink:r((function(e,t,n,r){r="function"==typeof n?n:r,n="function"!=typeof n&&n,o.lstat(t,((i,s)=>{!i&&s.isSymbolicLink()?Promise.all([o.stat(e),o.stat(t)]).then((([i,o])=>{if(g(i,o))return r(null);y(e,t,n,r)})):y(e,t,n,r)}))})),createSymlinkSync:function(e,t,n){let r;try{r=o.lstatSync(t)}catch{}if(r&&r.isSymbolicLink()){const n=o.statSync(e),r=o.statSync(t);if(g(n,r))return}const s=d(e,t);e=s.toDst,n=p(s.toCwd,n);const a=i.dirname(t);return o.existsSync(a)||c(a),o.symlinkSync(e,t,n)}}},7749:(e,t,n)=>{"use strict";const r=n(8981).fromCallback,i=n(77),o=["access","appendFile","chmod","chown","close","copyFile","fchmod","fchown","fdatasync","fstat","fsync","ftruncate","futimes","lchmod","lchown","link","lstat","mkdir","mkdtemp","open","opendir","readdir","readFile","readlink","realpath","rename","rm","rmdir","stat","symlink","truncate","unlink","utimes","writeFile"].filter((e=>"function"==typeof i[e]));Object.assign(t,i),o.forEach((e=>{t[e]=r(i[e])})),t.realpath.native=r(i.realpath.native),t.exists=function(e,t){return"function"==typeof t?i.exists(e,t):new Promise((t=>i.exists(e,t)))},t.read=function(e,t,n,r,o,s){return"function"==typeof s?i.read(e,t,n,r,o,s):new Promise(((s,a)=>{i.read(e,t,n,r,o,((e,t,n)=>{if(e)return a(e);s({bytesRead:t,buffer:n})}))}))},t.write=function(e,t,...n){return"function"==typeof n[n.length-1]?i.write(e,t,...n):new Promise(((r,o)=>{i.write(e,t,...n,((e,t,n)=>{if(e)return o(e);r({bytesWritten:t,buffer:n})}))}))},"function"==typeof i.writev&&(t.writev=function(e,t,...n){return"function"==typeof n[n.length-1]?i.writev(e,t,...n):new Promise(((r,o)=>{i.writev(e,t,...n,((e,t,n)=>{if(e)return o(e);r({bytesWritten:t,buffers:n})}))}))})},5674:(e,t,n)=>{"use strict";e.exports={...n(7749),...n(2536),...n(6464),...n(5590),...n(1720),...n(6573),...n(1381),...n(4026),...n(530),...n(1315),...n(9257),...n(4542)}},6573:(e,t,n)=>{"use strict";const r=n(8981).fromPromise,i=n(7183);i.outputJson=r(n(3508)),i.outputJsonSync=n(9578),i.outputJSON=i.outputJson,i.outputJSONSync=i.outputJsonSync,i.writeJSON=i.writeJson,i.writeJSONSync=i.writeJsonSync,i.readJSON=i.readJson,i.readJSONSync=i.readJsonSync,e.exports=i},7183:(e,t,n)=>{"use strict";const r=n(6813);e.exports={readJson:r.readFile,readJsonSync:r.readFileSync,writeJson:r.writeFile,writeJsonSync:r.writeFileSync}},9578:(e,t,n)=>{"use strict";const{stringify:r}=n(6780),{outputFileSync:i}=n(1315);e.exports=function(e,t,n){const o=r(t,n);i(e,o,n)}},3508:(e,t,n)=>{"use strict";const{stringify:r}=n(6780),{outputFile:i}=n(1315);e.exports=async function(e,t,n={}){const o=r(t,n);await i(e,o,n)}},1381:(e,t,n)=>{"use strict";const r=n(8981).fromPromise,{makeDir:i,makeDirSync:o}=n(8233),s=r(i);e.exports={mkdirs:s,mkdirsSync:o,mkdirp:s,mkdirpSync:o,ensureDir:s,ensureDirSync:o}},8233:(e,t,n)=>{"use strict";const r=n(7749),{checkPath:i}=n(3468),o=e=>"number"==typeof e?e:{mode:511,...e}.mode;e.exports.makeDir=async(e,t)=>(i(e),r.mkdir(e,{mode:o(t),recursive:!0})),e.exports.makeDirSync=(e,t)=>(i(e),r.mkdirSync(e,{mode:o(t),recursive:!0}))},3468:(e,t,n)=>{"use strict";const r=n(1017);e.exports.checkPath=function(e){if("win32"===process.platform){if(/[<>:"|?*]/.test(e.replace(r.parse(e).root,""))){const t=new Error(`Path contains invalid characters: ${e}`);throw t.code="EINVAL",t}}}},4026:(e,t,n)=>{"use strict";e.exports={moveSync:n(6006)}},6006:(e,t,n)=>{"use strict";const r=n(77),i=n(1017),o=n(2536).copySync,s=n(4542).removeSync,a=n(1381).mkdirpSync,c=n(2733);function u(e,t,n){try{r.renameSync(e,t)}catch(r){if("EXDEV"!==r.code)throw r;return function(e,t,n){return o(e,t,{overwrite:n,errorOnExist:true}),s(e)}(e,t,n)}}e.exports=function(e,t,n){const o=(n=n||{}).overwrite||n.clobber||!1,{srcStat:l,isChangingCase:d=!1}=c.checkPathsSync(e,t,"move",n);return c.checkParentPathsSync(e,l,t,"move"),function(e){const t=i.dirname(e);return i.parse(t).root===t}(t)||a(i.dirname(t)),function(e,t,n,i){if(i)return u(e,t,n);if(n)return s(t),u(e,t,n);if(r.existsSync(t))throw new Error("dest already exists.");return u(e,t,n)}(e,t,o,d)}},530:(e,t,n)=>{"use strict";const r=n(8981).fromCallback;e.exports={move:r(n(436))}},436:(e,t,n)=>{"use strict";const r=n(77),i=n(1017),o=n(6464).copy,s=n(4542).remove,a=n(1381).mkdirp,c=n(9257).pathExists,u=n(2733);function l(e,t,n,r,i){return r?d(e,t,n,i):n?s(t,(r=>r?i(r):d(e,t,n,i))):void c(t,((r,o)=>r?i(r):o?i(new Error("dest already exists.")):d(e,t,n,i)))}function d(e,t,n,i){r.rename(e,t,(r=>r?"EXDEV"!==r.code?i(r):function(e,t,n,r){o(e,t,{overwrite:n,errorOnExist:!0},(t=>t?r(t):s(e,r)))}(e,t,n,i):i()))}e.exports=function(e,t,n,r){"function"==typeof n&&(r=n,n={});const o=n.overwrite||n.clobber||!1;u.checkPaths(e,t,"move",n,((n,s)=>{if(n)return r(n);const{srcStat:c,isChangingCase:d=!1}=s;u.checkParentPaths(e,c,t,"move",(n=>n?r(n):function(e){const t=i.dirname(e);return i.parse(t).root===t}(t)?l(e,t,o,d,r):void a(i.dirname(t),(n=>n?r(n):l(e,t,o,d,r)))))}))}},1315:(e,t,n)=>{"use strict";const r=n(8981).fromCallback,i=n(77),o=n(1017),s=n(1381),a=n(9257).pathExists;e.exports={outputFile:r((function(e,t,n,r){"function"==typeof n&&(r=n,n="utf8");const c=o.dirname(e);a(c,((o,a)=>o?r(o):a?i.writeFile(e,t,n,r):void s.mkdirs(c,(o=>{if(o)return r(o);i.writeFile(e,t,n,r)}))))})),outputFileSync:function(e,...t){const n=o.dirname(e);if(i.existsSync(n))return i.writeFileSync(e,...t);s.mkdirsSync(n),i.writeFileSync(e,...t)}}},9257:(e,t,n)=>{"use strict";const r=n(8981).fromPromise,i=n(7749);e.exports={pathExists:r((function(e){return i.access(e).then((()=>!0)).catch((()=>!1))})),pathExistsSync:i.existsSync}},4542:(e,t,n)=>{"use strict";const r=n(77),i=n(8981).fromCallback,o=n(8157);e.exports={remove:i((function(e,t){if(r.rm)return r.rm(e,{recursive:!0,force:!0},t);o(e,t)})),removeSync:function(e){if(r.rmSync)return r.rmSync(e,{recursive:!0,force:!0});o.sync(e)}}},8157:(e,t,n)=>{"use strict";const r=n(77),i=n(1017),o=n(9491),s="win32"===process.platform;function a(e){["unlink","chmod","stat","lstat","rmdir","readdir"].forEach((t=>{e[t]=e[t]||r[t],e[t+="Sync"]=e[t]||r[t]})),e.maxBusyTries=e.maxBusyTries||3}function c(e,t,n){let r=0;"function"==typeof t&&(n=t,t={}),o(e,"rimraf: missing path"),o.strictEqual(typeof e,"string","rimraf: path should be a string"),o.strictEqual(typeof n,"function","rimraf: callback function required"),o(t,"rimraf: invalid options argument provided"),o.strictEqual(typeof t,"object","rimraf: options should be object"),a(t),u(e,t,(function i(o){if(o){if(("EBUSY"===o.code||"ENOTEMPTY"===o.code||"EPERM"===o.code)&&r<t.maxBusyTries){r++;return setTimeout((()=>u(e,t,i)),100*r)}"ENOENT"===o.code&&(o=null)}n(o)}))}function u(e,t,n){o(e),o(t),o("function"==typeof n),t.lstat(e,((r,i)=>r&&"ENOENT"===r.code?n(null):r&&"EPERM"===r.code&&s?l(e,t,r,n):i&&i.isDirectory()?h(e,t,r,n):void t.unlink(e,(r=>{if(r){if("ENOENT"===r.code)return n(null);if("EPERM"===r.code)return s?l(e,t,r,n):h(e,t,r,n);if("EISDIR"===r.code)return h(e,t,r,n)}return n(r)}))))}function l(e,t,n,r){o(e),o(t),o("function"==typeof r),t.chmod(e,438,(i=>{i?r("ENOENT"===i.code?null:n):t.stat(e,((i,o)=>{i?r("ENOENT"===i.code?null:n):o.isDirectory()?h(e,t,n,r):t.unlink(e,r)}))}))}function d(e,t,n){let r;o(e),o(t);try{t.chmodSync(e,438)}catch(e){if("ENOENT"===e.code)return;throw n}try{r=t.statSync(e)}catch(e){if("ENOENT"===e.code)return;throw n}r.isDirectory()?p(e,t,n):t.unlinkSync(e)}function h(e,t,n,r){o(e),o(t),o("function"==typeof r),t.rmdir(e,(s=>{!s||"ENOTEMPTY"!==s.code&&"EEXIST"!==s.code&&"EPERM"!==s.code?s&&"ENOTDIR"===s.code?r(n):r(s):function(e,t,n){o(e),o(t),o("function"==typeof n),t.readdir(e,((r,o)=>{if(r)return n(r);let s,a=o.length;if(0===a)return t.rmdir(e,n);o.forEach((r=>{c(i.join(e,r),t,(r=>{if(!s)return r?n(s=r):void(0==--a&&t.rmdir(e,n))}))}))}))}(e,t,r)}))}function f(e,t){let n;a(t=t||{}),o(e,"rimraf: missing path"),o.strictEqual(typeof e,"string","rimraf: path should be a string"),o(t,"rimraf: missing options"),o.strictEqual(typeof t,"object","rimraf: options should be object");try{n=t.lstatSync(e)}catch(n){if("ENOENT"===n.code)return;"EPERM"===n.code&&s&&d(e,t,n)}try{n&&n.isDirectory()?p(e,t,null):t.unlinkSync(e)}catch(n){if("ENOENT"===n.code)return;if("EPERM"===n.code)return s?d(e,t,n):p(e,t,n);if("EISDIR"!==n.code)throw n;p(e,t,n)}}function p(e,t,n){o(e),o(t);try{t.rmdirSync(e)}catch(r){if("ENOTDIR"===r.code)throw n;if("ENOTEMPTY"===r.code||"EEXIST"===r.code||"EPERM"===r.code)!function(e,t){if(o(e),o(t),t.readdirSync(e).forEach((n=>f(i.join(e,n),t))),!s){return t.rmdirSync(e,t)}{const n=Date.now();do{try{return t.rmdirSync(e,t)}catch{}}while(Date.now()-n<500)}}(e,t);else if("ENOENT"!==r.code)throw r}}e.exports=c,c.sync=f},2733:(e,t,n)=>{"use strict";const r=n(7749),i=n(1017),o=n(3837);function s(e,t,n){const i=n.dereference?e=>r.stat(e,{bigint:!0}):e=>r.lstat(e,{bigint:!0});return Promise.all([i(e),i(t).catch((e=>{if("ENOENT"===e.code)return null;throw e}))]).then((([e,t])=>({srcStat:e,destStat:t})))}function a(e,t){return t.ino&&t.dev&&t.ino===e.ino&&t.dev===e.dev}function c(e,t){const n=i.resolve(e).split(i.sep).filter((e=>e)),r=i.resolve(t).split(i.sep).filter((e=>e));return n.reduce(((e,t,n)=>e&&r[n]===t),!0)}function u(e,t,n){return`Cannot ${n} '${e}' to a subdirectory of itself, '${t}'.`}e.exports={checkPaths:function(e,t,n,r,l){o.callbackify(s)(e,t,r,((r,o)=>{if(r)return l(r);const{srcStat:s,destStat:d}=o;if(d){if(a(s,d)){const r=i.basename(e),o=i.basename(t);return"move"===n&&r!==o&&r.toLowerCase()===o.toLowerCase()?l(null,{srcStat:s,destStat:d,isChangingCase:!0}):l(new Error("Source and destination must not be the same."))}if(s.isDirectory()&&!d.isDirectory())return l(new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`));if(!s.isDirectory()&&d.isDirectory())return l(new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`))}return s.isDirectory()&&c(e,t)?l(new Error(u(e,t,n))):l(null,{srcStat:s,destStat:d})}))},checkPathsSync:function(e,t,n,o){const{srcStat:s,destStat:l}=function(e,t,n){let i;const o=n.dereference?e=>r.statSync(e,{bigint:!0}):e=>r.lstatSync(e,{bigint:!0}),s=o(e);try{i=o(t)}catch(e){if("ENOENT"===e.code)return{srcStat:s,destStat:null};throw e}return{srcStat:s,destStat:i}}(e,t,o);if(l){if(a(s,l)){const r=i.basename(e),o=i.basename(t);if("move"===n&&r!==o&&r.toLowerCase()===o.toLowerCase())return{srcStat:s,destStat:l,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(s.isDirectory()&&!l.isDirectory())throw new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`);if(!s.isDirectory()&&l.isDirectory())throw new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`)}if(s.isDirectory()&&c(e,t))throw new Error(u(e,t,n));return{srcStat:s,destStat:l}},checkParentPaths:function e(t,n,o,s,c){const l=i.resolve(i.dirname(t)),d=i.resolve(i.dirname(o));if(d===l||d===i.parse(d).root)return c();r.stat(d,{bigint:!0},((r,i)=>r?"ENOENT"===r.code?c():c(r):a(n,i)?c(new Error(u(t,o,s))):e(t,n,d,s,c)))},checkParentPathsSync:function e(t,n,o,s){const c=i.resolve(i.dirname(t)),l=i.resolve(i.dirname(o));if(l===c||l===i.parse(l).root)return;let d;try{d=r.statSync(l,{bigint:!0})}catch(e){if("ENOENT"===e.code)return;throw e}if(a(n,d))throw new Error(u(t,o,s));return e(t,n,l,s)},isSrcSubdir:c,areIdentical:a}},318:(e,t,n)=>{"use strict";const r=n(77);e.exports={utimesMillis:function(e,t,n,i){r.open(e,"r+",((e,o)=>{if(e)return i(e);r.futimes(o,t,n,(e=>{r.close(o,(t=>{i&&i(e||t)}))}))}))},utimesMillisSync:function(e,t,n){const i=r.openSync(e,"r+");return r.futimesSync(i,t,n),r.closeSync(i)}}},7334:(e,t,n)=>{e.exports=l,l.realpath=l,l.sync=d,l.realpathSync=d,l.monkeypatch=function(){r.realpath=l,r.realpathSync=d},l.unmonkeypatch=function(){r.realpath=i,r.realpathSync=o};var r=n(7147),i=r.realpath,o=r.realpathSync,s=process.version,a=/^v[0-5]\./.test(s),c=n(7059);function u(e){return e&&"realpath"===e.syscall&&("ELOOP"===e.code||"ENOMEM"===e.code||"ENAMETOOLONG"===e.code)}function l(e,t,n){if(a)return i(e,t,n);"function"==typeof t&&(n=t,t=null),i(e,t,(function(r,i){u(r)?c.realpath(e,t,n):n(r,i)}))}function d(e,t){if(a)return o(e,t);try{return o(e,t)}catch(n){if(u(n))return c.realpathSync(e,t);throw n}}},7059:(e,t,n)=>{var r=n(1017),i="win32"===process.platform,o=n(7147),s=process.env.NODE_DEBUG&&/fs/.test(process.env.NODE_DEBUG);function a(e){return"function"==typeof e?e:function(){var e;if(s){var t=new Error;e=function(e){e&&(t.message=e.message,n(e=t))}}else e=n;return e;function n(e){if(e){if(process.throwDeprecation)throw e;if(!process.noDeprecation){var t="fs: missing callback "+(e.stack||e.message);process.traceDeprecation?console.trace(t):console.error(t)}}}}()}r.normalize;if(i)var c=/(.*?)(?:[\/\\]+|$)/g;else c=/(.*?)(?:[\/]+|$)/g;if(i)var u=/^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;else u=/^[\/]*/;t.realpathSync=function(e,t){if(e=r.resolve(e),t&&Object.prototype.hasOwnProperty.call(t,e))return t[e];var n,s,a,l,d=e,h={},f={};function p(){var t=u.exec(e);n=t[0].length,s=t[0],a=t[0],l="",i&&!f[a]&&(o.lstatSync(a),f[a]=!0)}for(p();n<e.length;){c.lastIndex=n;var m=c.exec(e);if(l=s,s+=m[0],a=l+m[1],n=c.lastIndex,!(f[a]||t&&t[a]===a)){var g;if(t&&Object.prototype.hasOwnProperty.call(t,a))g=t[a];else{var y=o.lstatSync(a);if(!y.isSymbolicLink()){f[a]=!0,t&&(t[a]=a);continue}var v=null;if(!i){var _=y.dev.toString(32)+":"+y.ino.toString(32);h.hasOwnProperty(_)&&(v=h[_])}null===v&&(o.statSync(a),v=o.readlinkSync(a)),g=r.resolve(l,v),t&&(t[a]=g),i||(h[_]=v)}e=r.resolve(g,e.slice(n)),p()}}return t&&(t[d]=e),e},t.realpath=function(e,t,n){if("function"!=typeof n&&(n=a(t),t=null),e=r.resolve(e),t&&Object.prototype.hasOwnProperty.call(t,e))return process.nextTick(n.bind(null,null,t[e]));var s,l,d,h,f=e,p={},m={};function g(){var t=u.exec(e);s=t[0].length,l=t[0],d=t[0],h="",i&&!m[d]?o.lstat(d,(function(e){if(e)return n(e);m[d]=!0,y()})):process.nextTick(y)}function y(){if(s>=e.length)return t&&(t[f]=e),n(null,e);c.lastIndex=s;var r=c.exec(e);return h=l,l+=r[0],d=h+r[1],s=c.lastIndex,m[d]||t&&t[d]===d?process.nextTick(y):t&&Object.prototype.hasOwnProperty.call(t,d)?b(t[d]):o.lstat(d,v)}function v(e,r){if(e)return n(e);if(!r.isSymbolicLink())return m[d]=!0,t&&(t[d]=d),process.nextTick(y);if(!i){var s=r.dev.toString(32)+":"+r.ino.toString(32);if(p.hasOwnProperty(s))return _(null,p[s],d)}o.stat(d,(function(e){if(e)return n(e);o.readlink(d,(function(e,t){i||(p[s]=t),_(e,t)}))}))}function _(e,i,o){if(e)return n(e);var s=r.resolve(h,i);t&&(t[o]=s),b(s)}function b(t){e=r.resolve(t,e.slice(s)),g()}g()}},7647:(e,t,n)=>{"use strict";var r=n(6830),i=n(1017).posix.dirname,o="win32"===n(2037).platform(),s=/\\/g,a=/[\{\[].*[\}\]]$/,c=/(^|[^\\])([\{\[]|\([^\)]+$)/,u=/\\([\!\*\?\|\[\]\(\)\{\}])/g;e.exports=function(e,t){Object.assign({flipBackslashes:!0},t).flipBackslashes&&o&&e.indexOf("/")<0&&(e=e.replace(s,"/")),a.test(e)&&(e+="/"),e+="a";do{e=i(e)}while(r(e)||c.test(e));return e.replace(u,"$1")}},6772:(e,t,n)=>{function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.alphasort=u,t.alphasorti=c,t.setopts=function(e,t,n){n||(n={});if(n.matchBase&&-1===t.indexOf("/")){if(n.noglobstar)throw new Error("base matching requires globstar");t="**/"+t}e.silent=!!n.silent,e.pattern=t,e.strict=!1!==n.strict,e.realpath=!!n.realpath,e.realpathCache=n.realpathCache||Object.create(null),e.follow=!!n.follow,e.dot=!!n.dot,e.mark=!!n.mark,e.nodir=!!n.nodir,e.nodir&&(e.mark=!0);e.sync=!!n.sync,e.nounique=!!n.nounique,e.nonull=!!n.nonull,e.nosort=!!n.nosort,e.nocase=!!n.nocase,e.stat=!!n.stat,e.noprocess=!!n.noprocess,e.absolute=!!n.absolute,e.maxLength=n.maxLength||1/0,e.cache=n.cache||Object.create(null),e.statCache=n.statCache||Object.create(null),e.symlinks=n.symlinks||Object.create(null),function(e,t){e.ignore=t.ignore||[],Array.isArray(e.ignore)||(e.ignore=[e.ignore]);e.ignore.length&&(e.ignore=e.ignore.map(l))}(e,n),e.changedCwd=!1;var o=process.cwd();r(n,"cwd")?(e.cwd=i.resolve(n.cwd),e.changedCwd=e.cwd!==o):e.cwd=o;e.root=n.root||i.resolve(e.cwd,"/"),e.root=i.resolve(e.root),"win32"===process.platform&&(e.root=e.root.replace(/\\/g,"/"));e.cwdAbs=s(e.cwd)?e.cwd:d(e,e.cwd),"win32"===process.platform&&(e.cwdAbs=e.cwdAbs.replace(/\\/g,"/"));e.nomount=!!n.nomount,n.nonegate=!0,n.nocomment=!0,e.minimatch=new a(t,n),e.options=e.minimatch.options},t.ownProp=r,t.makeAbs=d,t.finish=function(e){for(var t=e.nounique,n=t?[]:Object.create(null),r=0,i=e.matches.length;r<i;r++){var o=e.matches[r];if(o&&0!==Object.keys(o).length){var s=Object.keys(o);t?n.push.apply(n,s):s.forEach((function(e){n[e]=!0}))}else if(e.nonull){var a=e.minimatch.globSet[r];t?n.push(a):n[a]=!0}}t||(n=Object.keys(n));e.nosort||(n=n.sort(e.nocase?c:u));if(e.mark){for(r=0;r<n.length;r++)n[r]=e._mark(n[r]);e.nodir&&(n=n.filter((function(t){var n=!/\/$/.test(t),r=e.cache[t]||e.cache[d(e,t)];return n&&r&&(n="DIR"!==r&&!Array.isArray(r)),n})))}e.ignore.length&&(n=n.filter((function(t){return!h(e,t)})));e.found=n},t.mark=function(e,t){var n=d(e,t),r=e.cache[n],i=t;if(r){var o="DIR"===r||Array.isArray(r),s="/"===t.slice(-1);if(o&&!s?i+="/":!o&&s&&(i=i.slice(0,-1)),i!==t){var a=d(e,i);e.statCache[a]=e.statCache[n],e.cache[a]=e.cache[n]}}return i},t.isIgnored=h,t.childrenIgnored=function(e,t){return!!e.ignore.length&&e.ignore.some((function(e){return!(!e.gmatcher||!e.gmatcher.match(t))}))};var i=n(1017),o=n(1171),s=n(4095),a=o.Minimatch;function c(e,t){return e.toLowerCase().localeCompare(t.toLowerCase())}function u(e,t){return e.localeCompare(t)}function l(e){var t=null;if("/**"===e.slice(-3)){var n=e.replace(/(\/\*\*)+$/,"");t=new a(n,{dot:!0})}return{matcher:new a(e,{dot:!0}),gmatcher:t}}function d(e,t){var n=t;return n="/"===t.charAt(0)?i.join(e.root,t):s(t)||""===t?t:e.changedCwd?i.resolve(e.cwd,t):i.resolve(t),"win32"===process.platform&&(n=n.replace(/\\/g,"/")),n}function h(e,t){return!!e.ignore.length&&e.ignore.some((function(e){return e.matcher.match(t)||!(!e.gmatcher||!e.gmatcher.match(t))}))}},2884:(e,t,n)=>{e.exports=_;var r=n(7147),i=n(7334),o=n(1171),s=(o.Minimatch,n(4378)),a=n(2361).EventEmitter,c=n(1017),u=n(9491),l=n(4095),d=n(4751),h=n(6772),f=(h.alphasort,h.alphasorti,h.setopts),p=h.ownProp,m=n(7844),g=(n(3837),h.childrenIgnored),y=h.isIgnored,v=n(778);function _(e,t,n){if("function"==typeof t&&(n=t,t={}),t||(t={}),t.sync){if(n)throw new TypeError("callback provided to sync glob");return d(e,t)}return new S(e,t,n)}_.sync=d;var b=_.GlobSync=d.GlobSync;function S(e,t,n){if("function"==typeof t&&(n=t,t=null),t&&t.sync){if(n)throw new TypeError("callback provided to sync glob");return new b(e,t)}if(!(this instanceof S))return new S(e,t,n);f(this,e,t),this._didRealPath=!1;var r=this.minimatch.set.length;this.matches=new Array(r),"function"==typeof n&&(n=v(n),this.on("error",n),this.on("end",(function(e){n(null,e)})));var i=this;if(this._processing=0,this._emitQueue=[],this._processQueue=[],this.paused=!1,this.noprocess)return this;if(0===r)return s();for(var o=0;o<r;o++)this._process(this.minimatch.set[o],o,!1,s);function s(){--i._processing,i._processing<=0&&i._finish()}}_.glob=_,_.hasMagic=function(e,t){var n=function(e,t){if(null===t||"object"!=typeof t)return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}({},t);n.noprocess=!0;var r=new S(e,n).minimatch.set;if(!e)return!1;if(r.length>1)return!0;for(var i=0;i<r[0].length;i++)if("string"!=typeof r[0][i])return!0;return!1},_.Glob=S,s(S,a),S.prototype._finish=function(){if(u(this instanceof S),!this.aborted){if(this.realpath&&!this._didRealpath)return this._realpath();h.finish(this),this.emit("end",this.found)}},S.prototype._realpath=function(){if(!this._didRealpath){this._didRealpath=!0;var e=this.matches.length;if(0===e)return this._finish();for(var t=this,n=0;n<this.matches.length;n++)this._realpathSet(n,r)}function r(){0==--e&&t._finish()}},S.prototype._realpathSet=function(e,t){var n=this.matches[e];if(!n)return t();var r=Object.keys(n),o=this,s=r.length;if(0===s)return t();var a=this.matches[e]=Object.create(null);r.forEach((function(n,r){n=o._makeAbs(n),i.realpath(n,o.realpathCache,(function(r,i){r?"stat"===r.syscall?a[n]=!0:o.emit("error",r):a[i]=!0,0==--s&&(o.matches[e]=a,t())}))}))},S.prototype._mark=function(e){return h.mark(this,e)},S.prototype._makeAbs=function(e){return h.makeAbs(this,e)},S.prototype.abort=function(){this.aborted=!0,this.emit("abort")},S.prototype.pause=function(){this.paused||(this.paused=!0,this.emit("pause"))},S.prototype.resume=function(){if(this.paused){if(this.emit("resume"),this.paused=!1,this._emitQueue.length){var e=this._emitQueue.slice(0);this._emitQueue.length=0;for(var t=0;t<e.length;t++){var n=e[t];this._emitMatch(n[0],n[1])}}if(this._processQueue.length){var r=this._processQueue.slice(0);this._processQueue.length=0;for(t=0;t<r.length;t++){var i=r[t];this._processing--,this._process(i[0],i[1],i[2],i[3])}}}},S.prototype._process=function(e,t,n,r){if(u(this instanceof S),u("function"==typeof r),!this.aborted)if(this._processing++,this.paused)this._processQueue.push([e,t,n,r]);else{for(var i,s=0;"string"==typeof e[s];)s++;switch(s){case e.length:return void this._processSimple(e.join("/"),t,r);case 0:i=null;break;default:i=e.slice(0,s).join("/")}var a,c=e.slice(s);null===i?a=".":l(i)||l(e.join("/"))?(i&&l(i)||(i="/"+i),a=i):a=i;var d=this._makeAbs(a);if(g(this,a))return r();c[0]===o.GLOBSTAR?this._processGlobStar(i,a,d,c,t,n,r):this._processReaddir(i,a,d,c,t,n,r)}},S.prototype._processReaddir=function(e,t,n,r,i,o,s){var a=this;this._readdir(n,o,(function(c,u){return a._processReaddir2(e,t,n,r,i,o,u,s)}))},S.prototype._processReaddir2=function(e,t,n,r,i,o,s,a){if(!s)return a();for(var u=r[0],l=!!this.minimatch.negate,d=u._glob,h=this.dot||"."===d.charAt(0),f=[],p=0;p<s.length;p++){if("."!==(g=s[p]).charAt(0)||h)(l&&!e?!g.match(u):g.match(u))&&f.push(g)}var m=f.length;if(0===m)return a();if(1===r.length&&!this.mark&&!this.stat){this.matches[i]||(this.matches[i]=Object.create(null));for(p=0;p<m;p++){var g=f[p];e&&(g="/"!==e?e+"/"+g:e+g),"/"!==g.charAt(0)||this.nomount||(g=c.join(this.root,g)),this._emitMatch(i,g)}return a()}r.shift();for(p=0;p<m;p++){g=f[p];e&&(g="/"!==e?e+"/"+g:e+g),this._process([g].concat(r),i,o,a)}a()},S.prototype._emitMatch=function(e,t){if(!this.aborted&&!y(this,t))if(this.paused)this._emitQueue.push([e,t]);else{var n=l(t)?t:this._makeAbs(t);if(this.mark&&(t=this._mark(t)),this.absolute&&(t=n),!this.matches[e][t]){if(this.nodir){var r=this.cache[n];if("DIR"===r||Array.isArray(r))return}this.matches[e][t]=!0;var i=this.statCache[n];i&&this.emit("stat",t,i),this.emit("match",t)}}},S.prototype._readdirInGlobStar=function(e,t){if(!this.aborted){if(this.follow)return this._readdir(e,!1,t);var n=this,i=m("lstat\0"+e,(function(r,i){if(r&&"ENOENT"===r.code)return t();var o=i&&i.isSymbolicLink();n.symlinks[e]=o,o||!i||i.isDirectory()?n._readdir(e,!1,t):(n.cache[e]="FILE",t())}));i&&r.lstat(e,i)}},S.prototype._readdir=function(e,t,n){if(!this.aborted&&(n=m("readdir\0"+e+"\0"+t,n))){if(t&&!p(this.symlinks,e))return this._readdirInGlobStar(e,n);if(p(this.cache,e)){var i=this.cache[e];if(!i||"FILE"===i)return n();if(Array.isArray(i))return n(null,i)}r.readdir(e,function(e,t,n){return function(r,i){r?e._readdirError(t,r,n):e._readdirEntries(t,i,n)}}(this,e,n))}},S.prototype._readdirEntries=function(e,t,n){if(!this.aborted){if(!this.mark&&!this.stat)for(var r=0;r<t.length;r++){var i=t[r];i="/"===e?e+i:e+"/"+i,this.cache[i]=!0}return this.cache[e]=t,n(null,t)}},S.prototype._readdirError=function(e,t,n){if(!this.aborted){switch(t.code){case"ENOTSUP":case"ENOTDIR":var r=this._makeAbs(e);if(this.cache[r]="FILE",r===this.cwdAbs){var i=new Error(t.code+" invalid cwd "+this.cwd);i.path=this.cwd,i.code=t.code,this.emit("error",i),this.abort()}break;case"ENOENT":case"ELOOP":case"ENAMETOOLONG":case"UNKNOWN":this.cache[this._makeAbs(e)]=!1;break;default:this.cache[this._makeAbs(e)]=!1,this.strict&&(this.emit("error",t),this.abort()),this.silent||console.error("glob error",t)}return n()}},S.prototype._processGlobStar=function(e,t,n,r,i,o,s){var a=this;this._readdir(n,o,(function(c,u){a._processGlobStar2(e,t,n,r,i,o,u,s)}))},S.prototype._processGlobStar2=function(e,t,n,r,i,o,s,a){if(!s)return a();var c=r.slice(1),u=e?[e]:[],l=u.concat(c);this._process(l,i,!1,a);var d=this.symlinks[n],h=s.length;if(d&&o)return a();for(var f=0;f<h;f++){if("."!==s[f].charAt(0)||this.dot){var p=u.concat(s[f],c);this._process(p,i,!0,a);var m=u.concat(s[f],r);this._process(m,i,!0,a)}}a()},S.prototype._processSimple=function(e,t,n){var r=this;this._stat(e,(function(i,o){r._processSimple2(e,t,i,o,n)}))},S.prototype._processSimple2=function(e,t,n,r,i){if(this.matches[t]||(this.matches[t]=Object.create(null)),!r)return i();if(e&&l(e)&&!this.nomount){var o=/[\/\\]$/.test(e);"/"===e.charAt(0)?e=c.join(this.root,e):(e=c.resolve(this.root,e),o&&(e+="/"))}"win32"===process.platform&&(e=e.replace(/\\/g,"/")),this._emitMatch(t,e),i()},S.prototype._stat=function(e,t){var n=this._makeAbs(e),i="/"===e.slice(-1);if(e.length>this.maxLength)return t();if(!this.stat&&p(this.cache,n)){var o=this.cache[n];if(Array.isArray(o)&&(o="DIR"),!i||"DIR"===o)return t(null,o);if(i&&"FILE"===o)return t()}var s=this.statCache[n];if(void 0!==s){if(!1===s)return t(null,s);var a=s.isDirectory()?"DIR":"FILE";return i&&"FILE"===a?t():t(null,a,s)}var c=this,u=m("stat\0"+n,(function(i,o){if(o&&o.isSymbolicLink())return r.stat(n,(function(r,i){r?c._stat2(e,n,null,o,t):c._stat2(e,n,r,i,t)}));c._stat2(e,n,i,o,t)}));u&&r.lstat(n,u)},S.prototype._stat2=function(e,t,n,r,i){if(n&&("ENOENT"===n.code||"ENOTDIR"===n.code))return this.statCache[t]=!1,i();var o="/"===e.slice(-1);if(this.statCache[t]=r,"/"===t.slice(-1)&&r&&!r.isDirectory())return i(null,!1,r);var s=!0;return r&&(s=r.isDirectory()?"DIR":"FILE"),this.cache[t]=this.cache[t]||s,o&&"FILE"===s?i():i(null,s,r)}},4751:(e,t,n)=>{e.exports=p,p.GlobSync=m;var r=n(7147),i=n(7334),o=n(1171),s=(o.Minimatch,n(2884).Glob,n(3837),n(1017)),a=n(9491),c=n(4095),u=n(6772),l=(u.alphasort,u.alphasorti,u.setopts),d=u.ownProp,h=u.childrenIgnored,f=u.isIgnored;function p(e,t){if("function"==typeof t||3===arguments.length)throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");return new m(e,t).found}function m(e,t){if(!e)throw new Error("must provide pattern");if("function"==typeof t||3===arguments.length)throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");if(!(this instanceof m))return new m(e,t);if(l(this,e,t),this.noprocess)return this;var n=this.minimatch.set.length;this.matches=new Array(n);for(var r=0;r<n;r++)this._process(this.minimatch.set[r],r,!1);this._finish()}m.prototype._finish=function(){if(a(this instanceof m),this.realpath){var e=this;this.matches.forEach((function(t,n){var r=e.matches[n]=Object.create(null);for(var o in t)try{o=e._makeAbs(o),r[i.realpathSync(o,e.realpathCache)]=!0}catch(t){if("stat"!==t.syscall)throw t;r[e._makeAbs(o)]=!0}}))}u.finish(this)},m.prototype._process=function(e,t,n){a(this instanceof m);for(var r,i=0;"string"==typeof e[i];)i++;switch(i){case e.length:return void this._processSimple(e.join("/"),t);case 0:r=null;break;default:r=e.slice(0,i).join("/")}var s,u=e.slice(i);null===r?s=".":c(r)||c(e.join("/"))?(r&&c(r)||(r="/"+r),s=r):s=r;var l=this._makeAbs(s);h(this,s)||(u[0]===o.GLOBSTAR?this._processGlobStar(r,s,l,u,t,n):this._processReaddir(r,s,l,u,t,n))},m.prototype._processReaddir=function(e,t,n,r,i,o){var a=this._readdir(n,o);if(a){for(var c=r[0],u=!!this.minimatch.negate,l=c._glob,d=this.dot||"."===l.charAt(0),h=[],f=0;f<a.length;f++){if("."!==(g=a[f]).charAt(0)||d)(u&&!e?!g.match(c):g.match(c))&&h.push(g)}var p=h.length;if(0!==p)if(1!==r.length||this.mark||this.stat){r.shift();for(f=0;f<p;f++){var m;g=h[f];m=e?[e,g]:[g],this._process(m.concat(r),i,o)}}else{this.matches[i]||(this.matches[i]=Object.create(null));for(var f=0;f<p;f++){var g=h[f];e&&(g="/"!==e.slice(-1)?e+"/"+g:e+g),"/"!==g.charAt(0)||this.nomount||(g=s.join(this.root,g)),this._emitMatch(i,g)}}}},m.prototype._emitMatch=function(e,t){if(!f(this,t)){var n=this._makeAbs(t);if(this.mark&&(t=this._mark(t)),this.absolute&&(t=n),!this.matches[e][t]){if(this.nodir){var r=this.cache[n];if("DIR"===r||Array.isArray(r))return}this.matches[e][t]=!0,this.stat&&this._stat(t)}}},m.prototype._readdirInGlobStar=function(e){if(this.follow)return this._readdir(e,!1);var t,n;try{n=r.lstatSync(e)}catch(e){if("ENOENT"===e.code)return null}var i=n&&n.isSymbolicLink();return this.symlinks[e]=i,i||!n||n.isDirectory()?t=this._readdir(e,!1):this.cache[e]="FILE",t},m.prototype._readdir=function(e,t){if(t&&!d(this.symlinks,e))return this._readdirInGlobStar(e);if(d(this.cache,e)){var n=this.cache[e];if(!n||"FILE"===n)return null;if(Array.isArray(n))return n}try{return this._readdirEntries(e,r.readdirSync(e))}catch(t){return this._readdirError(e,t),null}},m.prototype._readdirEntries=function(e,t){if(!this.mark&&!this.stat)for(var n=0;n<t.length;n++){var r=t[n];r="/"===e?e+r:e+"/"+r,this.cache[r]=!0}return this.cache[e]=t,t},m.prototype._readdirError=function(e,t){switch(t.code){case"ENOTSUP":case"ENOTDIR":var n=this._makeAbs(e);if(this.cache[n]="FILE",n===this.cwdAbs){var r=new Error(t.code+" invalid cwd "+this.cwd);throw r.path=this.cwd,r.code=t.code,r}break;case"ENOENT":case"ELOOP":case"ENAMETOOLONG":case"UNKNOWN":this.cache[this._makeAbs(e)]=!1;break;default:if(this.cache[this._makeAbs(e)]=!1,this.strict)throw t;this.silent||console.error("glob error",t)}},m.prototype._processGlobStar=function(e,t,n,r,i,o){var s=this._readdir(n,o);if(s){var a=r.slice(1),c=e?[e]:[],u=c.concat(a);this._process(u,i,!1);var l=s.length;if(!this.symlinks[n]||!o)for(var d=0;d<l;d++){if("."!==s[d].charAt(0)||this.dot){var h=c.concat(s[d],a);this._process(h,i,!0);var f=c.concat(s[d],r);this._process(f,i,!0)}}}},m.prototype._processSimple=function(e,t){var n=this._stat(e);if(this.matches[t]||(this.matches[t]=Object.create(null)),n){if(e&&c(e)&&!this.nomount){var r=/[\/\\]$/.test(e);"/"===e.charAt(0)?e=s.join(this.root,e):(e=s.resolve(this.root,e),r&&(e+="/"))}"win32"===process.platform&&(e=e.replace(/\\/g,"/")),this._emitMatch(t,e)}},m.prototype._stat=function(e){var t=this._makeAbs(e),n="/"===e.slice(-1);if(e.length>this.maxLength)return!1;if(!this.stat&&d(this.cache,t)){var i=this.cache[t];if(Array.isArray(i)&&(i="DIR"),!n||"DIR"===i)return i;if(n&&"FILE"===i)return!1}var o=this.statCache[t];if(!o){var s;try{s=r.lstatSync(t)}catch(e){if(e&&("ENOENT"===e.code||"ENOTDIR"===e.code))return this.statCache[t]=!1,!1}if(s&&s.isSymbolicLink())try{o=r.statSync(t)}catch(e){o=s}else o=s}this.statCache[t]=o;i=!0;return o&&(i=o.isDirectory()?"DIR":"FILE"),this.cache[t]=this.cache[t]||i,(!n||"FILE"!==i)&&i},m.prototype._mark=function(e){return u.mark(this,e)},m.prototype._makeAbs=function(e){return u.makeAbs(this,e)}},623:(e,t,n)=>{"use strict";const{promisify:r}=n(3837),i=n(7147),o=n(1017),s=n(3294),a=n(5151),c=n(3859),u=["**/node_modules/**","**/flow-typed/**","**/coverage/**","**/.git"],l=r(i.readFile),d=(e,t)=>{const n=c(o.relative(t.cwd,o.dirname(t.fileName)));return e.split(/\r?\n/).filter(Boolean).filter((e=>!e.startsWith("#"))).map((e=>t=>t.startsWith("!")?"!"+o.posix.join(e,t.slice(1)):o.posix.join(e,t))(n))},h=e=>{const t=a();for(const n of e)t.add(d(n.content,{cwd:n.cwd,fileName:n.filePath}));return t},f=(e,t)=>n=>e.ignores(c(o.relative(t,((e,t)=>{if(e=c(e),o.isAbsolute(t)){if(c(t).startsWith(e))return t;throw new Error(`Path ${t} is not in cwd ${e}`)}return o.join(e,t)})(t,n.path||n)))),p=({ignore:e=[],cwd:t=c(process.cwd())}={})=>({ignore:e,cwd:t});e.exports=async e=>{e=p(e);const t=await s("**/.gitignore",{ignore:u.concat(e.ignore),cwd:e.cwd}),n=await Promise.all(t.map((t=>(async(e,t)=>{const n=o.join(t,e);return{cwd:t,filePath:n,content:await l(n,"utf8")}})(t,e.cwd)))),r=h(n);return f(r,e.cwd)},e.exports.sync=e=>{e=p(e);const t=s.sync("**/.gitignore",{ignore:u.concat(e.ignore),cwd:e.cwd}).map((t=>((e,t)=>{const n=o.join(t,e);return{cwd:t,filePath:n,content:i.readFileSync(n,"utf8")}})(t,e.cwd))),n=h(t);return f(n,e.cwd)}},5839:(e,t,n)=>{"use strict";const r=n(7147),i=n(3755),o=n(155),s=n(3294),a=n(367),c=n(623),{FilterStream:u,UniqueStream:l}=n(438),d=()=>!1,h=e=>"!"===e[0],f=(e,t)=>{(e=>{if(!e.every((e=>"string"==typeof e)))throw new TypeError("Patterns must be a string or an array of strings")})(e=i([].concat(e))),((e={})=>{if(!e.cwd)return;let t;try{t=r.statSync(e.cwd)}catch{return}if(!t.isDirectory())throw new Error("The `cwd` option must be a path to a directory")})(t);const n=[];t={ignore:[],expandDirectories:!0,...t};for(const[r,i]of e.entries()){if(h(i))continue;const o=e.slice(r).filter((e=>h(e))).map((e=>e.slice(1))),s={...t,ignore:t.ignore.concat(o)};n.push({pattern:i,options:s})}return n},p=(e,t)=>e.options.expandDirectories?((e,t)=>{let n={};return e.options.cwd&&(n.cwd=e.options.cwd),Array.isArray(e.options.expandDirectories)?n={...n,files:e.options.expandDirectories}:"object"==typeof e.options.expandDirectories&&(n={...n,...e.options.expandDirectories}),t(e.pattern,n)})(e,t):[e.pattern],m=e=>e&&e.gitignore?c.sync({cwd:e.cwd,ignore:e.ignore}):d,g=e=>t=>{const{options:n}=e;return n.ignore&&Array.isArray(n.ignore)&&n.expandDirectories&&(n.ignore=a.sync(n.ignore)),{pattern:t,options:n}};e.exports=async(e,t)=>{const n=f(e,t),[o,u]=await Promise.all([(async()=>t&&t.gitignore?c({cwd:t.cwd,ignore:t.ignore}):d)(),(async()=>{const e=await Promise.all(n.map((async e=>{const t=await p(e,a);return Promise.all(t.map(g(e)))})));return i(...e)})()]),l=await Promise.all(u.map((e=>s(e.pattern,e.options))));return i(...l).filter((e=>{return!o((t=e,t.stats instanceof r.Stats?t.path:t));var t}))},e.exports.sync=(e,t)=>{const n=f(e,t),r=[];for(const e of n){const t=p(e,a.sync).map(g(e));r.push(...t)}const o=m(t);let c=[];for(const e of r)c=i(c,s.sync(e.pattern,e.options));return c.filter((e=>!o(e)))},e.exports.stream=(e,t)=>{const n=f(e,t),r=[];for(const e of n){const t=p(e,a.sync).map(g(e));r.push(...t)}const i=m(t),c=new u((e=>!i(e))),d=new l;return o(r.map((e=>s.stream(e.pattern,e.options)))).pipe(c).pipe(d)},e.exports.generateGlobTasks=f,e.exports.hasMagic=(e,t)=>[].concat(e).some((e=>s.isDynamicPattern(e,t))),e.exports.gitignore=c},438:(e,t,n)=>{"use strict";const{Transform:r}=n(2781);class i extends r{constructor(){super({objectMode:!0})}}e.exports={FilterStream:class extends i{constructor(e){super(),this._filter=e}_transform(e,t,n){this._filter(e)&&this.push(e),n()}},UniqueStream:class extends i{constructor(){super(),this._pushed=new Set}_transform(e,t,n){this._pushed.has(e)||(this.push(e),this._pushed.add(e)),n()}}}},6458:e=>{"use strict";e.exports=function(e){if(null===e||"object"!=typeof e)return e;if(e instanceof Object)var n={__proto__:t(e)};else n=Object.create(null);return Object.getOwnPropertyNames(e).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))})),n};var t=Object.getPrototypeOf||function(e){return e.__proto__}},77:(e,t,n)=>{var r,i,o=n(7147),s=n(2161),a=n(8520),c=n(6458),u=n(3837);function l(e,t){Object.defineProperty(e,r,{get:function(){return t}})}"function"==typeof Symbol&&"function"==typeof Symbol.for?(r=Symbol.for("graceful-fs.queue"),i=Symbol.for("graceful-fs.previous")):(r="___graceful-fs.queue",i="___graceful-fs.previous");var d,h=function(){};if(u.debuglog?h=u.debuglog("gfs4"):/\bgfs4\b/i.test(process.env.NODE_DEBUG||"")&&(h=function(){var e=u.format.apply(u,arguments);e="GFS4: "+e.split(/\n/).join("\nGFS4: "),console.error(e)}),!o[r]){var f=global[r]||[];l(o,f),o.close=function(e){function t(t,n){return e.call(o,t,(function(e){e||g(),"function"==typeof n&&n.apply(this,arguments)}))}return Object.defineProperty(t,i,{value:e}),t}(o.close),o.closeSync=function(e){function t(t){e.apply(o,arguments),g()}return Object.defineProperty(t,i,{value:e}),t}(o.closeSync),/\bgfs4\b/i.test(process.env.NODE_DEBUG||"")&&process.on("exit",(function(){h(o[r]),n(9491).equal(o[r].length,0)}))}function p(e){s(e),e.gracefulify=p,e.createReadStream=function(t,n){return new e.ReadStream(t,n)},e.createWriteStream=function(t,n){return new e.WriteStream(t,n)};var t=e.readFile;e.readFile=function(e,n,r){"function"==typeof n&&(r=n,n=null);return function e(n,r,i,o){return t(n,r,(function(t){!t||"EMFILE"!==t.code&&"ENFILE"!==t.code?"function"==typeof i&&i.apply(this,arguments):m([e,[n,r,i],t,o||Date.now(),Date.now()])}))}(e,n,r)};var n=e.writeFile;e.writeFile=function(e,t,r,i){"function"==typeof r&&(i=r,r=null);return function e(t,r,i,o,s){return n(t,r,i,(function(n){!n||"EMFILE"!==n.code&&"ENFILE"!==n.code?"function"==typeof o&&o.apply(this,arguments):m([e,[t,r,i,o],n,s||Date.now(),Date.now()])}))}(e,t,r,i)};var r=e.appendFile;r&&(e.appendFile=function(e,t,n,i){"function"==typeof n&&(i=n,n=null);return function e(t,n,i,o,s){return r(t,n,i,(function(r){!r||"EMFILE"!==r.code&&"ENFILE"!==r.code?"function"==typeof o&&o.apply(this,arguments):m([e,[t,n,i,o],r,s||Date.now(),Date.now()])}))}(e,t,n,i)});var i=e.copyFile;i&&(e.copyFile=function(e,t,n,r){"function"==typeof n&&(r=n,n=0);return function e(t,n,r,o,s){return i(t,n,r,(function(i){!i||"EMFILE"!==i.code&&"ENFILE"!==i.code?"function"==typeof o&&o.apply(this,arguments):m([e,[t,n,r,o],i,s||Date.now(),Date.now()])}))}(e,t,n,r)});var o=e.readdir;if(e.readdir=function(e,t,n){"function"==typeof t&&(n=t,t=null);return function e(t,n,r,i){return o(t,n,(function(o,s){!o||"EMFILE"!==o.code&&"ENFILE"!==o.code?(s&&s.sort&&s.sort(),"function"==typeof r&&r.call(this,o,s)):m([e,[t,n,r],o,i||Date.now(),Date.now()])}))}(e,t,n)},"v0.8"===process.version.substr(0,4)){var c=a(e);f=c.ReadStream,g=c.WriteStream}var u=e.ReadStream;u&&(f.prototype=Object.create(u.prototype),f.prototype.open=function(){var e=this;v(e.path,e.flags,e.mode,(function(t,n){t?(e.autoClose&&e.destroy(),e.emit("error",t)):(e.fd=n,e.emit("open",n),e.read())}))});var l=e.WriteStream;l&&(g.prototype=Object.create(l.prototype),g.prototype.open=function(){var e=this;v(e.path,e.flags,e.mode,(function(t,n){t?(e.destroy(),e.emit("error",t)):(e.fd=n,e.emit("open",n))}))}),Object.defineProperty(e,"ReadStream",{get:function(){return f},set:function(e){f=e},enumerable:!0,configurable:!0}),Object.defineProperty(e,"WriteStream",{get:function(){return g},set:function(e){g=e},enumerable:!0,configurable:!0});var d=f;Object.defineProperty(e,"FileReadStream",{get:function(){return d},set:function(e){d=e},enumerable:!0,configurable:!0});var h=g;function f(e,t){return this instanceof f?(u.apply(this,arguments),this):f.apply(Object.create(f.prototype),arguments)}function g(e,t){return this instanceof g?(l.apply(this,arguments),this):g.apply(Object.create(g.prototype),arguments)}Object.defineProperty(e,"FileWriteStream",{get:function(){return h},set:function(e){h=e},enumerable:!0,configurable:!0});var y=e.open;function v(e,t,n,r){return"function"==typeof n&&(r=n,n=null),function e(t,n,r,i,o){return y(t,n,r,(function(s,a){!s||"EMFILE"!==s.code&&"ENFILE"!==s.code?"function"==typeof i&&i.apply(this,arguments):m([e,[t,n,r,i],s,o||Date.now(),Date.now()])}))}(e,t,n,r)}return e.open=v,e}function m(e){h("ENQUEUE",e[0].name,e[1]),o[r].push(e),y()}function g(){for(var e=Date.now(),t=0;t<o[r].length;++t)o[r][t].length>2&&(o[r][t][3]=e,o[r][t][4]=e);y()}function y(){if(clearTimeout(d),d=void 0,0!==o[r].length){var e=o[r].shift(),t=e[0],n=e[1],i=e[2],s=e[3],a=e[4];if(void 0===s)h("RETRY",t.name,n),t.apply(null,n);else if(Date.now()-s>=6e4){h("TIMEOUT",t.name,n);var c=n.pop();"function"==typeof c&&c.call(null,i)}else{var u=Date.now()-a,l=Math.max(a-s,1);u>=Math.min(1.2*l,100)?(h("RETRY",t.name,n),t.apply(null,n.concat([s]))):o[r].push(e)}void 0===d&&(d=setTimeout(y,0))}}global[r]||l(global,o[r]),e.exports=p(c(o)),process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH&&!o.__patched&&(e.exports=p(o),o.__patched=!0)},8520:(e,t,n)=>{var r=n(2781).Stream;e.exports=function(e){return{ReadStream:function t(n,i){if(!(this instanceof t))return new t(n,i);r.call(this);var o=this;this.path=n,this.fd=null,this.readable=!0,this.paused=!1,this.flags="r",this.mode=438,this.bufferSize=65536,i=i||{};for(var s=Object.keys(i),a=0,c=s.length;a<c;a++){var u=s[a];this[u]=i[u]}this.encoding&&this.setEncoding(this.encoding);if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(void 0===this.end)this.end=1/0;else if("number"!=typeof this.end)throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start}if(null!==this.fd)return void process.nextTick((function(){o._read()}));e.open(this.path,this.flags,this.mode,(function(e,t){if(e)return o.emit("error",e),void(o.readable=!1);o.fd=t,o.emit("open",t),o._read()}))},WriteStream:function t(n,i){if(!(this instanceof t))return new t(n,i);r.call(this),this.path=n,this.fd=null,this.writable=!0,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,i=i||{};for(var o=Object.keys(i),s=0,a=o.length;s<a;s++){var c=o[s];this[c]=i[c]}if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start}this.busy=!1,this._queue=[],null===this.fd&&(this._open=e.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush())}}}},2161:(e,t,n)=>{var r=n(2057),i=process.cwd,o=null,s=process.env.GRACEFUL_FS_PLATFORM||process.platform;process.cwd=function(){return o||(o=i.call(process)),o};try{process.cwd()}catch(e){}if("function"==typeof process.chdir){var a=process.chdir;process.chdir=function(e){o=null,a.call(process,e)},Object.setPrototypeOf&&Object.setPrototypeOf(process.chdir,a)}e.exports=function(e){r.hasOwnProperty("O_SYMLINK")&&process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)&&function(e){e.lchmod=function(t,n,i){e.open(t,r.O_WRONLY|r.O_SYMLINK,n,(function(t,r){t?i&&i(t):e.fchmod(r,n,(function(t){e.close(r,(function(e){i&&i(t||e)}))}))}))},e.lchmodSync=function(t,n){var i,o=e.openSync(t,r.O_WRONLY|r.O_SYMLINK,n),s=!0;try{i=e.fchmodSync(o,n),s=!1}finally{if(s)try{e.closeSync(o)}catch(e){}else e.closeSync(o)}return i}}(e);e.lutimes||function(e){r.hasOwnProperty("O_SYMLINK")?(e.lutimes=function(t,n,i,o){e.open(t,r.O_SYMLINK,(function(t,r){t?o&&o(t):e.futimes(r,n,i,(function(t){e.close(r,(function(e){o&&o(t||e)}))}))}))},e.lutimesSync=function(t,n,i){var o,s=e.openSync(t,r.O_SYMLINK),a=!0;try{o=e.futimesSync(s,n,i),a=!1}finally{if(a)try{e.closeSync(s)}catch(e){}else e.closeSync(s)}return o}):(e.lutimes=function(e,t,n,r){r&&process.nextTick(r)},e.lutimesSync=function(){})}(e);e.chown=o(e.chown),e.fchown=o(e.fchown),e.lchown=o(e.lchown),e.chmod=n(e.chmod),e.fchmod=n(e.fchmod),e.lchmod=n(e.lchmod),e.chownSync=a(e.chownSync),e.fchownSync=a(e.fchownSync),e.lchownSync=a(e.lchownSync),e.chmodSync=i(e.chmodSync),e.fchmodSync=i(e.fchmodSync),e.lchmodSync=i(e.lchmodSync),e.stat=c(e.stat),e.fstat=c(e.fstat),e.lstat=c(e.lstat),e.statSync=u(e.statSync),e.fstatSync=u(e.fstatSync),e.lstatSync=u(e.lstatSync),e.lchmod||(e.lchmod=function(e,t,n){n&&process.nextTick(n)},e.lchmodSync=function(){});e.lchown||(e.lchown=function(e,t,n,r){r&&process.nextTick(r)},e.lchownSync=function(){});"win32"===s&&(e.rename=(t=e.rename,function(n,r,i){var o=Date.now(),s=0;t(n,r,(function a(c){if(c&&("EACCES"===c.code||"EPERM"===c.code)&&Date.now()-o<6e4)return setTimeout((function(){e.stat(r,(function(e,o){e&&"ENOENT"===e.code?t(n,r,a):i(c)}))}),s),void(s<100&&(s+=10));i&&i(c)}))}));var t;function n(t){return t?function(n,r,i){return t.call(e,n,r,(function(e){l(e)&&(e=null),i&&i.apply(this,arguments)}))}:t}function i(t){return t?function(n,r){try{return t.call(e,n,r)}catch(e){if(!l(e))throw e}}:t}function o(t){return t?function(n,r,i,o){return t.call(e,n,r,i,(function(e){l(e)&&(e=null),o&&o.apply(this,arguments)}))}:t}function a(t){return t?function(n,r,i){try{return t.call(e,n,r,i)}catch(e){if(!l(e))throw e}}:t}function c(t){return t?function(n,r,i){function o(e,t){t&&(t.uid<0&&(t.uid+=4294967296),t.gid<0&&(t.gid+=4294967296)),i&&i.apply(this,arguments)}return"function"==typeof r&&(i=r,r=null),r?t.call(e,n,r,o):t.call(e,n,o)}:t}function u(t){return t?function(n,r){var i=r?t.call(e,n,r):t.call(e,n);return i.uid<0&&(i.uid+=4294967296),i.gid<0&&(i.gid+=4294967296),i}:t}function l(e){return!e||("ENOSYS"===e.code||!(process.getuid&&0===process.getuid()||"EINVAL"!==e.code&&"EPERM"!==e.code))}e.read=function(t){function n(n,r,i,o,s,a){var c;if(a&&"function"==typeof a){var u=0;c=function(l,d,h){if(l&&"EAGAIN"===l.code&&u<10)return u++,t.call(e,n,r,i,o,s,c);a.apply(this,arguments)}}return t.call(e,n,r,i,o,s,c)}return Object.setPrototypeOf&&Object.setPrototypeOf(n,t),n}(e.read),e.readSync=(d=e.readSync,function(t,n,r,i,o){for(var s=0;;)try{return d.call(e,t,n,r,i,o)}catch(e){if("EAGAIN"===e.code&&s<10){s++;continue}throw e}});var d}},5151:e=>{function t(e){return Array.isArray(e)?e:[e]}const n=/^\s+$/,r=/^\\!/,i=/^\\#/,o=/\r?\n/g,s=/^\.*\/|^\.+$/,a="undefined"!=typeof Symbol?Symbol.for("node-ignore"):"node-ignore",c=/([0-z])-([0-z])/g,u=[[/\\?\s+$/,e=>0===e.indexOf("\\")?" ":""],[/\\\s/g,()=>" "],[/[\\$.|*+(){^]/g,e=>`\\${e}`],[/(?!\\)\?/g,()=>"[^/]"],[/^\//,()=>"^"],[/\//g,()=>"\\/"],[/^\^*\\\*\\\*\\\//,()=>"^(?:.*\\/)?"],[/^(?=[^^])/,function(){return/\/(?!$)/.test(this)?"^":"(?:^|\\/)"}],[/\\\/\\\*\\\*(?=\\\/|$)/g,(e,t,n)=>t+6<n.length?"(?:\\/[^\\/]+)*":"\\/.+"],[/(^|[^\\]+)\\\*(?=.+)/g,(e,t)=>`${t}[^\\/]*`],[/\\\\\\(?=[$.|*+(){^])/g,()=>"\\"],[/\\\\/g,()=>"\\"],[/(\\)?\[([^\]/]*?)(\\*)($|\])/g,(e,t,n,r,i)=>"\\"===t?`\\[${n}${(e=>{const{length:t}=e;return e.slice(0,t-t%2)})(r)}${i}`:"]"===i&&r.length%2==0?`[${(e=>e.replace(c,((e,t,n)=>t.charCodeAt(0)<=n.charCodeAt(0)?e:"")))(n)}${r}]`:"[]"],[/(?:[^*])$/,e=>/\/$/.test(e)?`${e}$`:`${e}(?=$|\\/$)`],[/(\^|\\\/)?\\\*$/,(e,t)=>`${t?`${t}[^/]+`:"[^/]*"}(?=$|\\/$)`]],l=Object.create(null),d=e=>"string"==typeof e;class h{constructor(e,t,n,r){this.origin=e,this.pattern=t,this.negative=n,this.regex=r}}const f=(e,t)=>{const n=e;let o=!1;0===e.indexOf("!")&&(o=!0,e=e.substr(1));const s=((e,t,n)=>{const r=l[e];if(r)return r;const i=u.reduce(((t,n)=>t.replace(n[0],n[1].bind(e))),e);return l[e]=n?new RegExp(i,"i"):new RegExp(i)})(e=e.replace(r,"!").replace(i,"#"),0,t);return new h(n,e,o,s)},p=(e,t)=>{throw new t(e)},m=(e,t,n)=>{if(!d(e))return n(`path must be a string, but got \`${t}\``,TypeError);if(!e)return n("path must not be empty",TypeError);if(m.isNotRelative(e)){return n(`path should be a ${"`path.relative()`d"} string, but got "${t}"`,RangeError)}return!0},g=e=>s.test(e);m.isNotRelative=g,m.convert=e=>e;class y{constructor({ignorecase:e=!0}={}){var t,n,r;this._rules=[],this._ignorecase=e,t=this,n=a,r=!0,Object.defineProperty(t,n,{value:r}),this._initCache()}_initCache(){this._ignoreCache=Object.create(null),this._testCache=Object.create(null)}_addPattern(e){if(e&&e[a])return this._rules=this._rules.concat(e._rules),void(this._added=!0);if((e=>e&&d(e)&&!n.test(e)&&0!==e.indexOf("#"))(e)){const t=f(e,this._ignorecase);this._added=!0,this._rules.push(t)}}add(e){return this._added=!1,t(d(e)?(e=>e.split(o))(e):e).forEach(this._addPattern,this),this._added&&this._initCache(),this}addPattern(e){return this.add(e)}_testOne(e,t){let n=!1,r=!1;return this._rules.forEach((i=>{const{negative:o}=i;if(r===o&&n!==r||o&&!n&&!r&&!t)return;i.regex.test(e)&&(n=!o,r=o)})),{ignored:n,unignored:r}}_test(e,t,n,r){const i=e&&m.convert(e);return m(i,e,p),this._t(i,t,n,r)}_t(e,t,n,r){if(e in t)return t[e];if(r||(r=e.split("/")),r.pop(),!r.length)return t[e]=this._testOne(e,n);const i=this._t(r.join("/")+"/",t,n,r);return t[e]=i.ignored?i:this._testOne(e,n)}ignores(e){return this._test(e,this._ignoreCache,!1).ignored}createFilter(){return e=>!this.ignores(e)}filter(e){return t(e).filter(this.createFilter())}test(e){return this._test(e,this._testCache,!0)}}const v=e=>new y(e),_=()=>!1;if(v.isPathValid=e=>m(e&&m.convert(e),e,_),v.default=v,e.exports=v,"undefined"!=typeof process&&(process.env&&process.env.IGNORE_TEST_WIN32||"win32"===process.platform)){const e=e=>/^\\\\\?\\/.test(e)||/["<>|\u0000-\u001F]+/u.test(e)?e:e.replace(/\\/g,"/");m.convert=e;const t=/^[a-z]:\//i;m.isNotRelative=e=>t.test(e)||g(e)}},5602:e=>{"use strict";e.exports=(e,t=1,n)=>{if(n={indent:" ",includeEmptyLines:!1,...n},"string"!=typeof e)throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof e}\``);if("number"!=typeof t)throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof t}\``);if("string"!=typeof n.indent)throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof n.indent}\``);if(0===t)return e;const r=n.includeEmptyLines?/^/gm:/^(?!\s*$)/gm;return e.replace(r,n.indent.repeat(t))}},7844:(e,t,n)=>{var r=n(2479),i=Object.create(null),o=n(778);function s(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r]=e[r];return n}e.exports=r((function(e,t){return i[e]?(i[e].push(t),null):(i[e]=[t],function(e){return o((function t(){var n=i[e],r=n.length,o=s(arguments);try{for(var a=0;a<r;a++)n[a].apply(null,o)}finally{n.length>r?(n.splice(0,r),process.nextTick((function(){t.apply(null,o)}))):delete i[e]}}))}(e))}))},4378:(e,t,n)=>{try{var r=n(3837);if("function"!=typeof r.inherits)throw"";e.exports=r.inherits}catch(t){e.exports=n(5717)}},5717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},2428:e=>{
/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */
e.exports=function(e){if("string"!=typeof e||""===e)return!1;for(var t;t=/(\\).|([@?!+*]\(.*\))/g.exec(e);){if(t[2])return!0;e=e.slice(t.index+t[0].length)}return!1}},6830:(e,t,n)=>{
/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
var r=n(2428),i={"{":"}","(":")","[":"]"},o=function(e){if("!"===e[0])return!0;for(var t=0,n=-2,r=-2,o=-2,s=-2,a=-2;t<e.length;){if("*"===e[t])return!0;if("?"===e[t+1]&&/[\].+)]/.test(e[t]))return!0;if(-1!==r&&"["===e[t]&&"]"!==e[t+1]&&(r<t&&(r=e.indexOf("]",t)),r>t)){if(-1===a||a>r)return!0;if(-1===(a=e.indexOf("\\",t))||a>r)return!0}if(-1!==o&&"{"===e[t]&&"}"!==e[t+1]&&(o=e.indexOf("}",t))>t&&(-1===(a=e.indexOf("\\",t))||a>o))return!0;if(-1!==s&&"("===e[t]&&"?"===e[t+1]&&/[:!=]/.test(e[t+2])&&")"!==e[t+3]&&(s=e.indexOf(")",t))>t&&(-1===(a=e.indexOf("\\",t))||a>s))return!0;if(-1!==n&&"("===e[t]&&"|"!==e[t+1]&&(n<t&&(n=e.indexOf("|",t)),-1!==n&&")"!==e[n+1]&&(s=e.indexOf(")",n))>n&&(-1===(a=e.indexOf("\\",n))||a>s)))return!0;if("\\"===e[t]){var c=e[t+1];t+=2;var u=i[c];if(u){var l=e.indexOf(u,t);-1!==l&&(t=l+1)}if("!"===e[t])return!0}else t++}return!1},s=function(e){if("!"===e[0])return!0;for(var t=0;t<e.length;){if(/[*?{}()[\]]/.test(e[t]))return!0;if("\\"===e[t]){var n=e[t+1];t+=2;var r=i[n];if(r){var o=e.indexOf(r,t);-1!==o&&(t=o+1)}if("!"===e[t])return!0}else t++}return!1};e.exports=function(e,t){if("string"!=typeof e||""===e)return!1;if(r(e))return!0;var n=o;return t&&!1===t.strict&&(n=s),n(e)}},8297:(e,t,n)=>{"use strict";const r=n(1017);e.exports=e=>{let t=process.cwd();return e=r.resolve(e),"win32"===process.platform&&(t=t.toLowerCase(),e=e.toLowerCase()),e===t}},291:(e,t,n)=>{"use strict";const r=n(1017);e.exports=(e,t)=>{const n=r.relative(t,e);return Boolean(n&&".."!==n&&!n.startsWith(`..${r.sep}`)&&n!==r.resolve(e))}},6813:(e,t,n)=>{let r;try{r=n(77)}catch(e){r=n(7147)}const i=n(8981),{stringify:o,stripBom:s}=n(6780);const a={readFile:i.fromPromise((async function(e,t={}){"string"==typeof t&&(t={encoding:t});const n=t.fs||r,o=!("throws"in t)||t.throws;let a,c=await i.fromCallback(n.readFile)(e,t);c=s(c);try{a=JSON.parse(c,t?t.reviver:null)}catch(t){if(o)throw t.message=`${e}: ${t.message}`,t;return null}return a})),readFileSync:function(e,t={}){"string"==typeof t&&(t={encoding:t});const n=t.fs||r,i=!("throws"in t)||t.throws;try{let r=n.readFileSync(e,t);return r=s(r),JSON.parse(r,t.reviver)}catch(t){if(i)throw t.message=`${e}: ${t.message}`,t;return null}},writeFile:i.fromPromise((async function(e,t,n={}){const s=n.fs||r,a=o(t,n);await i.fromCallback(s.writeFile)(e,a,n)})),writeFileSync:function(e,t,n={}){const i=n.fs||r,s=o(t,n);return i.writeFileSync(e,s,n)}};e.exports=a},6780:e=>{e.exports={stringify:function(e,{EOL:t="\n",finalEOL:n=!0,replacer:r=null,spaces:i}={}){const o=n?t:"";return JSON.stringify(e,r,i).replace(/\n/g,t)+o},stripBom:function(e){return Buffer.isBuffer(e)&&(e=e.toString("utf8")),e.replace(/^\uFEFF/,"")}}},155:(e,t,n)=>{"use strict";const r=n(2781).PassThrough,i=Array.prototype.slice;function o(e,t){if(Array.isArray(e))for(let n=0,r=e.length;n<r;n++)e[n]=o(e[n],t);else{if(!e._readableState&&e.pipe&&(e=e.pipe(r(t))),!e._readableState||!e.pause||!e.pipe)throw new Error("Only readable stream can be merged.");e.pause()}return e}e.exports=function(){const e=[],t=i.call(arguments);let n=!1,s=t[t.length-1];s&&!Array.isArray(s)&&null==s.pipe?t.pop():s={};const a=!1!==s.end,c=!0===s.pipeError;null==s.objectMode&&(s.objectMode=!0);null==s.highWaterMark&&(s.highWaterMark=65536);const u=r(s);function l(){for(let t=0,n=arguments.length;t<n;t++)e.push(o(arguments[t],s));return d(),this}function d(){if(n)return;n=!0;let t=e.shift();if(!t)return void process.nextTick(h);Array.isArray(t)||(t=[t]);let r=t.length+1;function i(){--r>0||(n=!1,d())}function o(e){function t(){e.removeListener("merge2UnpipeEnd",t),e.removeListener("end",t),c&&e.removeListener("error",n),i()}function n(e){u.emit("error",e)}if(e._readableState.endEmitted)return i();e.on("merge2UnpipeEnd",t),e.on("end",t),c&&e.on("error",n),e.pipe(u,{end:!1}),e.resume()}for(let e=0;e<t.length;e++)o(t[e]);i()}function h(){n=!1,u.emit("queueDrain"),a&&u.end()}u.setMaxListeners(0),u.add=l,u.on("unpipe",(function(e){e.emit("merge2UnpipeEnd")})),t.length&&l.apply(null,t);return u}},1171:(e,t,n)=>{e.exports=h,h.Minimatch=f;var r={sep:"/"};try{r=n(1017)}catch(e){}var i=h.GLOBSTAR=f.GLOBSTAR={},o=n(3644),s={"!":{open:"(?:(?!(?:",close:"))[^/]*?)"},"?":{open:"(?:",close:")?"},"+":{open:"(?:",close:")+"},"*":{open:"(?:",close:")*"},"@":{open:"(?:",close:")"}},a="[^/]",c="[^/]*?",u="().*{}+?[]^$\\!".split("").reduce((function(e,t){return e[t]=!0,e}),{});var l=/\/+/;function d(e,t){e=e||{},t=t||{};var n={};return Object.keys(t).forEach((function(e){n[e]=t[e]})),Object.keys(e).forEach((function(t){n[t]=e[t]})),n}function h(e,t,n){if("string"!=typeof t)throw new TypeError("glob pattern string required");return n||(n={}),!(!n.nocomment&&"#"===t.charAt(0))&&(""===t.trim()?""===e:new f(t,n).match(e))}function f(e,t){if(!(this instanceof f))return new f(e,t);if("string"!=typeof e)throw new TypeError("glob pattern string required");t||(t={}),e=e.trim(),"/"!==r.sep&&(e=e.split(r.sep).join("/")),this.options=t,this.set=[],this.pattern=e,this.regexp=null,this.negate=!1,this.comment=!1,this.empty=!1,this.make()}function p(e,t){if(t||(t=this instanceof f?this.options:{}),void 0===(e=void 0===e?this.pattern:e))throw new TypeError("undefined pattern");return t.nobrace||!e.match(/\{.*\}/)?[e]:o(e)}h.filter=function(e,t){return t=t||{},function(n,r,i){return h(n,e,t)}},h.defaults=function(e){if(!e||!Object.keys(e).length)return h;var t=h,n=function(n,r,i){return t.minimatch(n,r,d(e,i))};return n.Minimatch=function(n,r){return new t.Minimatch(n,d(e,r))},n},f.defaults=function(e){return e&&Object.keys(e).length?h.defaults(e).Minimatch:f},f.prototype.debug=function(){},f.prototype.make=function(){if(this._made)return;var e=this.pattern,t=this.options;if(!t.nocomment&&"#"===e.charAt(0))return void(this.comment=!0);if(!e)return void(this.empty=!0);this.parseNegate();var n=this.globSet=this.braceExpand();t.debug&&(this.debug=console.error);this.debug(this.pattern,n),n=this.globParts=n.map((function(e){return e.split(l)})),this.debug(this.pattern,n),n=n.map((function(e,t,n){return e.map(this.parse,this)}),this),this.debug(this.pattern,n),n=n.filter((function(e){return-1===e.indexOf(!1)})),this.debug(this.pattern,n),this.set=n},f.prototype.parseNegate=function(){var e=this.pattern,t=!1,n=this.options,r=0;if(n.nonegate)return;for(var i=0,o=e.length;i<o&&"!"===e.charAt(i);i++)t=!t,r++;r&&(this.pattern=e.substr(r));this.negate=t},h.braceExpand=function(e,t){return p(e,t)},f.prototype.braceExpand=p,f.prototype.parse=function(e,t){if(e.length>65536)throw new TypeError("pattern is too long");var n=this.options;if(!n.noglobstar&&"**"===e)return i;if(""===e)return"";var r,o="",l=!!n.nocase,d=!1,h=[],f=[],p=!1,g=-1,y=-1,v="."===e.charAt(0)?"":n.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)",_=this;function b(){if(r){switch(r){case"*":o+=c,l=!0;break;case"?":o+=a,l=!0;break;default:o+="\\"+r}_.debug("clearStateChar %j %j",r,o),r=!1}}for(var S,w=0,E=e.length;w<E&&(S=e.charAt(w));w++)if(this.debug("%s\t%s %s %j",e,w,o,S),d&&u[S])o+="\\"+S,d=!1;else switch(S){case"/":return!1;case"\\":b(),d=!0;continue;case"?":case"*":case"+":case"@":case"!":if(this.debug("%s\t%s %s %j <-- stateChar",e,w,o,S),p){this.debug("  in class"),"!"===S&&w===y+1&&(S="^"),o+=S;continue}_.debug("call clearStateChar %j",r),b(),r=S,n.noext&&b();continue;case"(":if(p){o+="(";continue}if(!r){o+="\\(";continue}h.push({type:r,start:w-1,reStart:o.length,open:s[r].open,close:s[r].close}),o+="!"===r?"(?:(?!(?:":"(?:",this.debug("plType %j %j",r,o),r=!1;continue;case")":if(p||!h.length){o+="\\)";continue}b(),l=!0;var R=h.pop();o+=R.close,"!"===R.type&&f.push(R),R.reEnd=o.length;continue;case"|":if(p||!h.length||d){o+="\\|",d=!1;continue}b(),o+="|";continue;case"[":if(b(),p){o+="\\"+S;continue}p=!0,y=w,g=o.length,o+=S;continue;case"]":if(w===y+1||!p){o+="\\"+S,d=!1;continue}if(p){var x=e.substring(y+1,w);try{RegExp("["+x+"]")}catch(e){var C=this.parse(x,m);o=o.substr(0,g)+"\\["+C[0]+"\\]",l=l||C[1],p=!1;continue}}l=!0,p=!1,o+=S;continue;default:b(),d?d=!1:!u[S]||"^"===S&&p||(o+="\\"),o+=S}p&&(x=e.substr(y+1),C=this.parse(x,m),o=o.substr(0,g)+"\\["+C[0],l=l||C[1]);for(R=h.pop();R;R=h.pop()){var P=o.slice(R.reStart+R.open.length);this.debug("setting tail",o,R),P=P.replace(/((?:\\{2}){0,64})(\\?)\|/g,(function(e,t,n){return n||(n="\\"),t+t+n+"|"})),this.debug("tail=%j\n   %s",P,P,R,o);var T="*"===R.type?c:"?"===R.type?a:"\\"+R.type;l=!0,o=o.slice(0,R.reStart)+T+"\\("+P}b(),d&&(o+="\\\\");var O=!1;switch(o.charAt(0)){case".":case"[":case"(":O=!0}for(var k=f.length-1;k>-1;k--){var D=f[k],A=o.slice(0,D.reStart),N=o.slice(D.reStart,D.reEnd-8),M=o.slice(D.reEnd-8,D.reEnd),j=o.slice(D.reEnd);M+=j;var F=A.split("(").length-1,q=j;for(w=0;w<F;w++)q=q.replace(/\)[+*?]?/,"");var L="";""===(j=q)&&t!==m&&(L="$"),o=A+N+j+L+M}""!==o&&l&&(o="(?=.)"+o);O&&(o=v+o);if(t===m)return[o,l];if(!l)return function(e){return e.replace(/\\(.)/g,"$1")}(e);var I=n.nocase?"i":"";try{var $=new RegExp("^"+o+"$",I)}catch(e){return new RegExp("$.")}return $._glob=e,$._src=o,$};var m={};h.makeRe=function(e,t){return new f(e,t||{}).makeRe()},f.prototype.makeRe=function(){if(this.regexp||!1===this.regexp)return this.regexp;var e=this.set;if(!e.length)return this.regexp=!1,this.regexp;var t=this.options,n=t.noglobstar?c:t.dot?"(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?":"(?:(?!(?:\\/|^)\\.).)*?",r=t.nocase?"i":"",o=e.map((function(e){return e.map((function(e){return e===i?n:"string"==typeof e?function(e){return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}(e):e._src})).join("\\/")})).join("|");o="^(?:"+o+")$",this.negate&&(o="^(?!"+o+").*$");try{this.regexp=new RegExp(o,r)}catch(e){this.regexp=!1}return this.regexp},h.match=function(e,t,n){var r=new f(t,n=n||{});return e=e.filter((function(e){return r.match(e)})),r.options.nonull&&!e.length&&e.push(t),e},f.prototype.match=function(e,t){if(this.debug("match",e,this.pattern),this.comment)return!1;if(this.empty)return""===e;if("/"===e&&t)return!0;var n=this.options;"/"!==r.sep&&(e=e.split(r.sep).join("/"));e=e.split(l),this.debug(this.pattern,"split",e);var i,o,s=this.set;for(this.debug(this.pattern,"set",s),o=e.length-1;o>=0&&!(i=e[o]);o--);for(o=0;o<s.length;o++){var a=s[o],c=e;if(n.matchBase&&1===a.length&&(c=[i]),this.matchOne(c,a,t))return!!n.flipNegate||!this.negate}return!n.flipNegate&&this.negate},f.prototype.matchOne=function(e,t,n){var r=this.options;this.debug("matchOne",{this:this,file:e,pattern:t}),this.debug("matchOne",e.length,t.length);for(var o=0,s=0,a=e.length,c=t.length;o<a&&s<c;o++,s++){this.debug("matchOne loop");var u,l=t[s],d=e[o];if(this.debug(t,l,d),!1===l)return!1;if(l===i){this.debug("GLOBSTAR",[t,l,d]);var h=o,f=s+1;if(f===c){for(this.debug("** at the end");o<a;o++)if("."===e[o]||".."===e[o]||!r.dot&&"."===e[o].charAt(0))return!1;return!0}for(;h<a;){var p=e[h];if(this.debug("\nglobstar while",e,h,t,f,p),this.matchOne(e.slice(h),t.slice(f),n))return this.debug("globstar found match!",h,a,p),!0;if("."===p||".."===p||!r.dot&&"."===p.charAt(0)){this.debug("dot detected!",e,h,t,f);break}this.debug("globstar swallow a segment, and continue"),h++}return!(!n||(this.debug("\n>>> no match, partial?",e,h,t,f),h!==a))}if("string"==typeof l?(u=r.nocase?d.toLowerCase()===l.toLowerCase():d===l,this.debug("string match",l,d,u)):(u=d.match(l),this.debug("pattern match",l,d,u)),!u)return!1}if(o===a&&s===c)return!0;if(o===a)return n;if(s===c)return o===a-1&&""===e[o];throw new Error("wtf?")}},778:(e,t,n)=>{var r=n(2479);function i(e){var t=function(){return t.called?t.value:(t.called=!0,t.value=e.apply(this,arguments))};return t.called=!1,t}function o(e){var t=function(){if(t.called)throw new Error(t.onceError);return t.called=!0,t.value=e.apply(this,arguments)},n=e.name||"Function wrapped with `once`";return t.onceError=n+" shouldn't be called more than once",t.called=!1,t}e.exports=r(i),e.exports.strict=r(o),i.proto=i((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return i(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return o(this)},configurable:!0})}))},5568:e=>{"use strict";const t=(e,t,n={})=>{if(!Number.isFinite(t))throw new TypeError("Expected `wait` to be a finite number");let r,i,o=[];return function(...s){return new Promise((a=>{const c=n.leading&&!i;clearTimeout(i),i=setTimeout((()=>{i=null;const t=n.leading?r:e.apply(this,s);for(a of o)a(t);o=[]}),t),c?(r=e.apply(this,s),a(r)):o.push(a)}))}};e.exports=t,e.exports.default=t},4095:e=>{"use strict";function t(e){return"/"===e.charAt(0)}function n(e){var t=/^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/.exec(e),n=t[1]||"",r=Boolean(n&&":"!==n.charAt(1));return Boolean(t[2]||r)}e.exports="win32"===process.platform?n:t,e.exports.posix=t,e.exports.win32=n},9847:(e,t,n)=>{"use strict";const{promisify:r}=n(3837),i=n(7147);async function o(e,t,n){if("string"!=typeof n)throw new TypeError("Expected a string, got "+typeof n);try{return(await r(i[e])(n))[t]()}catch(e){if("ENOENT"===e.code)return!1;throw e}}function s(e,t,n){if("string"!=typeof n)throw new TypeError("Expected a string, got "+typeof n);try{return i[e](n)[t]()}catch(e){if("ENOENT"===e.code)return!1;throw e}}t.isFile=o.bind(null,"stat","isFile"),t.isDirectory=o.bind(null,"stat","isDirectory"),t.isSymlink=o.bind(null,"lstat","isSymbolicLink"),t.isFileSync=s.bind(null,"statSync","isFile"),t.isDirectorySync=s.bind(null,"statSync","isDirectory"),t.isSymlinkSync=s.bind(null,"lstatSync","isSymbolicLink")},9444:(e,t,n)=>{"use strict";e.exports=n(6087)},1006:(e,t,n)=>{"use strict";const r=n(1017),i="[^\\\\/]",o="\\.",s="\\/",a="[^/]",c="(?:\\/|$)",u="(?:^|\\/)",l="\\.{1,2}(?:\\/|$)",d={DOT_LITERAL:o,PLUS_LITERAL:"\\+",QMARK_LITERAL:"\\?",SLASH_LITERAL:s,ONE_CHAR:"(?=.)",QMARK:a,END_ANCHOR:c,DOTS_SLASH:l,NO_DOT:"(?!\\.)",NO_DOTS:`(?!(?:^|\\/)${l})`,NO_DOT_SLASH:"(?!\\.{0,1}(?:\\/|$))",NO_DOTS_SLASH:`(?!${l})`,QMARK_NO_DOT:"[^.\\/]",STAR:"[^/]*?",START_ANCHOR:u},h={...d,SLASH_LITERAL:"[\\\\/]",QMARK:i,STAR:"[^\\\\/]*?",DOTS_SLASH:"\\.{1,2}(?:[\\\\/]|$)",NO_DOT:"(?!\\.)",NO_DOTS:"(?!(?:^|[\\\\/])\\.{1,2}(?:[\\\\/]|$))",NO_DOT_SLASH:"(?!\\.{0,1}(?:[\\\\/]|$))",NO_DOTS_SLASH:"(?!\\.{1,2}(?:[\\\\/]|$))",QMARK_NO_DOT:"[^.\\\\/]",START_ANCHOR:"(?:^|[\\\\/])",END_ANCHOR:"(?:[\\\\/]|$)"};e.exports={MAX_LENGTH:65536,POSIX_REGEX_SOURCE:{alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"},REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:r.sep,extglobChars:e=>({"!":{type:"negate",open:"(?:(?!(?:",close:`))${e.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}),globChars:e=>!0===e?h:d}},3376:(e,t,n)=>{"use strict";const r=n(1006),i=n(8702),{MAX_LENGTH:o,POSIX_REGEX_SOURCE:s,REGEX_NON_SPECIAL_CHARS:a,REGEX_SPECIAL_CHARS_BACKREF:c,REPLACEMENTS:u}=r,l=(e,t)=>{if("function"==typeof t.expandRange)return t.expandRange(...e,t);e.sort();const n=`[${e.join("-")}]`;try{new RegExp(n)}catch(t){return e.map((e=>i.escapeRegex(e))).join("..")}return n},d=(e,t)=>`Missing ${e}: "${t}" - use "\\\\${t}" to match literal characters`,h=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");e=u[e]||e;const n={...t},h="number"==typeof n.maxLength?Math.min(o,n.maxLength):o;let f=e.length;if(f>h)throw new SyntaxError(`Input length: ${f}, exceeds maximum allowed length: ${h}`);const p={type:"bos",value:"",output:n.prepend||""},m=[p],g=n.capture?"":"?:",y=i.isWindows(t),v=r.globChars(y),_=r.extglobChars(v),{DOT_LITERAL:b,PLUS_LITERAL:S,SLASH_LITERAL:w,ONE_CHAR:E,DOTS_SLASH:R,NO_DOT:x,NO_DOT_SLASH:C,NO_DOTS_SLASH:P,QMARK:T,QMARK_NO_DOT:O,STAR:k,START_ANCHOR:D}=v,A=e=>`(${g}(?:(?!${D}${e.dot?R:b}).)*?)`,N=n.dot?"":x,M=n.dot?T:O;let j=!0===n.bash?A(n):k;n.capture&&(j=`(${j})`),"boolean"==typeof n.noext&&(n.noextglob=n.noext);const F={input:e,index:-1,start:0,dot:!0===n.dot,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:m};e=i.removePrefix(e,F),f=e.length;const q=[],L=[],I=[];let $,H=p;const W=()=>F.index===f-1,K=F.peek=(t=1)=>e[F.index+t],B=F.advance=()=>e[++F.index]||"",U=()=>e.slice(F.index+1),G=(e="",t=0)=>{F.consumed+=e,F.index+=t},V=e=>{F.output+=null!=e.output?e.output:e.value,G(e.value)},z=()=>{let e=1;for(;"!"===K()&&("("!==K(2)||"?"===K(3));)B(),F.start++,e++;return e%2!=0&&(F.negated=!0,F.start++,!0)},Y=e=>{F[e]++,I.push(e)},Q=e=>{F[e]--,I.pop()},J=e=>{if("globstar"===H.type){const t=F.braces>0&&("comma"===e.type||"brace"===e.type),n=!0===e.extglob||q.length&&("pipe"===e.type||"paren"===e.type);"slash"===e.type||"paren"===e.type||t||n||(F.output=F.output.slice(0,-H.output.length),H.type="star",H.value="*",H.output=j,F.output+=H.output)}if(q.length&&"paren"!==e.type&&(q[q.length-1].inner+=e.value),(e.value||e.output)&&V(e),H&&"text"===H.type&&"text"===e.type)return H.value+=e.value,void(H.output=(H.output||"")+e.value);e.prev=H,m.push(e),H=e},X=(e,t)=>{const r={..._[t],conditions:1,inner:""};r.prev=H,r.parens=F.parens,r.output=F.output;const i=(n.capture?"(":"")+r.open;Y("parens"),J({type:e,value:t,output:F.output?"":E}),J({type:"paren",extglob:!0,value:B(),output:i}),q.push(r)},Z=e=>{let t,r=e.close+(n.capture?")":"");if("negate"===e.type){let i=j;e.inner&&e.inner.length>1&&e.inner.includes("/")&&(i=A(n)),(i!==j||W()||/^\)+$/.test(U()))&&(r=e.close=`)$))${i}`),e.inner.includes("*")&&(t=U())&&/^\.[^\\/.]+$/.test(t)&&(r=e.close=`)${t})${i})`),"bos"===e.prev.type&&(F.negatedExtglob=!0)}J({type:"paren",extglob:!0,value:$,output:r}),Q("parens")};if(!1!==n.fastpaths&&!/(^[*!]|[/()[\]{}"])/.test(e)){let r=!1,o=e.replace(c,((e,t,n,i,o,s)=>"\\"===i?(r=!0,e):"?"===i?t?t+i+(o?T.repeat(o.length):""):0===s?M+(o?T.repeat(o.length):""):T.repeat(n.length):"."===i?b.repeat(n.length):"*"===i?t?t+i+(o?j:""):j:t?e:`\\${e}`));return!0===r&&(o=!0===n.unescape?o.replace(/\\/g,""):o.replace(/\\+/g,(e=>e.length%2==0?"\\\\":e?"\\":""))),o===e&&!0===n.contains?(F.output=e,F):(F.output=i.wrapOutput(o,F,t),F)}for(;!W();){if($=B(),"\0"===$)continue;if("\\"===$){const e=K();if("/"===e&&!0!==n.bash)continue;if("."===e||";"===e)continue;if(!e){$+="\\",J({type:"text",value:$});continue}const t=/^\\+/.exec(U());let r=0;if(t&&t[0].length>2&&(r=t[0].length,F.index+=r,r%2!=0&&($+="\\")),!0===n.unescape?$=B():$+=B(),0===F.brackets){J({type:"text",value:$});continue}}if(F.brackets>0&&("]"!==$||"["===H.value||"[^"===H.value)){if(!1!==n.posix&&":"===$){const e=H.value.slice(1);if(e.includes("[")&&(H.posix=!0,e.includes(":"))){const e=H.value.lastIndexOf("["),t=H.value.slice(0,e),n=H.value.slice(e+2),r=s[n];if(r){H.value=t+r,F.backtrack=!0,B(),p.output||1!==m.indexOf(H)||(p.output=E);continue}}}("["===$&&":"!==K()||"-"===$&&"]"===K())&&($=`\\${$}`),"]"!==$||"["!==H.value&&"[^"!==H.value||($=`\\${$}`),!0===n.posix&&"!"===$&&"["===H.value&&($="^"),H.value+=$,V({value:$});continue}if(1===F.quotes&&'"'!==$){$=i.escapeRegex($),H.value+=$,V({value:$});continue}if('"'===$){F.quotes=1===F.quotes?0:1,!0===n.keepQuotes&&J({type:"text",value:$});continue}if("("===$){Y("parens"),J({type:"paren",value:$});continue}if(")"===$){if(0===F.parens&&!0===n.strictBrackets)throw new SyntaxError(d("opening","("));const e=q[q.length-1];if(e&&F.parens===e.parens+1){Z(q.pop());continue}J({type:"paren",value:$,output:F.parens?")":"\\)"}),Q("parens");continue}if("["===$){if(!0!==n.nobracket&&U().includes("]"))Y("brackets");else{if(!0!==n.nobracket&&!0===n.strictBrackets)throw new SyntaxError(d("closing","]"));$=`\\${$}`}J({type:"bracket",value:$});continue}if("]"===$){if(!0===n.nobracket||H&&"bracket"===H.type&&1===H.value.length){J({type:"text",value:$,output:`\\${$}`});continue}if(0===F.brackets){if(!0===n.strictBrackets)throw new SyntaxError(d("opening","["));J({type:"text",value:$,output:`\\${$}`});continue}Q("brackets");const e=H.value.slice(1);if(!0===H.posix||"^"!==e[0]||e.includes("/")||($=`/${$}`),H.value+=$,V({value:$}),!1===n.literalBrackets||i.hasRegexChars(e))continue;const t=i.escapeRegex(H.value);if(F.output=F.output.slice(0,-H.value.length),!0===n.literalBrackets){F.output+=t,H.value=t;continue}H.value=`(${g}${t}|${H.value})`,F.output+=H.value;continue}if("{"===$&&!0!==n.nobrace){Y("braces");const e={type:"brace",value:$,output:"(",outputIndex:F.output.length,tokensIndex:F.tokens.length};L.push(e),J(e);continue}if("}"===$){const e=L[L.length-1];if(!0===n.nobrace||!e){J({type:"text",value:$,output:$});continue}let t=")";if(!0===e.dots){const e=m.slice(),r=[];for(let t=e.length-1;t>=0&&(m.pop(),"brace"!==e[t].type);t--)"dots"!==e[t].type&&r.unshift(e[t].value);t=l(r,n),F.backtrack=!0}if(!0!==e.comma&&!0!==e.dots){const n=F.output.slice(0,e.outputIndex),r=F.tokens.slice(e.tokensIndex);e.value=e.output="\\{",$=t="\\}",F.output=n;for(const e of r)F.output+=e.output||e.value}J({type:"brace",value:$,output:t}),Q("braces"),L.pop();continue}if("|"===$){q.length>0&&q[q.length-1].conditions++,J({type:"text",value:$});continue}if(","===$){let e=$;const t=L[L.length-1];t&&"braces"===I[I.length-1]&&(t.comma=!0,e="|"),J({type:"comma",value:$,output:e});continue}if("/"===$){if("dot"===H.type&&F.index===F.start+1){F.start=F.index+1,F.consumed="",F.output="",m.pop(),H=p;continue}J({type:"slash",value:$,output:w});continue}if("."===$){if(F.braces>0&&"dot"===H.type){"."===H.value&&(H.output=b);const e=L[L.length-1];H.type="dots",H.output+=$,H.value+=$,e.dots=!0;continue}if(F.braces+F.parens===0&&"bos"!==H.type&&"slash"!==H.type){J({type:"text",value:$,output:b});continue}J({type:"dot",value:$,output:b});continue}if("?"===$){if(!(H&&"("===H.value)&&!0!==n.noextglob&&"("===K()&&"?"!==K(2)){X("qmark",$);continue}if(H&&"paren"===H.type){const e=K();let t=$;if("<"===e&&!i.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");("("===H.value&&!/[!=<:]/.test(e)||"<"===e&&!/<([!=]|\w+>)/.test(U()))&&(t=`\\${$}`),J({type:"text",value:$,output:t});continue}if(!0!==n.dot&&("slash"===H.type||"bos"===H.type)){J({type:"qmark",value:$,output:O});continue}J({type:"qmark",value:$,output:T});continue}if("!"===$){if(!0!==n.noextglob&&"("===K()&&("?"!==K(2)||!/[!=<:]/.test(K(3)))){X("negate",$);continue}if(!0!==n.nonegate&&0===F.index){z();continue}}if("+"===$){if(!0!==n.noextglob&&"("===K()&&"?"!==K(2)){X("plus",$);continue}if(H&&"("===H.value||!1===n.regex){J({type:"plus",value:$,output:S});continue}if(H&&("bracket"===H.type||"paren"===H.type||"brace"===H.type)||F.parens>0){J({type:"plus",value:$});continue}J({type:"plus",value:S});continue}if("@"===$){if(!0!==n.noextglob&&"("===K()&&"?"!==K(2)){J({type:"at",extglob:!0,value:$,output:""});continue}J({type:"text",value:$});continue}if("*"!==$){"$"!==$&&"^"!==$||($=`\\${$}`);const e=a.exec(U());e&&($+=e[0],F.index+=e[0].length),J({type:"text",value:$});continue}if(H&&("globstar"===H.type||!0===H.star)){H.type="star",H.star=!0,H.value+=$,H.output=j,F.backtrack=!0,F.globstar=!0,G($);continue}let t=U();if(!0!==n.noextglob&&/^\([^?]/.test(t)){X("star",$);continue}if("star"===H.type){if(!0===n.noglobstar){G($);continue}const r=H.prev,i=r.prev,o="slash"===r.type||"bos"===r.type,s=i&&("star"===i.type||"globstar"===i.type);if(!0===n.bash&&(!o||t[0]&&"/"!==t[0])){J({type:"star",value:$,output:""});continue}const a=F.braces>0&&("comma"===r.type||"brace"===r.type),c=q.length&&("pipe"===r.type||"paren"===r.type);if(!o&&"paren"!==r.type&&!a&&!c){J({type:"star",value:$,output:""});continue}for(;"/**"===t.slice(0,3);){const n=e[F.index+4];if(n&&"/"!==n)break;t=t.slice(3),G("/**",3)}if("bos"===r.type&&W()){H.type="globstar",H.value+=$,H.output=A(n),F.output=H.output,F.globstar=!0,G($);continue}if("slash"===r.type&&"bos"!==r.prev.type&&!s&&W()){F.output=F.output.slice(0,-(r.output+H.output).length),r.output=`(?:${r.output}`,H.type="globstar",H.output=A(n)+(n.strictSlashes?")":"|$)"),H.value+=$,F.globstar=!0,F.output+=r.output+H.output,G($);continue}if("slash"===r.type&&"bos"!==r.prev.type&&"/"===t[0]){const e=void 0!==t[1]?"|$":"";F.output=F.output.slice(0,-(r.output+H.output).length),r.output=`(?:${r.output}`,H.type="globstar",H.output=`${A(n)}${w}|${w}${e})`,H.value+=$,F.output+=r.output+H.output,F.globstar=!0,G($+B()),J({type:"slash",value:"/",output:""});continue}if("bos"===r.type&&"/"===t[0]){H.type="globstar",H.value+=$,H.output=`(?:^|${w}|${A(n)}${w})`,F.output=H.output,F.globstar=!0,G($+B()),J({type:"slash",value:"/",output:""});continue}F.output=F.output.slice(0,-H.output.length),H.type="globstar",H.output=A(n),H.value+=$,F.output+=H.output,F.globstar=!0,G($);continue}const r={type:"star",value:$,output:j};!0!==n.bash?!H||"bracket"!==H.type&&"paren"!==H.type||!0!==n.regex?(F.index!==F.start&&"slash"!==H.type&&"dot"!==H.type||("dot"===H.type?(F.output+=C,H.output+=C):!0===n.dot?(F.output+=P,H.output+=P):(F.output+=N,H.output+=N),"*"!==K()&&(F.output+=E,H.output+=E)),J(r)):(r.output=$,J(r)):(r.output=".*?","bos"!==H.type&&"slash"!==H.type||(r.output=N+r.output),J(r))}for(;F.brackets>0;){if(!0===n.strictBrackets)throw new SyntaxError(d("closing","]"));F.output=i.escapeLast(F.output,"["),Q("brackets")}for(;F.parens>0;){if(!0===n.strictBrackets)throw new SyntaxError(d("closing",")"));F.output=i.escapeLast(F.output,"("),Q("parens")}for(;F.braces>0;){if(!0===n.strictBrackets)throw new SyntaxError(d("closing","}"));F.output=i.escapeLast(F.output,"{"),Q("braces")}if(!0===n.strictSlashes||"star"!==H.type&&"bracket"!==H.type||J({type:"maybe_slash",value:"",output:`${w}?`}),!0===F.backtrack){F.output="";for(const e of F.tokens)F.output+=null!=e.output?e.output:e.value,e.suffix&&(F.output+=e.suffix)}return F};h.fastpaths=(e,t)=>{const n={...t},s="number"==typeof n.maxLength?Math.min(o,n.maxLength):o,a=e.length;if(a>s)throw new SyntaxError(`Input length: ${a}, exceeds maximum allowed length: ${s}`);e=u[e]||e;const c=i.isWindows(t),{DOT_LITERAL:l,SLASH_LITERAL:d,ONE_CHAR:h,DOTS_SLASH:f,NO_DOT:p,NO_DOTS:m,NO_DOTS_SLASH:g,STAR:y,START_ANCHOR:v}=r.globChars(c),_=n.dot?m:p,b=n.dot?g:p,S=n.capture?"":"?:";let w=!0===n.bash?".*?":y;n.capture&&(w=`(${w})`);const E=e=>!0===e.noglobstar?w:`(${S}(?:(?!${v}${e.dot?f:l}).)*?)`,R=e=>{switch(e){case"*":return`${_}${h}${w}`;case".*":return`${l}${h}${w}`;case"*.*":return`${_}${w}${l}${h}${w}`;case"*/*":return`${_}${w}${d}${h}${b}${w}`;case"**":return _+E(n);case"**/*":return`(?:${_}${E(n)}${d})?${b}${h}${w}`;case"**/*.*":return`(?:${_}${E(n)}${d})?${b}${w}${l}${h}${w}`;case"**/.*":return`(?:${_}${E(n)}${d})?${l}${h}${w}`;default:{const t=/^(.*?)\.(\w+)$/.exec(e);if(!t)return;const n=R(t[1]);if(!n)return;return n+l+t[2]}}},x=i.removePrefix(e,{negated:!1,prefix:""});let C=R(x);return C&&!0!==n.strictSlashes&&(C+=`${d}?`),C},e.exports=h},6087:(e,t,n)=>{"use strict";const r=n(1017),i=n(3921),o=n(3376),s=n(8702),a=n(1006),c=(e,t,n=!1)=>{if(Array.isArray(e)){const r=e.map((e=>c(e,t,n))),i=e=>{for(const t of r){const n=t(e);if(n)return n}return!1};return i}const r=(i=e)&&"object"==typeof i&&!Array.isArray(i)&&e.tokens&&e.input;var i;if(""===e||"string"!=typeof e&&!r)throw new TypeError("Expected pattern to be a non-empty string");const o=t||{},a=s.isWindows(t),u=r?c.compileRe(e,t):c.makeRe(e,t,!1,!0),l=u.state;delete u.state;let d=()=>!1;if(o.ignore){const e={...t,ignore:null,onMatch:null,onResult:null};d=c(o.ignore,e,n)}const h=(n,r=!1)=>{const{isMatch:i,match:s,output:h}=c.test(n,u,t,{glob:e,posix:a}),f={glob:e,state:l,regex:u,posix:a,input:n,output:h,match:s,isMatch:i};return"function"==typeof o.onResult&&o.onResult(f),!1===i?(f.isMatch=!1,!!r&&f):d(n)?("function"==typeof o.onIgnore&&o.onIgnore(f),f.isMatch=!1,!!r&&f):("function"==typeof o.onMatch&&o.onMatch(f),!r||f)};return n&&(h.state=l),h};c.test=(e,t,n,{glob:r,posix:i}={})=>{if("string"!=typeof e)throw new TypeError("Expected input to be a string");if(""===e)return{isMatch:!1,output:""};const o=n||{},a=o.format||(i?s.toPosixSlashes:null);let u=e===r,l=u&&a?a(e):e;return!1===u&&(l=a?a(e):e,u=l===r),!1!==u&&!0!==o.capture||(u=!0===o.matchBase||!0===o.basename?c.matchBase(e,t,n,i):t.exec(l)),{isMatch:Boolean(u),match:u,output:l}},c.matchBase=(e,t,n,i=s.isWindows(n))=>(t instanceof RegExp?t:c.makeRe(t,n)).test(r.basename(e)),c.isMatch=(e,t,n)=>c(t,n)(e),c.parse=(e,t)=>Array.isArray(e)?e.map((e=>c.parse(e,t))):o(e,{...t,fastpaths:!1}),c.scan=(e,t)=>i(e,t),c.compileRe=(e,t,n=!1,r=!1)=>{if(!0===n)return e.output;const i=t||{},o=i.contains?"":"^",s=i.contains?"":"$";let a=`${o}(?:${e.output})${s}`;e&&!0===e.negated&&(a=`^(?!${a}).*$`);const u=c.toRegex(a,t);return!0===r&&(u.state=e),u},c.makeRe=(e,t={},n=!1,r=!1)=>{if(!e||"string"!=typeof e)throw new TypeError("Expected a non-empty string");let i={negated:!1,fastpaths:!0};return!1===t.fastpaths||"."!==e[0]&&"*"!==e[0]||(i.output=o.fastpaths(e,t)),i.output||(i=o(e,t)),c.compileRe(i,t,n,r)},c.toRegex=(e,t)=>{try{const n=t||{};return new RegExp(e,n.flags||(n.nocase?"i":""))}catch(e){if(t&&!0===t.debug)throw e;return/$^/}},c.constants=a,e.exports=c},3921:(e,t,n)=>{"use strict";const r=n(8702),{CHAR_ASTERISK:i,CHAR_AT:o,CHAR_BACKWARD_SLASH:s,CHAR_COMMA:a,CHAR_DOT:c,CHAR_EXCLAMATION_MARK:u,CHAR_FORWARD_SLASH:l,CHAR_LEFT_CURLY_BRACE:d,CHAR_LEFT_PARENTHESES:h,CHAR_LEFT_SQUARE_BRACKET:f,CHAR_PLUS:p,CHAR_QUESTION_MARK:m,CHAR_RIGHT_CURLY_BRACE:g,CHAR_RIGHT_PARENTHESES:y,CHAR_RIGHT_SQUARE_BRACKET:v}=n(1006),_=e=>e===l||e===s,b=e=>{!0!==e.isPrefix&&(e.depth=e.isGlobstar?1/0:1)};e.exports=(e,t)=>{const n=t||{},S=e.length-1,w=!0===n.parts||!0===n.scanToEnd,E=[],R=[],x=[];let C,P,T=e,O=-1,k=0,D=0,A=!1,N=!1,M=!1,j=!1,F=!1,q=!1,L=!1,I=!1,$=!1,H=!1,W=0,K={value:"",depth:0,isGlob:!1};const B=()=>O>=S,U=()=>(C=P,T.charCodeAt(++O));for(;O<S;){let e;if(P=U(),P!==s){if(!0===q||P===d){for(W++;!0!==B()&&(P=U());)if(P!==s)if(P!==d){if(!0!==q&&P===c&&(P=U())===c){if(A=K.isBrace=!0,M=K.isGlob=!0,H=!0,!0===w)continue;break}if(!0!==q&&P===a){if(A=K.isBrace=!0,M=K.isGlob=!0,H=!0,!0===w)continue;break}if(P===g&&(W--,0===W)){q=!1,A=K.isBrace=!0,H=!0;break}}else W++;else L=K.backslashes=!0,U();if(!0===w)continue;break}if(P!==l){if(!0!==n.noext){if(!0===(P===p||P===o||P===i||P===m||P===u)&&T.charCodeAt(O+1)===h){if(M=K.isGlob=!0,j=K.isExtglob=!0,H=!0,P===u&&O===k&&($=!0),!0===w){for(;!0!==B()&&(P=U());)if(P!==s){if(P===y){M=K.isGlob=!0,H=!0;break}}else L=K.backslashes=!0,P=U();continue}break}}if(P===i){if(C===i&&(F=K.isGlobstar=!0),M=K.isGlob=!0,H=!0,!0===w)continue;break}if(P===m){if(M=K.isGlob=!0,H=!0,!0===w)continue;break}if(P===f){for(;!0!==B()&&(e=U());)if(e!==s){if(e===v){N=K.isBracket=!0,M=K.isGlob=!0,H=!0;break}}else L=K.backslashes=!0,U();if(!0===w)continue;break}if(!0===n.nonegate||P!==u||O!==k){if(!0!==n.noparen&&P===h){if(M=K.isGlob=!0,!0===w){for(;!0!==B()&&(P=U());)if(P!==h){if(P===y){H=!0;break}}else L=K.backslashes=!0,P=U();continue}break}if(!0===M){if(H=!0,!0===w)continue;break}}else I=K.negated=!0,k++}else{if(E.push(O),R.push(K),K={value:"",depth:0,isGlob:!1},!0===H)continue;if(C===c&&O===k+1){k+=2;continue}D=O+1}}else L=K.backslashes=!0,P=U(),P===d&&(q=!0)}!0===n.noext&&(j=!1,M=!1);let G=T,V="",z="";k>0&&(V=T.slice(0,k),T=T.slice(k),D-=k),G&&!0===M&&D>0?(G=T.slice(0,D),z=T.slice(D)):!0===M?(G="",z=T):G=T,G&&""!==G&&"/"!==G&&G!==T&&_(G.charCodeAt(G.length-1))&&(G=G.slice(0,-1)),!0===n.unescape&&(z&&(z=r.removeBackslashes(z)),G&&!0===L&&(G=r.removeBackslashes(G)));const Y={prefix:V,input:e,start:k,base:G,glob:z,isBrace:A,isBracket:N,isGlob:M,isExtglob:j,isGlobstar:F,negated:I,negatedExtglob:$};if(!0===n.tokens&&(Y.maxDepth=0,_(P)||R.push(K),Y.tokens=R),!0===n.parts||!0===n.tokens){let t;for(let r=0;r<E.length;r++){const i=t?t+1:k,o=E[r],s=e.slice(i,o);n.tokens&&(0===r&&0!==k?(R[r].isPrefix=!0,R[r].value=V):R[r].value=s,b(R[r]),Y.maxDepth+=R[r].depth),0===r&&""===s||x.push(s),t=o}if(t&&t+1<e.length){const r=e.slice(t+1);x.push(r),n.tokens&&(R[R.length-1].value=r,b(R[R.length-1]),Y.maxDepth+=R[R.length-1].depth)}Y.slashes=E,Y.parts=x}return Y}},8702:(e,t,n)=>{"use strict";const r=n(1017),i="win32"===process.platform,{REGEX_BACKSLASH:o,REGEX_REMOVE_BACKSLASH:s,REGEX_SPECIAL_CHARS:a,REGEX_SPECIAL_CHARS_GLOBAL:c}=n(1006);t.isObject=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),t.hasRegexChars=e=>a.test(e),t.isRegexChar=e=>1===e.length&&t.hasRegexChars(e),t.escapeRegex=e=>e.replace(c,"\\$1"),t.toPosixSlashes=e=>e.replace(o,"/"),t.removeBackslashes=e=>e.replace(s,(e=>"\\"===e?"":e)),t.supportsLookbehinds=()=>{const e=process.version.slice(1).split(".").map(Number);return 3===e.length&&e[0]>=9||8===e[0]&&e[1]>=10},t.isWindows=e=>e&&"boolean"==typeof e.windows?e.windows:!0===i||"\\"===r.sep,t.escapeLast=(e,n,r)=>{const i=e.lastIndexOf(n,r);return-1===i?e:"\\"===e[i-1]?t.escapeLast(e,n,i-1):`${e.slice(0,i)}\\${e.slice(i)}`},t.removePrefix=(e,t={})=>{let n=e;return n.startsWith("./")&&(n=n.slice(2),t.prefix="./"),n},t.wrapOutput=(e,t={},n={})=>{let r=`${n.contains?"":"^"}(?:${e})${n.contains?"":"$"}`;return!0===t.negated&&(r=`(?:^(?!${r}).*$)`),r}},4375:e=>{
/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
let t;e.exports="function"==typeof queueMicrotask?queueMicrotask.bind("undefined"!=typeof window?window:global):e=>(t||(t=Promise.resolve())).then(e).catch((e=>setTimeout((()=>{throw e}),0)))},3650:e=>{"use strict";e.exports=function(e){var t=new e,n=t;return{get:function(){var r=t;return r.next?t=r.next:(t=new e,n=t),r.next=null,r},release:function(e){n.next=e,n=e}}}},4595:(e,t,n)=>{
/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
e.exports=function(e,t){let n,i,o,s=!0;Array.isArray(e)?(n=[],i=e.length):(o=Object.keys(e),n={},i=o.length);function a(e){function i(){t&&t(e,n),t=null}s?r(i):i()}function c(e,t,r){n[e]=r,(0==--i||t)&&a(t)}i?o?o.forEach((function(t){e[t]((function(e,n){c(t,e,n)}))})):e.forEach((function(e,t){e((function(e,n){c(t,e,n)}))})):a(null);s=!1};const r=n(4375)},3859:e=>{"use strict";e.exports=e=>{const t=/^\\\\\?\\/.test(e),n=/[^\u0000-\u0080]+/.test(e);return t||n?e:e.replace(/\\/g,"/")}},9010:(e,t,n)=>{"use strict";const r=n(7147),i=n(2037),o=Symbol.for("__RESOLVED_TEMP_DIRECTORY__");global[o]||Object.defineProperty(global,o,{value:r.realpathSync(i.tmpdir())}),e.exports=global[o]},488:(e,t,n)=>{"use strict";const r=n(7147),i=n(1017),o=n(6277),s=n(9010),a=n(609),c=n(5752),u=n(2781),{promisify:l}=n(3837),d=l(u.pipeline),{writeFile:h}=r.promises,f=(e="")=>i.join(s,e+o()),p=async(e,t)=>d(t,r.createWriteStream(e)),m=(e,{extraArguments:t=0}={})=>async(...n)=>{const[r,i]=n.slice(t),o=await e(...n.slice(0,t),i);try{return await r(o)}finally{await c(o,{force:!0})}};e.exports.file=t=>{if((t={...t}).name){if(void 0!==t.extension&&null!==t.extension)throw new Error("The `name` and `extension` options are mutually exclusive");return i.join(e.exports.directory(),t.name)}return f()+(void 0===t.extension||null===t.extension?"":"."+t.extension.replace(/^\./,""))},e.exports.file.task=m(e.exports.file),e.exports.directory=({prefix:e=""}={})=>{const t=f(e);return r.mkdirSync(t),t},e.exports.directory.task=m(e.exports.directory),e.exports.write=async(t,n)=>{const r=e.exports.file(n),i=a(t)?p:h;return await i(r,t),r},e.exports.write.task=m(e.exports.write,{extraArguments:1}),e.exports.writeSync=(t,n)=>{const i=e.exports.file(n);return r.writeFileSync(i,t),i},Object.defineProperty(e.exports,"root",{get:()=>s})},609:e=>{"use strict";const t=e=>null!==e&&"object"==typeof e&&"function"==typeof e.pipe;t.writable=e=>t(e)&&!1!==e.writable&&"function"==typeof e._write&&"object"==typeof e._writableState,t.readable=e=>t(e)&&!1!==e.readable&&"function"==typeof e._read&&"object"==typeof e._readableState,t.duplex=e=>t.writable(e)&&t.readable(e),t.transform=e=>t.duplex(e)&&"function"==typeof e._transform,e.exports=t},4506:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},s=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.computeCallees=t.computeCallers=void 0;const a=o(n(8212)),c=o(n(6160)),u=n(9661);function l(e,t){return s(this,void 0,void 0,(function*(){const n=(0,u.uriToPath)(t.textDocument.uri);if(!n)return;const r=yield e.request("definition",{file:n,line:t.position.line+1,offset:t.position.character+1});return r.body?r.body[0]:void 0}))}function d(e,t){return s(this,void 0,void 0,(function*(){const n=t.file,r=(yield e.request("navtree",{file:n})).body;if(!r||!r.childItems)return;const i=a.Position.create(t.start.line-1,t.start.offset-1),o=yield function(e,t){return s(this,void 0,void 0,(function*(){const n=e=>!!u.Range.intersection((0,u.asRange)(e),t),r=e=>e.spans.some((e=>n(e)));let i=r(e)?e:void 0;e:for(;i;){const e=i.childItems||[];for(const t of e)if(r(t)){i=t;continue e}break}if(!i)return;const o=i.spans.find((e=>n(e))),s=(0,u.asRange)(o);let a=s;if(i.nameSpan){const e=(0,u.asRange)(i.nameSpan);u.Range.intersection(s,e)&&(a=e)}return{name:i.text,kind:(0,u.toSymbolKind)(i.kind),range:s,selectionRange:a}}))}(r,a.Range.create(i,i));if(!o)return;const l=(0,u.pathToUri)(n,void 0);return c.DefinitionSymbol.create(l,o)}))}function h(e,t){return s(this,void 0,void 0,(function*(){return(yield p(e,t)).filter((e=>e.isDefinition))}))}function f(e,t){return s(this,void 0,void 0,(function*(){return(yield p(e,t)).filter((e=>!e.isDefinition))}))}function p(e,t){return s(this,void 0,void 0,(function*(){const n=t.file,r=yield e.request("references",{file:n,line:t.start.line,offset:t.start.offset});return r.body?r.body.refs:[]}))}t.computeCallers=function(e,t){return s(this,void 0,void 0,(function*(){const n={calls:[]},r=yield l(e,t);if(!r)return n;const i=yield d(e,r);if(!i)return n;const o=yield f(e,r),s=[];for(const t of o){const n=yield d(e,t);if(!n)continue;const r=(0,u.toLocation)(t,void 0);s.push({location:r,symbol:n})}return{calls:s,symbol:i}}))},t.computeCallees=function(e,t,n){return s(this,void 0,void 0,(function*(){const r={calls:[]},i=yield l(e,t);if(!i)return r;const o=yield d(e,i);if(!o)return r;const c=yield function(e,t,n){return s(this,void 0,void 0,(function*(){const r=(e,t)=>{const n=e.getText(t),r=/\W([$_a-zA-Z0-9\u{00C0}-\u{E007F}]+)(<.*>)?\(/gmu;let i=r.exec(n);const o=[];for(;i;){const e=i[1];if(e){const t=i.index+i[0].indexOf(e),n=t+e.length;o.push({identifier:e,start:t,end:n})}i=r.exec(n)}const s=e.offsetAt(t.start);return o.map((t=>a.Range.create(e.positionAt(s+t.start),e.positionAt(s+t.end))))},i=(t,n)=>s(this,void 0,void 0,(function*(){const r={line:n.start.line+1,offset:n.start.character+1},i=yield f(e,{file:t,start:r,end:r});for(const e of i){if({line:n.start.line+1,offset:n.start.character+1}.line===e.start.line)return e}})),o=[],c=(0,u.uriToPath)(t.location.uri),l=n(c);if(!l)return o;const d=r(l,t.location.range);for(const e of d){const t=yield i(c,e);t&&o.push(t)}return o}))}(e,o,n),p=[];for(const t of c){const n=(yield h(e,t))[0];if(!n)continue;const r=yield d(e,n);if(!r)continue;const i=(0,u.toLocation)(t,void 0);p.push({location:i,symbol:r})}return{calls:p,symbol:o}}))}},9743:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});const s=n(4165),a=n(2180),c=n(2572),u=o(n(8212)),l=new s.Command("typescript-language-server").version(n(6922).i8).option("--stdio","use stdio").option("--node-ipc","use node-ipc").option("--log-level <logLevel>","A number indicating the log level (4 = log, 3 = info, 2 = warn, 1 = error). Defaults to `2`.").option("--socket <port>","use socket. example: --socket=5000").option("--tsserver-log-file <tsserverLogFile>","Specify a tsserver log file. example: --tsserver-log-file ts-logs.txt").option("--tsserver-log-verbosity <tsserverLogVerbosity>","Specify a tsserver log verbosity (terse, normal, verbose). Defaults to `normal`. example: --tsserver-log-verbosity verbose").option("--tsserver-path <path>",`Specify path to tsserver. example: --tsserver-path=${(0,a.getTsserverExecutable)()}`).parse(process.argv).opts();l.stdio||l.socket||l.nodeIpc||(console.error("Connection type required (stdio, node-ipc, socket). Refer to --help for more details."),process.exit(1)),l.tsserverLogFile&&!l.tsserverLogVerbosity&&(l.tsserverLogVerbosity="normal");let d=u.MessageType.Warning;l.logLevel&&(d=parseInt(l.logLevel,10),d&&(d<1||d>4)&&(console.error(`Invalid '--log-level ${d}'. Falling back to 'info' level.`),d=u.MessageType.Warning)),(0,c.createLspConnection)({tsserverPath:l.tsserverPath,tsserverLogFile:l.tsserverLogFile,tsserverLogVerbosity:l.tsserverLogVerbosity,showMessageLevel:d}).listen()},574:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Commands=void 0,t.Commands={APPLY_WORKSPACE_EDIT:"_typescript.applyWorkspaceEdit",APPLY_CODE_ACTION:"_typescript.applyCodeAction",APPLY_REFACTORING:"_typescript.applyRefactoring",ORGANIZE_IMPORTS:"_typescript.organizeImports",APPLY_RENAME_FILE:"_typescript.applyRenameFile",APPLY_COMPLETION_CODE_ACTION:"_typescript.applyCompletionCodeAction",SELECT_REFACTORING:"_typescript.selectRefactoring"}},8296:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.asResolvedCompletionItem=t.asCompletionItem=void 0;const s=o(n(8212)),a=n(3282),c=n(9661),u=n(574);function l(e){switch(e){case a.ScriptElementKind.primitiveType:case a.ScriptElementKind.keyword:return s.CompletionItemKind.Keyword;case a.ScriptElementKind.constElement:return s.CompletionItemKind.Constant;case a.ScriptElementKind.letElement:case a.ScriptElementKind.variableElement:case a.ScriptElementKind.localVariableElement:case a.ScriptElementKind.alias:return s.CompletionItemKind.Variable;case a.ScriptElementKind.memberVariableElement:case a.ScriptElementKind.memberGetAccessorElement:case a.ScriptElementKind.memberSetAccessorElement:return s.CompletionItemKind.Field;case a.ScriptElementKind.functionElement:return s.CompletionItemKind.Function;case a.ScriptElementKind.memberFunctionElement:case a.ScriptElementKind.constructSignatureElement:case a.ScriptElementKind.callSignatureElement:case a.ScriptElementKind.indexSignatureElement:return s.CompletionItemKind.Method;case a.ScriptElementKind.enumElement:return s.CompletionItemKind.Enum;case a.ScriptElementKind.moduleElement:case a.ScriptElementKind.externalModuleName:return s.CompletionItemKind.Module;case a.ScriptElementKind.classElement:case a.ScriptElementKind.typeElement:return s.CompletionItemKind.Class;case a.ScriptElementKind.interfaceElement:return s.CompletionItemKind.Interface;case a.ScriptElementKind.warning:case a.ScriptElementKind.scriptElement:return s.CompletionItemKind.File;case a.ScriptElementKind.directory:return s.CompletionItemKind.Folder;case a.ScriptElementKind.string:return s.CompletionItemKind.Constant}return s.CompletionItemKind.Property}function d(e){const t=[];switch(e){case a.ScriptElementKind.memberGetAccessorElement:case a.ScriptElementKind.memberSetAccessorElement:case a.ScriptElementKind.constructSignatureElement:case a.ScriptElementKind.callSignatureElement:case a.ScriptElementKind.indexSignatureElement:case a.ScriptElementKind.enumElement:case a.ScriptElementKind.interfaceElement:t.push(".");break;case a.ScriptElementKind.moduleElement:case a.ScriptElementKind.alias:case a.ScriptElementKind.constElement:case a.ScriptElementKind.letElement:case a.ScriptElementKind.variableElement:case a.ScriptElementKind.localVariableElement:case a.ScriptElementKind.memberVariableElement:case a.ScriptElementKind.classElement:case a.ScriptElementKind.functionElement:case a.ScriptElementKind.memberFunctionElement:t.push(".",","),t.push("(")}return 0===t.length?void 0:t}t.asCompletionItem=function(e,t,n,r){const i={label:e.name,kind:l(e.kind),sortText:e.sortText,commitCharacters:d(e.kind),data:{file:t,line:n.line+1,offset:n.character+1,entryNames:[e.source?{name:e.name,source:e.source}:e.name]}};e.isRecommended?i.preselect=!0:e.source&&(i.sortText="￿"+e.sortText),i.kind!==s.CompletionItemKind.Function&&i.kind!==s.CompletionItemKind.Method||(i.insertTextFormat=s.InsertTextFormat.Snippet);let o=e.insertText,a=e.replacementSpan&&(0,c.asRange)(e.replacementSpan);if(a&&a.start.line!==a.end.line&&(a=s.Range.create(a.start,r.getLineEnd(a.start.line))),o&&a&&"["===o[0]&&(i.filterText="."+i.label),e.kindModifiers){const t=new Set(e.kindModifiers.split(/,|\s+/g));t.has("optional")&&(o||(o=i.label),i.filterText||(i.filterText=i.label),i.label+="?"),t.has("deprecated")&&(i.tags=[s.CompletionItemTag.Deprecated])}return o&&a?i.textEdit=s.TextEdit.replace(a,o):i.insertText=o,i},t.asResolvedCompletionItem=function(e,t){return e.detail=function({displayParts:e,sourceDisplay:t,source:n}){const r=[],i=t||n;i&&r.push(`Auto import from '${(0,c.asPlainText)(i)}'`);const o=(0,c.asPlainText)(e);o&&r.push(o);return r.join("\n")}(t),e.documentation=(0,c.asDocumentation)(t),Object.assign(e,function(e,t){if(!e.codeActions||!e.codeActions.length)return{};const n=[];let r=!1;for(const i of e.codeActions)if(i.commands&&(r=!0),i.changes)for(const e of i.changes)if(e.fileName===t)for(const t of e.textChanges)n.push((0,c.toTextEdit)(t));else r=!0;let i;r&&(i={title:"",command:u.Commands.APPLY_COMPLETION_CODE_ACTION,arguments:[t,e.codeActions.map((e=>({commands:e.commands,description:e.description,changes:e.changes.filter((e=>e.fileName!==t))})))]});return{command:i,additionalTextEdits:n.length?n:void 0}}(t,e.data.file)),e}},8074:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DiagnosticEventQueue=void 0;const i=n(9661),o=r(n(5568));class s{constructor(e,t,n,r){this.uri=e,this.publishDiagnostics=t,this.documents=n,this.publishDiagnosticsCapabilities=r,this.diagnosticsPerKind=new Map,this.firePublishDiagnostics=(0,o.default)((()=>{const e=this.getDiagnostics();this.publishDiagnostics({uri:this.uri,diagnostics:e})}),50)}update(e,t){this.diagnosticsPerKind.set(e,t),this.firePublishDiagnostics()}getDiagnostics(){const e=[];for(const t of this.diagnosticsPerKind.values())for(const n of t)e.push((0,i.toDiagnostic)(n,this.documents,this.publishDiagnosticsCapabilities));return e}}t.DiagnosticEventQueue=class{constructor(e,t,n,r){this.publishDiagnostics=e,this.documents=t,this.publishDiagnosticsCapabilities=n,this.logger=r,this.diagnostics=new Map}updateDiagnostics(e,t){if(!t.body)return void this.logger.error(`Received empty ${t.event} diagnostics.`);const{file:n}=t.body,r=(0,i.pathToUri)(n,this.documents),o=this.diagnostics.get(r)||new s(r,this.publishDiagnostics,this.documents,this.publishDiagnosticsCapabilities);o.update(e,t.body.diagnostics),this.diagnostics.set(r,o)}}},5053:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.shouldIncludeEntry=t.collectSymbolInformation=t.collectDocumentSymbols=void 0;const r=n(9661),i=n(3282);function o(e,t,n){let i=s(e);for(const s of e.spans){const a=(0,r.asRange)(s);if(!r.Range.intersection(n,a))continue;const c=[];if(e.childItems)for(const t of e.childItems)if(t.spans.some((e=>!!r.Range.intersection(a,(0,r.asRange)(e))))){const e=o(t,c,a);i=i||e}let u=a;if(e.nameSpan){const t=(0,r.asRange)(e.nameSpan);r.Range.intersection(a,t)&&(u=t)}i&&t.push({name:e.text,detail:"",kind:(0,r.toSymbolKind)(e.kind),range:a,selectionRange:u,children:c})}return i}function s(e){return e.kind!==i.ScriptElementKind.alias&&!(!e.text||"<function>"===e.text||"<class>"===e.text)}t.collectDocumentSymbols=function(e,t){return o(e,t,{start:(0,r.asRange)(e.spans[0]).start,end:(0,r.asRange)(e.spans[e.spans.length-1]).end})},t.collectSymbolInformation=function e(t,n,i,o){let a=s(n);const c=n.text;for(const s of n.spans){const u=(0,r.asRange)(s),l=[];if(n.childItems)for(const i of n.childItems)if(i.spans.some((e=>!!r.Range.intersection(u,(0,r.asRange)(e))))){const n=e(t,i,l,c);a=a||n}a&&(i.push({name:c,kind:(0,r.toSymbolKind)(n.kind),location:{uri:t,range:u},containerName:o}),i.push(...l))}return a},t.shouldIncludeEntry=s},5450:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.LspDocuments=t.LspDocument=void 0;const s=o(n(8212)),a=n(1040);class c{constructor(e){const{uri:t,languageId:n,version:r,text:i}=e;this.document=a.TextDocument.create(t,n,r,i)}get uri(){return this.document.uri}get languageId(){return this.document.languageId}get version(){return this.document.version}getText(e){return this.document.getText(e)}positionAt(e){return this.document.positionAt(e)}offsetAt(e){return this.document.offsetAt(e)}get lineCount(){return this.document.lineCount}getLine(e){const t=this.getLineRange(e);return this.getText(t)}getLineRange(e){const t=this.getLineStart(e),n=this.getLineEnd(e);return s.Range.create(t,n)}getLineEnd(e){const t=this.getLineOffset(e+1);return this.positionAt(t-1)}getLineOffset(e){const t=this.getLineStart(e);return this.offsetAt(t)}getLineStart(e){return s.Position.create(e,0)}applyEdit(e,t){const n=this.getText();let r=t.text;if(s.TextDocumentContentChangeEvent.isIncremental(t)){const e=this.offsetAt(t.range.start),i=this.offsetAt(t.range.end);r=n.substr(0,e)+t.text+n.substr(i)}this.document=a.TextDocument.create(this.uri,this.languageId,e,r)}}t.LspDocument=c;t.LspDocuments=class{constructor(){this._files=[],this.documents=new Map}get files(){return this._files}get(e){const t=this.documents.get(e);if(t)return this.files[0]!==e&&(this._files.splice(this._files.indexOf(e),1),this._files.unshift(e)),t}open(e,t){return!this.documents.has(e)&&(this.documents.set(e,new c(t)),this._files.unshift(e),!0)}close(e){const t=this.documents.get(e);if(t)return this.documents.delete(e),this._files.splice(this._files.indexOf(e),1),t}}},2058:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.asSignatureHelp=void 0;const r=n(9661);function i(e){const t=e.items[e.selectedItemIndex];return t&&t.isVariadic?Math.min(e.argumentIndex,t.parameters.length-1):e.argumentIndex}function o(e){const t=e.parameters.map(s),n={label:(0,r.asPlainText)(e.prefixDisplayParts),documentation:(0,r.asDocumentation)({documentation:e.documentation,tags:e.tags.filter((e=>"param"!==e.name))}),parameters:t};return n.label+=t.map((e=>e.label)).join((0,r.asPlainText)(e.separatorDisplayParts)),n.label+=(0,r.asPlainText)(e.suffixDisplayParts),n}function s(e){return{label:(0,r.asPlainText)(e.displayParts),documentation:(0,r.asDocumentation)(e)}}t.asSignatureHelp=function(e){return{activeSignature:e.selectedItemIndex,activeParameter:i(e),signatures:e.items.map(o)}}},4440:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.PrefixingLogger=t.ConsoleLogger=t.LspClientLogger=void 0;const s=o(n(8212));t.LspClientLogger=class{constructor(e,t){this.client=e,this.level=t}sendMessage(e,t){if(this.level>=e){const n=t.map((e=>"object"==typeof e?JSON.stringify(e,null,2):e)).join(" ");this.client.logMessage({type:e,message:n})}}error(...e){this.sendMessage(s.MessageType.Error,e)}warn(...e){this.sendMessage(s.MessageType.Warning,e)}info(...e){this.sendMessage(s.MessageType.Info,e)}log(...e){this.sendMessage(s.MessageType.Log,e)}};t.ConsoleLogger=class{constructor(e){this.isLogEnabled=e}toStrings(...e){return e.map((e=>JSON.stringify(e,null,2)))}error(...e){console.error(...this.toStrings(e))}warn(...e){console.warn(...this.toStrings(e))}info(...e){console.info(...this.toStrings(e))}log(...e){this.isLogEnabled&&console.log(...this.toStrings(e))}};t.PrefixingLogger=class{constructor(e,t){this.logger=e,this.prefix=t}error(...e){this.logger.error(this.prefix,...e)}warn(...e){this.logger.warn(this.prefix,...e)}info(...e){this.logger.info(this.prefix,...e)}log(...e){this.logger.log(this.prefix,...e)}}},9429:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},s=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.LspClientImpl=void 0;const a=o(n(8212)),c=n(1178);t.LspClientImpl=class{constructor(e){this.connection=e}publishDiagnostics(e){this.connection.sendNotification(a.PublishDiagnosticsNotification.type,e)}showMessage(e){this.connection.sendNotification(a.ShowMessageNotification.type,e)}logMessage(e){this.connection.sendNotification(a.LogMessageNotification.type,e)}telemetry(e){this.connection.sendNotification(a.TelemetryEventNotification.type,e)}applyWorkspaceEdit(e){return s(this,void 0,void 0,(function*(){return this.connection.sendRequest(a.ApplyWorkspaceEditRequest.type,e)}))}rename(e){return s(this,void 0,void 0,(function*(){return this.connection.sendRequest(c.TypeScriptRenameRequest.type,e)}))}}},2572:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.createLspConnection=void 0;const s=o(n(8212)),a=o(n(6160)),c=o(n(4321)),u=n(4440),l=n(9250),d=n(9429);t.createLspConnection=function(e){const t=s.createConnection(s.ProposedFeatures.all),n=new d.LspClientImpl(t),r=new u.LspClientLogger(n,e.showMessageLevel),i=new l.LspServer({logger:r,lspClient:n,tsserverPath:e.tsserverPath,tsserverLogFile:e.tsserverLogFile,tsserverLogVerbosity:e.tsserverLogVerbosity});return t.onInitialize(i.initialize.bind(i)),t.onDidChangeConfiguration(i.didChangeConfiguration.bind(i)),t.onDidOpenTextDocument(i.didOpenTextDocument.bind(i)),t.onDidSaveTextDocument(i.didSaveTextDocument.bind(i)),t.onDidCloseTextDocument(i.didCloseTextDocument.bind(i)),t.onDidChangeTextDocument(i.didChangeTextDocument.bind(i)),t.onCodeAction(i.codeAction.bind(i)),t.onCompletion(i.completion.bind(i)),t.onCompletionResolve(i.completionResolve.bind(i)),t.onDefinition(i.definition.bind(i)),t.onImplementation(i.implementation.bind(i)),t.onTypeDefinition(i.typeDefinition.bind(i)),t.onDocumentFormatting(i.documentFormatting.bind(i)),t.onDocumentRangeFormatting(i.documentRangeFormatting.bind(i)),t.onDocumentHighlight(i.documentHighlight.bind(i)),t.onDocumentSymbol(i.documentSymbol.bind(i)),t.onExecuteCommand(i.executeCommand.bind(i)),t.onHover(i.hover.bind(i)),t.onReferences(i.references.bind(i)),t.onRenameRequest(i.rename.bind(i)),t.onSignatureHelp(i.signatureHelp.bind(i)),t.onWorkspaceSymbol(i.workspaceSymbol.bind(i)),t.onFoldingRanges(i.foldingRanges.bind(i)),t.onRequest(a.CallsRequest.type,i.calls.bind(i)),t.onRequest(c.type,i.inlayHints.bind(i)),t}},6160:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.DefinitionSymbol=t.CallDirection=t.CallsRequest=void 0;const s=o(n(8212));!function(e){e.type=new s.RequestType("textDocument/calls")}(t.CallsRequest||(t.CallsRequest={})),function(e){e.Incoming="incoming",e.Outgoing="outgoing"}(t.CallDirection||(t.CallDirection={})),function(e){e.create=function(e,t){const{name:n,detail:r,kind:i,range:o,selectionRange:s}=t;return{name:n,detail:r,kind:i,location:{uri:e,range:o},selectionRange:s}}}(t.DefinitionSymbol||(t.DefinitionSymbol={}))},4321:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.type=void 0;const s=o(n(8212));t.type=new s.RequestType("typescript/inlayHints")},9250:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},s=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LspServer=void 0;const c=o(n(1017)),u=a(n(488)),l=o(n(8212)),d=o(n(6160)),h=o(n(5674)),f=o(n(5497)),p=n(8212),m=a(n(5568)),g=n(4440),y=n(4647),v=n(8074),_=n(1616),b=n(9661),S=n(2180),w=n(5450),E=n(8296),R=n(2058),x=n(574),C=n(6252),P=n(5362),T=n(4983),O=n(5053),k=n(4506);t.LspServer=class{constructor(e){this.options=e,this.documents=new w.LspDocuments,this.requestDiagnostics=(0,m.default)((()=>this.doRequestDiagnostics()),200),this.logger=new g.PrefixingLogger(e.logger,"[lspserver]"),this.workspaceConfiguration={}}closeAll(){for(const e of[...this.documents.files])this.closeDocument(e)}findTsserverPath(){if(this.options.tsserverPath)return this.options.tsserverPath;const e=c.join("typescript","lib","tsserver.js"),t=(0,_.findPathToYarnSdk)(this.rootPath(),e);if(t)return t;const n=(0,_.findPathToModule)(this.rootPath(),e);if(n)return n;if(f.sync((0,S.getTsserverExecutable)()))return(0,S.getTsserverExecutable)();const r=(0,_.findPathToModule)(__dirname,e);if(!r)throw Error(`Couldn't find '${(0,S.getTsserverExecutable)()}' executable or 'tsserver.js' module`);return r}initialize(e){var t;return s(this,void 0,void 0,(function*(){this.logger.log("initialize",e),this.initializeParams=e,this.diagnosticQueue=new v.DiagnosticEventQueue((e=>this.options.lspClient.publishDiagnostics(e)),this.documents,null===(t=this.initializeParams.capabilities.textDocument)||void 0===t?void 0:t.publishDiagnostics,this.logger);const n=this.initializeParams.initializationOptions||{},{hostInfo:r,maxTsServerMemory:i}=n,{logVerbosity:o,plugins:s,preferences:a}={logVerbosity:n.logVerbosity||this.options.tsserverLogVerbosity,plugins:n.plugins||[],preferences:Object.assign({includeCompletionsForModuleExports:!0,includeCompletionsWithInsertText:!0},n.preferences)},c=this.getLogFile(o),u=[],d=[];for(const e of s)u.push(e.name),d.push(e.location);const h=this.findTsserverPath();this.tspClient=new y.TspClient({tsserverPath:h,logFile:c,logVerbosity:o,maxTsServerMemory:i,globalPlugins:u,pluginProbeLocations:d,logger:this.options.logger,onEvent:this.onTsEvent.bind(this)}),this.tspClient.start(),this.tspClient.request("configure",Object.assign(Object.assign({},r?{hostInfo:r}:{}),{preferences:Object.assign({allowTextChangesInNewFiles:!0},a)})),this.tspClient.request("compilerOptionsForInferredProjects",{options:{module:"CommonJS",target:"ES2016",jsx:"Preserve",allowJs:!0,allowSyntheticDefaultImports:!0,allowNonTsExtensions:!0}});const f=c&&(0,b.pathToUri)(c,void 0);return this.initializeResult={capabilities:{textDocumentSync:l.TextDocumentSyncKind.Incremental,completionProvider:{triggerCharacters:[".",'"',"'","/","@","<"],resolveProvider:!0},codeActionProvider:!0,definitionProvider:!0,documentFormattingProvider:!0,documentRangeFormattingProvider:!0,documentHighlightProvider:!0,documentSymbolProvider:!0,executeCommandProvider:{commands:[x.Commands.APPLY_WORKSPACE_EDIT,x.Commands.APPLY_CODE_ACTION,x.Commands.APPLY_REFACTORING,x.Commands.ORGANIZE_IMPORTS,x.Commands.APPLY_RENAME_FILE]},hoverProvider:!0,renameProvider:!0,referencesProvider:!0,signatureHelpProvider:{triggerCharacters:["(",",","<"]},workspaceSymbolProvider:!0,implementationProvider:!0,typeDefinitionProvider:!0,foldingRangeProvider:!0},logFileUri:f},this.initializeResult.capabilities.callsProvider=!0,this.logger.log("onInitialize result",this.initializeResult),this.initializeResult}))}getLogFile(e){if(void 0===e||"off"===e)return;const t=this.doGetLogFile();return t?(h.ensureFileSync(t),t):u.default.file({name:"tsserver.log"})}doGetLogFile(){return process.env.TSSERVER_LOG_FILE?process.env.TSSERVER_LOG_FILE:this.options.tsserverLogFile?this.options.tsserverLogFile:this.initializeParams.rootUri?c.join((0,b.uriToPath)(this.initializeParams.rootUri),".log/tsserver.log"):this.initializeParams.rootPath?c.join(this.initializeParams.rootPath,".log/tsserver.log"):void 0}didChangeConfiguration(e){this.workspaceConfiguration=e.settings||{}}getWorkspacePreferencesForDocument(e){var t;const n=this.documents.get(e);if(!n)return{};const r=n.languageId.startsWith("typescript")?"typescript":"javascript";return null!==(t=this.workspaceConfiguration[r])&&void 0!==t?t:{}}interuptDiagnostics(e){if(!this.diagnosticsTokenSource)return e();this.cancelDiagnostics();const t=e();return this.requestDiagnostics(),t}doRequestDiagnostics(){return s(this,void 0,void 0,(function*(){this.cancelDiagnostics();const e=new l.CancellationTokenSource;this.diagnosticsTokenSource=e;const{files:t}=this.documents;try{return yield this.tspClient.request("geterr",{delay:0,files:t},this.diagnosticsTokenSource.token)}finally{this.diagnosticsTokenSource===e&&(this.diagnosticsTokenSource=void 0)}}))}cancelDiagnostics(){this.diagnosticsTokenSource&&(this.diagnosticsTokenSource=void 0)}didOpenTextDocument(e){const t=(0,b.uriToPath)(e.textDocument.uri);this.logger.log("onDidOpenTextDocument",e,t),t&&(this.documents.open(t,e.textDocument)?(this.tspClient.notify("open",{file:t,fileContent:e.textDocument.text,scriptKindName:this.getScriptKindName(e.textDocument.languageId),projectRootPath:this.rootPath()}),this.requestDiagnostics()):(this.logger.log(`Cannot open already opened doc '${e.textDocument.uri}'.`),this.didChangeTextDocument({textDocument:e.textDocument,contentChanges:[{text:e.textDocument.text}]})))}getScriptKindName(e){switch(e){case"typescript":return"TS";case"typescriptreact":return"TSX";case"javascript":return"JS";case"javascriptreact":return"JSX"}}didCloseTextDocument(e){const t=(0,b.uriToPath)(e.textDocument.uri);this.logger.log("onDidCloseTextDocument",e,t),t&&this.closeDocument(t)}closeDocument(e){const t=this.documents.close(e);t&&(this.tspClient.notify("close",{file:e}),this.options.lspClient.publishDiagnostics({uri:t.uri,diagnostics:[]}))}didChangeTextDocument(e){const{textDocument:t}=e,n=(0,b.uriToPath)(t.uri);if(this.logger.log("onDidChangeTextDocument",e,n),!n)return;const r=this.documents.get(n);if(!r)throw this.logger.error("Received change on non-opened document "+t.uri),new Error("Received change on non-opened document "+t.uri);if(null===t.version)throw new Error(`Received document change event for ${t.uri} without valid version identifier`);for(const i of e.contentChanges){let e=0,o=0,s=0,a=0;if(l.TextDocumentContentChangeEvent.isIncremental(i))e=i.range.start.line+1,o=i.range.start.character+1,s=i.range.end.line+1,a=i.range.end.character+1;else{e=1,o=1;const t=r.positionAt(r.getText().length);s=t.line+1,a=t.character+1}this.tspClient.notify("change",{file:n,line:e,offset:o,endLine:s,endOffset:a,insertString:i.text}),r.applyEdit(t.version,i)}this.requestDiagnostics()}didSaveTextDocument(e){}definition(e){return s(this,void 0,void 0,(function*(){return this.getDefinition({type:"definition",params:e})}))}implementation(e){return s(this,void 0,void 0,(function*(){return this.getDefinition({type:"implementation",params:e})}))}typeDefinition(e){return s(this,void 0,void 0,(function*(){return this.getDefinition({type:"typeDefinition",params:e})}))}getDefinition({type:e,params:t}){return s(this,void 0,void 0,(function*(){const n=(0,b.uriToPath)(t.textDocument.uri);if(this.logger.log(e,t,n),!n)return[];const r=yield this.tspClient.request(e,{file:n,line:t.position.line+1,offset:t.position.character+1});return r.body?r.body.map((e=>(0,b.toLocation)(e,this.documents))):[]}))}documentSymbol(e){return s(this,void 0,void 0,(function*(){const t=(0,b.uriToPath)(e.textDocument.uri);if(this.logger.log("symbol",e,t),!t)return[];const n=(yield this.tspClient.request("navtree",{file:t})).body;if(!n||!n.childItems)return[];if(this.supportHierarchicalDocumentSymbol){const e=[];for(const t of n.childItems)(0,O.collectDocumentSymbols)(t,e);return e}const r=[];for(const t of n.childItems)(0,O.collectSymbolInformation)(e.textDocument.uri,t,r);return r}))}get supportHierarchicalDocumentSymbol(){const e=this.initializeParams.capabilities.textDocument,t=e&&e.documentSymbol;return!!t&&!!t.hierarchicalDocumentSymbolSupport}completion(e){return s(this,void 0,void 0,(function*(){const t=(0,b.uriToPath)(e.textDocument.uri);if(this.logger.log("completion",e,t),!t)return l.CompletionList.create([]);const n=this.documents.get(t);if(!n)throw new Error("The document should be opened for completion, file: "+t);try{const r=yield this.interuptDiagnostics((()=>this.tspClient.request("completionInfo",{file:t,line:e.position.line+1,offset:e.position.character+1}))),{body:i}=r,o=(i?i.entries:[]).filter((e=>"warning"!==e.kind)).map((r=>(0,E.asCompletionItem)(r,t,e.position,n)));return l.CompletionList.create(o,null==i?void 0:i.isIncomplete)}catch(e){if("No content available."===e.message)return this.logger.info("No content was available for completion request"),null;throw e}}))}completionResolve(e){return s(this,void 0,void 0,(function*(){this.logger.log("completion/resolve",e);const{body:t}=yield this.interuptDiagnostics((()=>this.tspClient.request("completionEntryDetails",e.data))),n=t&&t.length&&t[0];return n?(0,E.asResolvedCompletionItem)(e,n):e}))}hover(e){return s(this,void 0,void 0,(function*(){const t=(0,b.uriToPath)(e.textDocument.uri);if(this.logger.log("hover",e,t),!t)return{contents:[]};const n=yield this.interuptDiagnostics((()=>this.getQuickInfo(t,e.position)));if(!n||!n.body)return{contents:[]};const r=(0,b.asRange)(n.body),i=[{language:"typescript",value:n.body.displayString}],o=(0,b.asTagsDocumentation)(n.body.tags),s=(0,b.asPlainText)(n.body.documentation);return i.push(s+(o?"\n\n"+o:"")),{contents:i,range:r}}))}getQuickInfo(e,t){return s(this,void 0,void 0,(function*(){try{return yield this.tspClient.request("quickinfo",{file:e,line:t.line+1,offset:t.character+1})}catch(e){return}}))}rename(e){return s(this,void 0,void 0,(function*(){const t=(0,b.uriToPath)(e.textDocument.uri);if(this.logger.log("onRename",e,t),!t)return;const n=yield this.tspClient.request("rename",{file:t,line:e.position.line+1,offset:e.position.character+1});if(!n.body||!n.body.info.canRename||0===n.body.locs.length)return;const r={changes:{}};return n.body.locs.forEach((t=>{const n=(0,b.pathToUri)(t.file,this.documents),i=r.changes[n]||(r.changes[n]=[]);t.locs.forEach((t=>{i.push({newText:e.newName,range:{start:(0,b.toPosition)(t.start),end:(0,b.toPosition)(t.end)}})}))})),r}))}references(e){return s(this,void 0,void 0,(function*(){const t=(0,b.uriToPath)(e.textDocument.uri);if(this.logger.log("onReferences",e,t),!t)return[];const n=yield this.tspClient.request("references",{file:t,line:e.position.line+1,offset:e.position.character+1});return n.body?n.body.refs.map((e=>(0,b.toLocation)(e,this.documents))):[]}))}documentFormatting(e){return s(this,void 0,void 0,(function*(){const t=(0,b.uriToPath)(e.textDocument.uri);if(this.logger.log("documentFormatting",e,t),!t)return[];const n=this.getFormattingOptions(t,e.options);yield this.tspClient.request("configure",{formatOptions:n});const r=yield this.tspClient.request("format",{file:t,line:1,offset:1,endLine:Number.MAX_SAFE_INTEGER,endOffset:Number.MAX_SAFE_INTEGER,options:n});return r.body?r.body.map((e=>(0,b.toTextEdit)(e))):[]}))}documentRangeFormatting(e){return s(this,void 0,void 0,(function*(){const t=(0,b.uriToPath)(e.textDocument.uri);if(this.logger.log("documentRangeFormatting",e,t),!t)return[];const n=this.getFormattingOptions(t,e.options);yield this.tspClient.request("configure",{formatOptions:n});const r=yield this.tspClient.request("format",{file:t,line:e.range.start.line+1,offset:e.range.start.character+1,endLine:e.range.end.line+1,endOffset:e.range.end.character+1,options:n});return r.body?r.body.map((e=>(0,b.toTextEdit)(e))):[]}))}getFormattingOptions(e,t){const n=this.getWorkspacePreferencesForDocument(e);let r=Object.assign(Object.assign({},(null==n?void 0:n.format)||{}),t);void 0===r.convertTabsToSpaces&&(r.convertTabsToSpaces=t.insertSpaces),void 0===r.indentSize&&(r.indentSize=t.tabSize);try{r=JSON.parse(h.readFileSync(this.rootPath()+"/tsfmt.json","utf-8"))}catch(e){this.logger.log(`No formatting options found ${e}`)}return r}signatureHelp(e){return s(this,void 0,void 0,(function*(){const t=(0,b.uriToPath)(e.textDocument.uri);if(this.logger.log("signatureHelp",e,t),!t)return;const n=yield this.interuptDiagnostics((()=>this.getSignatureHelp(t,e.position)));return n&&n.body?(0,R.asSignatureHelp)(n.body):void 0}))}getSignatureHelp(e,t){return s(this,void 0,void 0,(function*(){try{return yield this.tspClient.request("signatureHelp",{file:e,line:t.line+1,offset:t.character+1})}catch(e){return}}))}codeAction(e){return s(this,void 0,void 0,(function*(){const t=(0,b.uriToPath)(e.textDocument.uri);if(this.logger.log("codeAction",e,t),!t)return[];const n=(0,b.toFileRangeRequestArgs)(t,e.range),r=[];if(!e.context.only||e.context.only.includes(p.CodeActionKind.QuickFix)){const t=e.context.diagnostics.map((e=>Number(e.code)));r.push(...(0,C.provideQuickFix)(yield this.getCodeFixes(Object.assign(Object.assign({},n),{errorCodes:t})),this.documents))}return e.context.only&&!e.context.only.includes(p.CodeActionKind.Refactor)||r.push(...(0,P.provideRefactors)(yield this.getRefactors(n),n)),e.context.only&&e.context.only.includes(p.CodeActionKind.SourceOrganizeImports)&&r.push(...(0,T.provideOrganizeImports)(yield this.getOrganizeImports({scope:{type:"file",args:n}}))),r}))}getCodeFixes(e){return s(this,void 0,void 0,(function*(){try{return yield this.tspClient.request("getCodeFixes",e)}catch(e){return}}))}getRefactors(e){return s(this,void 0,void 0,(function*(){try{return yield this.tspClient.request("getApplicableRefactors",e)}catch(e){return}}))}getOrganizeImports(e){return s(this,void 0,void 0,(function*(){try{return yield this.tspClient.request("organizeImports",e)}catch(e){return}}))}executeCommand(e){return s(this,void 0,void 0,(function*(){if(this.logger.log("executeCommand",e),e.command===x.Commands.APPLY_WORKSPACE_EDIT&&e.arguments){const t=e.arguments[0];yield this.options.lspClient.applyWorkspaceEdit({edit:t})}else if(e.command===x.Commands.APPLY_CODE_ACTION&&e.arguments){const t=e.arguments[0];if(!(yield this.applyFileCodeEdits(t.changes)))return;if(t.commands&&t.commands.length)for(const e of t.commands)yield this.tspClient.request("applyCodeActionCommand",{command:e})}else if(e.command===x.Commands.APPLY_REFACTORING&&e.arguments){const t=e.arguments[0],{body:n}=yield this.tspClient.request("getEditsForRefactor",t);if(!n||!n.edits.length)return;for(const e of n.edits)yield h.ensureFile(e.fileName);if(!(yield this.applyFileCodeEdits(n.edits)))return;const r=n.renameLocation;r&&(yield this.options.lspClient.rename({textDocument:{uri:(0,b.pathToUri)(t.file,this.documents)},position:(0,b.toPosition)(r)}))}else if(e.command===x.Commands.ORGANIZE_IMPORTS&&e.arguments){const t=e.arguments[0],{body:n}=yield this.tspClient.request("organizeImports",{scope:{type:"file",args:{file:t}}});yield this.applyFileCodeEdits(n)}else if(e.command===x.Commands.APPLY_RENAME_FILE&&e.arguments){const{sourceUri:t,targetUri:n}=e.arguments[0];this.applyRenameFile(t,n)}else this.logger.error(`Unknown command ${e.command}.`)}))}applyFileCodeEdits(e){return s(this,void 0,void 0,(function*(){if(!e.length)return!1;const t={};for(const n of e)t[(0,b.pathToUri)(n.fileName,this.documents)]=n.textChanges.map(b.toTextEdit);const{applied:n}=yield this.options.lspClient.applyWorkspaceEdit({edit:{changes:t}});return n}))}applyRenameFile(e,t){return s(this,void 0,void 0,(function*(){const n=yield this.getEditsForFileRename(e,t);this.applyFileCodeEdits(n)}))}getEditsForFileRename(e,t){return s(this,void 0,void 0,(function*(){const n=(0,b.uriToPath)(t),r=(0,b.uriToPath)(e);if(!n||!r)return[];try{const{body:e}=yield this.tspClient.request("getEditsForFileRename",{oldFilePath:r,newFilePath:n});return e}catch(e){return[]}}))}documentHighlight(e){return s(this,void 0,void 0,(function*(){const t=(0,b.uriToPath)(e.textDocument.uri);if(this.logger.log("documentHighlight",e,t),!t)return[];let n;try{n=yield this.tspClient.request("documentHighlights",{file:t,line:e.position.line+1,offset:e.position.character+1,filesToSearch:[t]})}catch(e){return[]}if(!n.body)return[];const r=[];for(const e of n.body)if((0,b.uriToPath)((0,b.pathToUri)(e.file,this.documents))===t){const t=(0,b.toDocumentHighlight)(e);r.push(...t)}return r}))}rootPath(){return this.initializeParams.rootUri?(0,b.uriToPath)(this.initializeParams.rootUri):this.initializeParams.rootPath}lastFileOrDummy(){return this.documents.files[0]||this.rootPath()}workspaceSymbol(e){return s(this,void 0,void 0,(function*(){const t=yield this.tspClient.request("navto",{file:this.lastFileOrDummy(),searchValue:e.query});return t.body?t.body.map((e=>({location:{uri:(0,b.pathToUri)(e.file,this.documents),range:{start:(0,b.toPosition)(e.start),end:(0,b.toPosition)(e.end)}},kind:(0,b.toSymbolKind)(e.kind),name:e.name}))):[]}))}foldingRanges(e){return s(this,void 0,void 0,(function*(){const t=(0,b.uriToPath)(e.textDocument.uri);if(this.logger.log("foldingRanges",e,t),!t)return;const n=this.documents.get(t);if(!n)throw new Error("The document should be opened for foldingRanges', file: "+t);const{body:r}=yield this.tspClient.request("getOutliningSpans",{file:t});if(!r)return;const i=[];for(const e of r){const t=this.asFoldingRange(e,n);t&&i.push(t)}return i}))}asFoldingRange(e,t){const n=(0,b.asRange)(e.textSpan),r=this.asFoldingRangeKind(e);if("comment"===e.kind){if(t.getLine(n.start.line).match(/\/\/\s*#endregion/gi))return}return{startLine:n.start.line,endLine:n.end.character>0&&"}"===t.getText(l.Range.create(l.Position.create(n.end.line,n.end.character-1),n.end))?Math.max(n.end.line-1,n.start.line):n.end.line,kind:r}}asFoldingRangeKind(e){switch(e.kind){case"comment":return l.FoldingRangeKind.Comment;case"region":return l.FoldingRangeKind.Region;case"imports":return l.FoldingRangeKind.Imports;default:return}}onTsEvent(e){var t;"semanticDiag"===e.event||"syntaxDiag"===e.event||"suggestionDiag"===e.event?null===(t=this.diagnosticQueue)||void 0===t||t.updateDiagnostics(e.event,e):this.logger.log("Ignored event",{event:e.event})}calls(e){return s(this,void 0,void 0,(function*(){let t={calls:[]};const n=(0,b.uriToPath)(e.textDocument.uri);if(this.logger.log("calls",e,n),!n)return t;if(e.direction===d.CallDirection.Outgoing){const n=e=>this.documents.get(e);t=yield(0,k.computeCallees)(this.tspClient,e,n)}else t=yield(0,k.computeCallers)(this.tspClient,e);return t}))}inlayHints(e){var t,n,r,i,o,a;return s(this,void 0,void 0,(function*(){const s=(0,b.uriToPath)(e.textDocument.uri);if(this.logger.log("inlayHints",e,s),!s)return{inlayHints:[]};const c=this.getInlayHintsOptions(s);this.tspClient.request("configure",{preferences:c});const u=this.documents.get(s);if(!u)return{inlayHints:[]};const l=u.offsetAt(null!==(n=null===(t=e.range)||void 0===t?void 0:t.start)&&void 0!==n?n:{line:0,character:0}),d=u.offsetAt(null!==(i=null===(r=e.range)||void 0===r?void 0:r.end)&&void 0!==i?i:{line:u.lineCount+1,character:0});try{const e=yield this.tspClient.request("provideInlayHints",{file:s,start:l,length:d-l});return{inlayHints:null!==(a=null===(o=e.body)||void 0===o?void 0:o.map((e=>({text:e.text,position:(0,b.toPosition)(e.position),whitespaceAfter:e.whitespaceAfter,whitespaceBefore:e.whitespaceBefore,kind:e.kind}))))&&void 0!==a?a:[]}}catch(e){return{inlayHints:[]}}}))}getInlayHintsOptions(e){var t,n;const r=this.getWorkspacePreferencesForDocument(e),i=(null===(t=this.initializeParams.initializationOptions)||void 0===t?void 0:t.preferences)||{};return Object.assign(Object.assign({},i),null!==(n=r.inlayHints)&&void 0!==n?n:{})}}},1616:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.findPathToYarnSdk=t.findPathToModule=void 0;const s=o(n(7147)),a=o(n(1017));t.findPathToModule=function(e,t){try{return n(7506).resolve(t,{paths:[e]})}catch(e){return}},t.findPathToYarnSdk=function e(t,n){if(s.statSync(t).isDirectory()){const e=a.resolve(t,".yarn","sdks",n);if(s.existsSync(e))return e}const r=a.resolve(t,"..");if(r!==t)return e(r,n)}},4983:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.provideOrganizeImports=void 0;const s=o(n(8212)),a=n(574),c=n(9661),u=n(8212);t.provideOrganizeImports=function(e){return e?e.body.map((e=>s.CodeAction.create("Organize imports",s.Command.create("",a.Commands.ORGANIZE_IMPORTS,(0,c.normalizeFileNameToFsPath)(e.fileName)),u.CodeActionKind.SourceOrganizeImports))):[]}},9661:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Range=t.asPlainText=t.asTagBodyText=t.asTagDocumentation=t.asTagsDocumentation=t.asDocumentation=t.asRange=t.toDocumentHighlight=t.toTextDocumentEdit=t.toTextEdit=t.toDiagnostic=t.toSymbolKind=t.toFileRangeRequestArgs=t.toLocation=t.toPosition=t.normalizeFileNameToFsPath=t.pathToUri=t.uriToPath=void 0;const a=o(n(8212)),c=s(n(5679));function u(e,t){const n=function(e){return e.startsWith("zipfile:")?c.default.parse(e):c.default.file(e)}(e),r=t&&t.get(n.fsPath);return r?r.uri:n.toString()}function l(e,t){const n=c.default.file(e),r=t&&t.get(n.fsPath);return r?r.version:0}function d(e){return{line:e.line-1,character:e.offset-1}}function h(e,t){return{uri:u(e.file,t),range:{start:d(e.start),end:d(e.end)}}}t.uriToPath=function(e){const t=c.default.parse(e);if("file"===t.scheme)return t.fsPath},t.pathToUri=u,t.normalizeFileNameToFsPath=function(e){return c.default.file(e).fsPath},t.toPosition=d,t.toLocation=h,t.toFileRangeRequestArgs=function(e,t){return{file:e,startLine:t.start.line+1,startOffset:t.start.character+1,endLine:t.end.line+1,endOffset:t.end.character+1}};const f={"enum member":a.SymbolKind.Constant,"JSX attribute":a.SymbolKind.Property,"local class":a.SymbolKind.Class,"local function":a.SymbolKind.Function,"local var":a.SymbolKind.Variable,"type parameter":a.SymbolKind.Variable,alias:a.SymbolKind.Variable,class:a.SymbolKind.Class,const:a.SymbolKind.Constant,constructor:a.SymbolKind.Constructor,enum:a.SymbolKind.Enum,field:a.SymbolKind.Field,file:a.SymbolKind.File,function:a.SymbolKind.Function,getter:a.SymbolKind.Method,interface:a.SymbolKind.Interface,let:a.SymbolKind.Variable,method:a.SymbolKind.Method,module:a.SymbolKind.Module,parameter:a.SymbolKind.Variable,property:a.SymbolKind.Property,setter:a.SymbolKind.Method,var:a.SymbolKind.Variable};function p(e){switch(e){default:return a.DiagnosticSeverity.Error;case"warning":return a.DiagnosticSeverity.Warning;case"suggestion":return a.DiagnosticSeverity.Hint}}function m(e,t){if(!e)return;const n=[];for(const r of e){const e=r.span;e&&n.push(a.DiagnosticRelatedInformation.create(h(e,t),r.message))}return n}function g(e){return{range:{start:d(e.start),end:d(e.end)},newText:e.newText}}var y,v;function _(e){switch(e){case y.definition:return a.DocumentHighlightKind.Write;case y.reference:case y.writtenReference:return a.DocumentHighlightKind.Read;default:return a.DocumentHighlightKind.Text}}function b(e){return e.map(S).join("  \n\n")}function S(e){switch(e.name){case"param":{if(!e.text)break;const t=E(e.text).split(/^([\w.]+)\s*-?\s*/);if(t&&3===t.length){const n=t[1],r=t[2],i=`*@${e.name}* \`${n}\``;return r?i+(r.match(/\r\n|\n/g)?"  \n"+r:` — ${r}`):i}break}}const t=`*@${e.name}*`,n=w(e);return n?t+(n.match(/\r\n|\n/g)?"  \n"+n:` — ${n}`):t}function w(e){if(!e.text)return;const t=E(e.text);switch(e.name){case"example":case"default":return t.match(/^\s*[~`]{3}/g)?t:"```\n"+t+"\n```"}return t}function E(e){return"string"==typeof e?e:e.map((e=>e.text)).join("")}t.toSymbolKind=function(e){return f[e]||a.SymbolKind.Variable},t.toDiagnostic=function(e,t,n){const r={range:{start:d(e.start),end:d(e.end)},message:e.text,severity:p(e.category),code:e.code,source:e.source||"typescript",relatedInformation:m(e.relatedInformation,t)};return(null==n?void 0:n.tagSupport)&&(r.tags=function(e){const t=[];e.reportsUnnecessary&&t.push(a.DiagnosticTag.Unnecessary);e.reportsDeprecated&&t.push(a.DiagnosticTag.Deprecated);return t}(e)),r},t.toTextEdit=g,t.toTextDocumentEdit=function(e,t){return{textDocument:{uri:u(e.fileName,t),version:l(e.fileName,t)},edits:e.textChanges.map((e=>g(e)))}},t.toDocumentHighlight=function(e){return e.highlightSpans.map((e=>({kind:_(e.kind),range:{start:d(e.start),end:d(e.end)}})))},function(e){e.none="none",e.definition="definition",e.reference="reference",e.writtenReference="writtenReference"}(y||(y={})),t.asRange=function(e){return a.Range.create(Math.max(0,e.start.line-1),Math.max(0,e.start.offset-1),Math.max(0,e.end.line-1),Math.max(0,e.end.offset-1))},t.asDocumentation=function(e){let t="";if(e.documentation&&(t+=E(e.documentation)),e.tags){const n=b(e.tags);n&&(t+="\n\n"+n)}return t.length?{kind:a.MarkupKind.Markdown,value:t}:void 0},t.asTagsDocumentation=b,t.asTagDocumentation=S,t.asTagBodyText=w,t.asPlainText=E,function(e){function t(e,t){return e.line<t.line||!(t.line<e.line)&&e.character<t.character}function n(e,t){return!r(e,t)}function r(e,t){return e.line<t.line||!(t.line<e.line)&&e.character<=t.character}e.Min=function(...e){if(!e.length)return;let n=e.pop();for(const r of e)t(r,n)&&(n=r);return n},e.isBefore=t,e.Max=function(...e){if(!e.length)return;let t=e.pop();for(const r of e)n(r,t)&&(t=r);return t},e.isAfter=n,e.isBeforeOrEqual=r}(v||(v={})),function(e){e.intersection=function(e,t){const n=v.Max(t.start,e.start),r=v.Min(t.end,e.end);if(!v.isAfter(n,r))return a.Range.create(n,r)}}(t.Range||(t.Range={}))},6252:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.provideQuickFix=void 0;const s=o(n(8212)),a=n(574),c=n(9661),u=n(8212);t.provideQuickFix=function(e,t){return e&&e.body?e.body.map((e=>s.CodeAction.create(e.description,{title:e.description,command:a.Commands.APPLY_WORKSPACE_EDIT,arguments:[{documentChanges:e.changes.map((e=>(0,c.toTextDocumentEdit)(e,t)))}]},u.CodeActionKind.QuickFix))):[]}},5362:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.asApplyRefactoring=t.asSelectRefactoring=t.provideRefactors=void 0;const s=o(n(8212)),a=n(574);function c(e,t){return s.CodeAction.create(e.description,s.Command.create(e.description,a.Commands.SELECT_REFACTORING,e,t),s.CodeActionKind.Refactor)}function u(e,t,n){return s.CodeAction.create(e.description,s.Command.create(e.description,a.Commands.APPLY_REFACTORING,Object.assign(Object.assign({},n),{refactor:t.name,action:e.name})),function(e){if(e.name.startsWith("function_"))return s.CodeActionKind.RefactorExtract+".function";if(e.name.startsWith("constant_"))return s.CodeActionKind.RefactorExtract+".constant";if(e.name.startsWith("Move"))return s.CodeActionKind.Refactor+".move";return s.CodeActionKind.Refactor}(t))}t.provideRefactors=function(e,t){if(!e||!e.body)return[];const n=[];for(const r of e.body)if(!1===r.inlineable)n.push(c(r,t));else for(const e of r.actions)n.push(u(e,r,t));return n},t.asSelectRefactoring=c,t.asApplyRefactoring=u},1178:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.TypeScriptRenameRequest=void 0;const s=o(n(273));!function(e){e.type=new s.RequestType("_typescript.rename")}(t.TypeScriptRenameRequest||(t.TypeScriptRenameRequest={}))},4647:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TspClient=void 0;const a=o(n(7147)),c=o(n(1017)),u=o(n(2081)),l=o(n(4521)),d=o(n(1576)),h=s(n(488)),f=n(4440),p=n(2180);t.TspClient=class{constructor(e){this.options=e,this.seq=0,this.deferreds={},this.logger=new f.PrefixingLogger(e.logger,"[tsclient]"),this.tsserverLogger=new f.PrefixingLogger(e.logger,"[tsserver]")}start(){if(this.readlineInterface)return;const{tsserverPath:e,logFile:t,logVerbosity:n,maxTsServerMemory:r,globalPlugins:i,pluginProbeLocations:o}=this.options,s=[];t&&s.push("--logFile",t),n&&s.push("--logVerbosity",n),i&&i.length&&s.push("--globalPlugins",i.join(",")),o&&o.length&&s.push("--pluginProbeLocations",o.join(",")),this.cancellationPipeName=h.default.file({name:"tscancellation"}),s.push("--cancellationPipeName",`${this.cancellationPipeName}*`),this.logger.info(`Starting tsserver : '${e} ${s.join(" ")}'`);const a=".js"===c.extname(e),f={silent:!0,execArgv:[...r?[`--max-old-space-size=${r}`]:[]]};this.tsserverProc=a?u.fork(e,s,f):u.spawn(e,s),this.readlineInterface=l.createInterface(this.tsserverProc.stdout,this.tsserverProc.stdin,void 0),process.on("exit",(()=>{this.readlineInterface.close(),this.tsserverProc.stdin.destroy(),this.tsserverProc.kill()})),this.readlineInterface.on("line",(e=>this.processMessage(e)));const p=new d.StringDecoder("utf-8");this.tsserverProc.stderr.addListener("data",(e=>{const t="string"==typeof e?e:p.write(e);this.tsserverLogger.error(t)}))}notify(e,t){this.sendMessage(e,!0,t)}request(e,t,n){this.sendMessage(e,!1,t);const r=this.seq,i=new p.Deferred;this.deferreds[r]=i;const o=i.promise;if(n){const e=n.onCancellationRequested((()=>{if(e.dispose(),this.cancellationPipeName){const e=`${this.cancellationPipeName}${r}`;a.writeFile(e,"",(t=>{t||o.then((()=>a.unlink(e,(()=>{}))))}))}}))}return o}sendMessage(e,t,n){this.seq=this.seq+1;const r={command:e,seq:this.seq,type:"request"};n&&(r.arguments=n);const i=JSON.stringify(r)+"\n";this.tsserverProc.stdin.write(i),this.logger.log(t?"notify":"request",r)}processMessage(e){const t=e.trim();if(!t||t.startsWith("Content-Length:"))return;const n=JSON.parse(t);this.logger.log("processMessage",n),this.isResponse(n)?this.resolveResponse(n,n.request_seq,n.success):this.isEvent(n)&&(this.isRequestCompletedEvent(n)?this.resolveResponse(n,n.body.request_seq,!0):this.options.onEvent&&this.options.onEvent(n))}resolveResponse(e,t,n){const r=this.deferreds[t];this.logger.log("request completed",{request_seq:t,success:n}),r&&(n?this.deferreds[t].resolve(e):this.deferreds[t].reject(e),delete this.deferreds[t])}isEvent(e){return"event"===e.type}isResponse(e){return"response"===e.type}isRequestCompletedEvent(e){return this.isEvent(e)&&"requestCompleted"===e.event}}},3282:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ScriptElementKind=void 0,function(e){e.unknown="",e.warning="warning",e.keyword="keyword",e.scriptElement="script",e.moduleElement="module",e.classElement="class",e.localClassElement="local class",e.interfaceElement="interface",e.typeElement="type",e.enumElement="enum",e.enumMemberElement="enum member",e.variableElement="var",e.localVariableElement="local var",e.functionElement="function",e.localFunctionElement="local function",e.memberFunctionElement="method",e.memberGetAccessorElement="getter",e.memberSetAccessorElement="setter",e.memberVariableElement="property",e.constructorImplementationElement="constructor",e.callSignatureElement="call",e.indexSignatureElement="index",e.constructSignatureElement="construct",e.parameterElement="parameter",e.typeParameterElement="type parameter",e.primitiveType="primitive type",e.label="label",e.alias="alias",e.constElement="const",e.letElement="let",e.directory="directory",e.externalModuleName="external module name",e.jsxAttribute="JSX attribute",e.string="string",e.link="link",e.linkName="link name",e.linkText="link text"}(t.ScriptElementKind||(t.ScriptElementKind={}))},2180:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTsserverExecutable=t.Deferred=void 0;t.Deferred=class{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}},t.getTsserverExecutable=function(){return/^win/.test(process.platform)?"tsserver.cmd":"tsserver"}},7506:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=7506,e.exports=t},5679:(e,t,n)=>{"use strict";n.r(t),n.d(t,{setUriThrowOnMissingScheme:()=>d,default:()=>g});var r,i,o=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});if("object"==typeof process)i="win32"===process.platform;else if("object"==typeof navigator){var s=navigator.userAgent;i=s.indexOf("Windows")>=0}var a=/^\w[\w\d+.-]*$/,c=/^\//,u=/^\/\//,l=!0;function d(e){var t=l;return l=e,t}var h="",f="/",p=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/,m=function(){function e(e,t,n,r,i,o){void 0===o&&(o=!1),"object"==typeof e?(this.scheme=e.scheme||h,this.authority=e.authority||h,this.path=e.path||h,this.query=e.query||h,this.fragment=e.fragment||h):(this.scheme=function(e,t){return t||l?e||h:(e||(e="file"),e)}(e,o),this.authority=t||h,this.path=function(e,t){switch(e){case"https":case"http":case"file":t?t[0]!==f&&(t=f+t):t=f}return t}(this.scheme,n||h),this.query=r||h,this.fragment=i||h,function(e,t){if(!e.scheme&&(t||l))throw new Error('[UriError]: Scheme is missing: {scheme: "", authority: "'+e.authority+'", path: "'+e.path+'", query: "'+e.query+'", fragment: "'+e.fragment+'"}');if(e.scheme&&!a.test(e.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(e.path)if(e.authority){if(!c.test(e.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(u.test(e.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}(this,o))}return e.isUri=function(t){return t instanceof e||!!t&&("string"==typeof t.authority&&"string"==typeof t.fragment&&"string"==typeof t.path&&"string"==typeof t.query&&"string"==typeof t.scheme&&"function"==typeof t.fsPath&&"function"==typeof t.with&&"function"==typeof t.toString)},Object.defineProperty(e.prototype,"fsPath",{get:function(){return E(this)},enumerable:!0,configurable:!0}),e.prototype.with=function(e){if(!e)return this;var t=e.scheme,n=e.authority,r=e.path,i=e.query,o=e.fragment;return void 0===t?t=this.scheme:null===t&&(t=h),void 0===n?n=this.authority:null===n&&(n=h),void 0===r?r=this.path:null===r&&(r=h),void 0===i?i=this.query:null===i&&(i=h),void 0===o?o=this.fragment:null===o&&(o=h),t===this.scheme&&n===this.authority&&r===this.path&&i===this.query&&o===this.fragment?this:new _(t,n,r,i,o)},e.parse=function(e,t){void 0===t&&(t=!1);var n=p.exec(e);return n?new _(n[2]||h,decodeURIComponent(n[4]||h),decodeURIComponent(n[5]||h),decodeURIComponent(n[7]||h),decodeURIComponent(n[9]||h),t):new _(h,h,h,h,h)},e.file=function(e){var t=h;if(i&&(e=e.replace(/\\/g,f)),e[0]===f&&e[1]===f){var n=e.indexOf(f,2);-1===n?(t=e.substring(2),e=f):(t=e.substring(2,n),e=e.substring(n)||f)}return new _("file",t,e,h,h)},e.from=function(e){return new _(e.scheme,e.authority,e.path,e.query,e.fragment)},e.prototype.toString=function(e){return void 0===e&&(e=!1),R(this,e)},e.prototype.toJSON=function(){return this},e.revive=function(t){if(t){if(t instanceof e)return t;var n=new _(t);return n._formatted=t.external,n._fsPath=t._sep===v?t.fsPath:null,n}return t},e}();const g=m;var y,v=i?1:void 0,_=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._formatted=null,t._fsPath=null,t}return o(t,e),Object.defineProperty(t.prototype,"fsPath",{get:function(){return this._fsPath||(this._fsPath=E(this)),this._fsPath},enumerable:!0,configurable:!0}),t.prototype.toString=function(e){return void 0===e&&(e=!1),e?R(this,!0):(this._formatted||(this._formatted=R(this,!1)),this._formatted)},t.prototype.toJSON=function(){var e={$mid:1};return this._fsPath&&(e.fsPath=this._fsPath,e._sep=v),this._formatted&&(e.external=this._formatted),this.path&&(e.path=this.path),this.scheme&&(e.scheme=this.scheme),this.authority&&(e.authority=this.authority),this.query&&(e.query=this.query),this.fragment&&(e.fragment=this.fragment),e},t}(m),b=((y={})[58]="%3A",y[47]="%2F",y[63]="%3F",y[35]="%23",y[91]="%5B",y[93]="%5D",y[64]="%40",y[33]="%21",y[36]="%24",y[38]="%26",y[39]="%27",y[40]="%28",y[41]="%29",y[42]="%2A",y[43]="%2B",y[44]="%2C",y[59]="%3B",y[61]="%3D",y[32]="%20",y);function S(e,t){for(var n=void 0,r=-1,i=0;i<e.length;i++){var o=e.charCodeAt(i);if(o>=97&&o<=122||o>=65&&o<=90||o>=48&&o<=57||45===o||46===o||95===o||126===o||t&&47===o)-1!==r&&(n+=encodeURIComponent(e.substring(r,i)),r=-1),void 0!==n&&(n+=e.charAt(i));else{void 0===n&&(n=e.substr(0,i));var s=b[o];void 0!==s?(-1!==r&&(n+=encodeURIComponent(e.substring(r,i)),r=-1),n+=s):-1===r&&(r=i)}}return-1!==r&&(n+=encodeURIComponent(e.substring(r))),void 0!==n?n:e}function w(e){for(var t=void 0,n=0;n<e.length;n++){var r=e.charCodeAt(n);35===r||63===r?(void 0===t&&(t=e.substr(0,n)),t+=b[r]):void 0!==t&&(t+=e[n])}return void 0!==t?t:e}function E(e){var t;return t=e.authority&&e.path.length>1&&"file"===e.scheme?"//"+e.authority+e.path:47===e.path.charCodeAt(0)&&(e.path.charCodeAt(1)>=65&&e.path.charCodeAt(1)<=90||e.path.charCodeAt(1)>=97&&e.path.charCodeAt(1)<=122)&&58===e.path.charCodeAt(2)?e.path[1].toLowerCase()+e.path.substr(2):e.path,i&&(t=t.replace(/\//g,"\\")),t}function R(e,t){var n=t?w:S,r="",i=e.scheme,o=e.authority,s=e.path,a=e.query,c=e.fragment;if(i&&(r+=i,r+=":"),(o||"file"===i)&&(r+=f,r+=f),o){var u=o.indexOf("@");if(-1!==u){var l=o.substr(0,u);o=o.substr(u+1),-1===(u=l.indexOf(":"))?r+=n(l,!1):(r+=n(l.substr(0,u),!1),r+=":",r+=n(l.substr(u+1),!1)),r+="@"}-1===(u=(o=o.toLowerCase()).indexOf(":"))?r+=n(o,!1):(r+=n(o.substr(0,u),!1),r+=o.substr(u))}if(s){if(s.length>=3&&47===s.charCodeAt(0)&&58===s.charCodeAt(2))(d=s.charCodeAt(1))>=65&&d<=90&&(s="/"+String.fromCharCode(d+32)+":"+s.substr(3));else if(s.length>=2&&58===s.charCodeAt(1)){var d;(d=s.charCodeAt(0))>=65&&d<=90&&(s=String.fromCharCode(d+32)+":"+s.substr(2))}r+=n(s,!0)}return a&&(r+="?",r+=n(a,!1)),c&&(r+="#",r+=t?c:S(c,!1)),r}},6277:(e,t,n)=>{"use strict";const r=n(511);e.exports=()=>r(32)},8981:(e,t)=>{"use strict";t.fromCallback=function(e){return Object.defineProperty((function(...t){if("function"!=typeof t[t.length-1])return new Promise(((n,r)=>{e.call(this,...t,((e,t)=>null!=e?r(e):n(t)))}));e.apply(this,t)}),"name",{value:e.name})},t.fromPromise=function(e){return Object.defineProperty((function(...t){const n=t[t.length-1];if("function"!=typeof n)return e.apply(this,t);e.apply(this,t.slice(0,-1)).then((e=>n(null,e)),n)}),"name",{value:e.name})}},3870:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CancellationSenderStrategy=t.CancellationReceiverStrategy=t.ConnectionError=t.ConnectionErrors=t.LogTraceNotification=t.SetTraceNotification=t.TraceFormat=t.Trace=t.ProgressType=t.createMessageConnection=t.NullLogger=t.ConnectionOptions=t.ConnectionStrategy=t.WriteableStreamMessageWriter=t.AbstractMessageWriter=t.MessageWriter=t.ReadableStreamMessageReader=t.AbstractMessageReader=t.MessageReader=t.CancellationToken=t.CancellationTokenSource=t.Emitter=t.Event=t.Disposable=t.ParameterStructures=t.NotificationType9=t.NotificationType8=t.NotificationType7=t.NotificationType6=t.NotificationType5=t.NotificationType4=t.NotificationType3=t.NotificationType2=t.NotificationType1=t.NotificationType0=t.NotificationType=t.ErrorCodes=t.ResponseError=t.RequestType9=t.RequestType8=t.RequestType7=t.RequestType6=t.RequestType5=t.RequestType4=t.RequestType3=t.RequestType2=t.RequestType1=t.RequestType0=t.RequestType=t.RAL=void 0,t.CancellationStrategy=void 0;const r=n(839);Object.defineProperty(t,"RequestType",{enumerable:!0,get:function(){return r.RequestType}}),Object.defineProperty(t,"RequestType0",{enumerable:!0,get:function(){return r.RequestType0}}),Object.defineProperty(t,"RequestType1",{enumerable:!0,get:function(){return r.RequestType1}}),Object.defineProperty(t,"RequestType2",{enumerable:!0,get:function(){return r.RequestType2}}),Object.defineProperty(t,"RequestType3",{enumerable:!0,get:function(){return r.RequestType3}}),Object.defineProperty(t,"RequestType4",{enumerable:!0,get:function(){return r.RequestType4}}),Object.defineProperty(t,"RequestType5",{enumerable:!0,get:function(){return r.RequestType5}}),Object.defineProperty(t,"RequestType6",{enumerable:!0,get:function(){return r.RequestType6}}),Object.defineProperty(t,"RequestType7",{enumerable:!0,get:function(){return r.RequestType7}}),Object.defineProperty(t,"RequestType8",{enumerable:!0,get:function(){return r.RequestType8}}),Object.defineProperty(t,"RequestType9",{enumerable:!0,get:function(){return r.RequestType9}}),Object.defineProperty(t,"ResponseError",{enumerable:!0,get:function(){return r.ResponseError}}),Object.defineProperty(t,"ErrorCodes",{enumerable:!0,get:function(){return r.ErrorCodes}}),Object.defineProperty(t,"NotificationType",{enumerable:!0,get:function(){return r.NotificationType}}),Object.defineProperty(t,"NotificationType0",{enumerable:!0,get:function(){return r.NotificationType0}}),Object.defineProperty(t,"NotificationType1",{enumerable:!0,get:function(){return r.NotificationType1}}),Object.defineProperty(t,"NotificationType2",{enumerable:!0,get:function(){return r.NotificationType2}}),Object.defineProperty(t,"NotificationType3",{enumerable:!0,get:function(){return r.NotificationType3}}),Object.defineProperty(t,"NotificationType4",{enumerable:!0,get:function(){return r.NotificationType4}}),Object.defineProperty(t,"NotificationType5",{enumerable:!0,get:function(){return r.NotificationType5}}),Object.defineProperty(t,"NotificationType6",{enumerable:!0,get:function(){return r.NotificationType6}}),Object.defineProperty(t,"NotificationType7",{enumerable:!0,get:function(){return r.NotificationType7}}),Object.defineProperty(t,"NotificationType8",{enumerable:!0,get:function(){return r.NotificationType8}}),Object.defineProperty(t,"NotificationType9",{enumerable:!0,get:function(){return r.NotificationType9}}),Object.defineProperty(t,"ParameterStructures",{enumerable:!0,get:function(){return r.ParameterStructures}});const i=n(3911);Object.defineProperty(t,"Disposable",{enumerable:!0,get:function(){return i.Disposable}});const o=n(7135);Object.defineProperty(t,"Event",{enumerable:!0,get:function(){return o.Event}}),Object.defineProperty(t,"Emitter",{enumerable:!0,get:function(){return o.Emitter}});const s=n(3881);Object.defineProperty(t,"CancellationTokenSource",{enumerable:!0,get:function(){return s.CancellationTokenSource}}),Object.defineProperty(t,"CancellationToken",{enumerable:!0,get:function(){return s.CancellationToken}});const a=n(6525);Object.defineProperty(t,"MessageReader",{enumerable:!0,get:function(){return a.MessageReader}}),Object.defineProperty(t,"AbstractMessageReader",{enumerable:!0,get:function(){return a.AbstractMessageReader}}),Object.defineProperty(t,"ReadableStreamMessageReader",{enumerable:!0,get:function(){return a.ReadableStreamMessageReader}});const c=n(6654);Object.defineProperty(t,"MessageWriter",{enumerable:!0,get:function(){return c.MessageWriter}}),Object.defineProperty(t,"AbstractMessageWriter",{enumerable:!0,get:function(){return c.AbstractMessageWriter}}),Object.defineProperty(t,"WriteableStreamMessageWriter",{enumerable:!0,get:function(){return c.WriteableStreamMessageWriter}});const u=n(1343);Object.defineProperty(t,"ConnectionStrategy",{enumerable:!0,get:function(){return u.ConnectionStrategy}}),Object.defineProperty(t,"ConnectionOptions",{enumerable:!0,get:function(){return u.ConnectionOptions}}),Object.defineProperty(t,"NullLogger",{enumerable:!0,get:function(){return u.NullLogger}}),Object.defineProperty(t,"createMessageConnection",{enumerable:!0,get:function(){return u.createMessageConnection}}),Object.defineProperty(t,"ProgressType",{enumerable:!0,get:function(){return u.ProgressType}}),Object.defineProperty(t,"Trace",{enumerable:!0,get:function(){return u.Trace}}),Object.defineProperty(t,"TraceFormat",{enumerable:!0,get:function(){return u.TraceFormat}}),Object.defineProperty(t,"SetTraceNotification",{enumerable:!0,get:function(){return u.SetTraceNotification}}),Object.defineProperty(t,"LogTraceNotification",{enumerable:!0,get:function(){return u.LogTraceNotification}}),Object.defineProperty(t,"ConnectionErrors",{enumerable:!0,get:function(){return u.ConnectionErrors}}),Object.defineProperty(t,"ConnectionError",{enumerable:!0,get:function(){return u.ConnectionError}}),Object.defineProperty(t,"CancellationReceiverStrategy",{enumerable:!0,get:function(){return u.CancellationReceiverStrategy}}),Object.defineProperty(t,"CancellationSenderStrategy",{enumerable:!0,get:function(){return u.CancellationSenderStrategy}}),Object.defineProperty(t,"CancellationStrategy",{enumerable:!0,get:function(){return u.CancellationStrategy}});const l=n(147);t.RAL=l.default},3881:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CancellationTokenSource=t.CancellationToken=void 0;const r=n(147),i=n(7574),o=n(7135);var s;!function(e){e.None=Object.freeze({isCancellationRequested:!1,onCancellationRequested:o.Event.None}),e.Cancelled=Object.freeze({isCancellationRequested:!0,onCancellationRequested:o.Event.None}),e.is=function(t){const n=t;return n&&(n===e.None||n===e.Cancelled||i.boolean(n.isCancellationRequested)&&!!n.onCancellationRequested)}}(s=t.CancellationToken||(t.CancellationToken={}));const a=Object.freeze((function(e,t){const n=r.default().timer.setTimeout(e.bind(t),0);return{dispose(){r.default().timer.clearTimeout(n)}}}));class c{constructor(){this._isCancelled=!1}cancel(){this._isCancelled||(this._isCancelled=!0,this._emitter&&(this._emitter.fire(void 0),this.dispose()))}get isCancellationRequested(){return this._isCancelled}get onCancellationRequested(){return this._isCancelled?a:(this._emitter||(this._emitter=new o.Emitter),this._emitter.event)}dispose(){this._emitter&&(this._emitter.dispose(),this._emitter=void 0)}}t.CancellationTokenSource=class{get token(){return this._token||(this._token=new c),this._token}cancel(){this._token?this._token.cancel():this._token=s.Cancelled}dispose(){this._token?this._token instanceof c&&this._token.dispose():this._token=s.None}}},1343:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createMessageConnection=t.ConnectionOptions=t.CancellationStrategy=t.CancellationSenderStrategy=t.CancellationReceiverStrategy=t.ConnectionStrategy=t.ConnectionError=t.ConnectionErrors=t.LogTraceNotification=t.SetTraceNotification=t.TraceFormat=t.Trace=t.NullLogger=t.ProgressType=void 0;const r=n(147),i=n(7574),o=n(839),s=n(6184),a=n(7135),c=n(3881);var u,l,d,h,f,p,m,g,y,v,_,b,S;!function(e){e.type=new o.NotificationType("$/cancelRequest")}(u||(u={})),function(e){e.type=new o.NotificationType("$/progress")}(l||(l={}));t.ProgressType=class{constructor(){}},function(e){e.is=function(e){return i.func(e)}}(d||(d={})),t.NullLogger=Object.freeze({error:()=>{},warn:()=>{},info:()=>{},log:()=>{}}),function(e){e[e.Off=0]="Off",e[e.Messages=1]="Messages",e[e.Verbose=2]="Verbose"}(h=t.Trace||(t.Trace={})),function(e){e.fromString=function(t){if(!i.string(t))return e.Off;switch(t=t.toLowerCase()){default:return e.Off;case"messages":return e.Messages;case"verbose":return e.Verbose}},e.toString=function(t){switch(t){case e.Off:return"off";case e.Messages:return"messages";case e.Verbose:return"verbose";default:return"off"}}}(h=t.Trace||(t.Trace={})),function(e){e.Text="text",e.JSON="json"}(t.TraceFormat||(t.TraceFormat={})),function(e){e.fromString=function(t){return"json"===(t=t.toLowerCase())?e.JSON:e.Text}}(f=t.TraceFormat||(t.TraceFormat={})),function(e){e.type=new o.NotificationType("$/setTrace")}(p=t.SetTraceNotification||(t.SetTraceNotification={})),function(e){e.type=new o.NotificationType("$/logTrace")}(m=t.LogTraceNotification||(t.LogTraceNotification={})),function(e){e[e.Closed=1]="Closed",e[e.Disposed=2]="Disposed",e[e.AlreadyListening=3]="AlreadyListening"}(g=t.ConnectionErrors||(t.ConnectionErrors={}));class w extends Error{constructor(e,t){super(t),this.code=e,Object.setPrototypeOf(this,w.prototype)}}t.ConnectionError=w,function(e){e.is=function(e){const t=e;return t&&i.func(t.cancelUndispatched)}}(y=t.ConnectionStrategy||(t.ConnectionStrategy={})),function(e){e.Message=Object.freeze({createCancellationTokenSource:e=>new c.CancellationTokenSource}),e.is=function(e){const t=e;return t&&i.func(t.createCancellationTokenSource)}}(v=t.CancellationReceiverStrategy||(t.CancellationReceiverStrategy={})),function(e){e.Message=Object.freeze({sendCancellation(e,t){e.sendNotification(u.type,{id:t})},cleanup(e){}}),e.is=function(e){const t=e;return t&&i.func(t.sendCancellation)&&i.func(t.cleanup)}}(_=t.CancellationSenderStrategy||(t.CancellationSenderStrategy={})),function(e){e.Message=Object.freeze({receiver:v.Message,sender:_.Message}),e.is=function(e){const t=e;return t&&v.is(t.receiver)&&_.is(t.sender)}}(b=t.CancellationStrategy||(t.CancellationStrategy={})),function(e){e.is=function(e){const t=e;return t&&(b.is(t.cancellationStrategy)||y.is(t.connectionStrategy))}}(t.ConnectionOptions||(t.ConnectionOptions={})),function(e){e[e.New=1]="New",e[e.Listening=2]="Listening",e[e.Closed=3]="Closed",e[e.Disposed=4]="Disposed"}(S||(S={})),t.createMessageConnection=function(e,n,y,v){const _=void 0!==y?y:t.NullLogger;let E=0,R=0,x=0;const C="2.0";let P;const T=Object.create(null);let O;const k=Object.create(null),D=new Map;let A,N,M=new s.LinkedMap,j=Object.create(null),F=Object.create(null),q=h.Off,L=f.Text,I=S.New;const $=new a.Emitter,H=new a.Emitter,W=new a.Emitter,K=new a.Emitter,B=new a.Emitter,U=v&&v.cancellationStrategy?v.cancellationStrategy:b.Message;function G(e){if(null===e)throw new Error("Can't send requests with id null since the response can't be correlated.");return"req-"+e.toString()}function V(e,t){var n;o.isRequestMessage(t)?e.set(G(t.id),t):o.isResponseMessage(t)?e.set(null===(n=t.id)?"res-unknown-"+(++x).toString():"res-"+n.toString(),t):e.set("not-"+(++R).toString(),t)}function z(e){}function Y(){return I===S.Listening}function Q(){return I===S.Closed}function J(){return I===S.Disposed}function X(){I!==S.New&&I!==S.Listening||(I=S.Closed,H.fire(void 0))}function Z(){A||0===M.size||(A=r.default().timer.setImmediate((()=>{A=void 0,function(){if(0===M.size)return;const e=M.shift();try{o.isRequestMessage(e)?function(e){if(J())return;function t(t,r,i){const s={jsonrpc:C,id:e.id};t instanceof o.ResponseError?s.error=t.toJson():s.result=void 0===t?null:t,te(s,r,i),n.write(s)}function r(t,r,i){const o={jsonrpc:C,id:e.id,error:t.toJson()};te(o,r,i),n.write(o)}function s(t,r,i){void 0===t&&(t=null);const o={jsonrpc:C,id:e.id,result:t};te(o,r,i),n.write(o)}!function(e){if(q===h.Off||!N)return;if(L===f.Text){let t;q===h.Verbose&&e.params&&(t=`Params: ${JSON.stringify(e.params,null,4)}\n\n`),N.log(`Received request '${e.method} - (${e.id})'.`,t)}else ne("receive-request",e)}(e);const a=T[e.method];let c,u;a&&(c=a.type,u=a.handler);const l=Date.now();if(u||P){const n=String(e.id),a=U.receiver.createCancellationTokenSource(n);F[n]=a;try{let d;if(u)if(void 0===e.params){if(void 0!==c&&0!==c.numberOfParams)return void r(new o.ResponseError(o.ErrorCodes.InvalidParams,`Request ${e.method} defines ${c.numberOfParams} params but recevied none.`),e.method,l);d=u(a.token)}else if(Array.isArray(e.params)){if(void 0!==c&&c.parameterStructures===o.ParameterStructures.byName)return void r(new o.ResponseError(o.ErrorCodes.InvalidParams,`Request ${e.method} defines parameters by name but received parameters by position`),e.method,l);d=u(...e.params,a.token)}else{if(void 0!==c&&c.parameterStructures===o.ParameterStructures.byPosition)return void r(new o.ResponseError(o.ErrorCodes.InvalidParams,`Request ${e.method} defines parameters by position but received parameters by name`),e.method,l);d=u(e.params,a.token)}else P&&(d=P(e.method,e.params,a.token));const h=d;d?h.then?h.then((r=>{delete F[n],t(r,e.method,l)}),(t=>{delete F[n],t instanceof o.ResponseError?r(t,e.method,l):t&&i.string(t.message)?r(new o.ResponseError(o.ErrorCodes.InternalError,`Request ${e.method} failed with message: ${t.message}`),e.method,l):r(new o.ResponseError(o.ErrorCodes.InternalError,`Request ${e.method} failed unexpectedly without providing any details.`),e.method,l)})):(delete F[n],t(d,e.method,l)):(delete F[n],s(d,e.method,l))}catch(s){delete F[n],s instanceof o.ResponseError?t(s,e.method,l):s&&i.string(s.message)?r(new o.ResponseError(o.ErrorCodes.InternalError,`Request ${e.method} failed with message: ${s.message}`),e.method,l):r(new o.ResponseError(o.ErrorCodes.InternalError,`Request ${e.method} failed unexpectedly without providing any details.`),e.method,l)}}else r(new o.ResponseError(o.ErrorCodes.MethodNotFound,`Unhandled method ${e.method}`),e.method,l)}(e):o.isNotificationMessage(e)?function(e){if(J())return;let t,n;if(e.method===u.type.method)n=e=>{const t=e.id,n=F[String(t)];n&&n.cancel()};else{const r=k[e.method];r&&(n=r.handler,t=r.type)}if(n||O)try{!function(e){if(q===h.Off||!N||e.method===m.type.method)return;if(L===f.Text){let t;q===h.Verbose&&(t=e.params?`Params: ${JSON.stringify(e.params,null,4)}\n\n`:"No parameters provided.\n\n"),N.log(`Received notification '${e.method}'.`,t)}else ne("receive-notification",e)}(e),n?void 0===e.params?(void 0!==t&&0!==t.numberOfParams&&t.parameterStructures!==o.ParameterStructures.byName&&_.error(`Notification ${e.method} defines ${t.numberOfParams} params but recevied none.`),n()):Array.isArray(e.params)?(void 0!==t&&(t.parameterStructures===o.ParameterStructures.byName&&_.error(`Notification ${e.method} defines parameters by name but received parameters by position`),t.numberOfParams!==e.params.length&&_.error(`Notification ${e.method} defines ${t.numberOfParams} params but received ${e.params.length} argumennts`)),n(...e.params)):(void 0!==t&&t.parameterStructures===o.ParameterStructures.byPosition&&_.error(`Notification ${e.method} defines parameters by position but received parameters by name`),n(e.params)):O&&O(e.method,e.params)}catch(t){t.message?_.error(`Notification handler '${e.method}' failed with message: ${t.message}`):_.error(`Notification handler '${e.method}' failed unexpectedly.`)}else W.fire(e)}(e):o.isResponseMessage(e)?function(e){if(J())return;if(null===e.id)e.error?_.error(`Received response message without id: Error is: \n${JSON.stringify(e.error,void 0,4)}`):_.error("Received response message without id. No further error information provided.");else{const t=String(e.id),n=j[t];if(function(e,t){if(q===h.Off||!N)return;if(L===f.Text){let n;if(q===h.Verbose&&(e.error&&e.error.data?n=`Error data: ${JSON.stringify(e.error.data,null,4)}\n\n`:e.result?n=`Result: ${JSON.stringify(e.result,null,4)}\n\n`:void 0===e.error&&(n="No result returned.\n\n")),t){const r=e.error?` Request failed: ${e.error.message} (${e.error.code}).`:"";N.log(`Received response '${t.method} - (${e.id})' in ${Date.now()-t.timerStart}ms.${r}`,n)}else N.log(`Received response ${e.id} without active response promise.`,n)}else ne("receive-response",e)}(e,n),n){delete j[t];try{if(e.error){const t=e.error;n.reject(new o.ResponseError(t.code,t.message,t.data))}else{if(void 0===e.result)throw new Error("Should never happen.");n.resolve(e.result)}}catch(e){e.message?_.error(`Response handler '${n.method}' failed with message: ${e.message}`):_.error(`Response handler '${n.method}' failed unexpectedly.`)}}}}(e):function(e){if(!e)return void _.error("Received empty message.");_.error(`Received message which is neither a response nor a notification message:\n${JSON.stringify(e,null,4)}`);const t=e;if(i.string(t.id)||i.number(t.id)){const e=String(t.id),n=j[e];n&&n.reject(new Error("The received response has neither a result nor an error property."))}}(e)}finally{Z()}}()})))}e.onClose(X),e.onError((function(e){$.fire([e,void 0,void 0])})),n.onClose(X),n.onError((function(e){$.fire(e)}));const ee=e=>{try{if(o.isNotificationMessage(e)&&e.method===u.type.method){const t=G(e.params.id),r=M.get(t);if(o.isRequestMessage(r)){const i=null==v?void 0:v.connectionStrategy,o=i&&i.cancelUndispatched?i.cancelUndispatched(r,z):void 0;if(o&&(void 0!==o.error||void 0!==o.result))return M.delete(t),o.id=r.id,te(o,e.method,Date.now()),void n.write(o)}}V(M,e)}finally{Z()}};function te(e,t,n){if(q!==h.Off&&N)if(L===f.Text){let r;q===h.Verbose&&(e.error&&e.error.data?r=`Error data: ${JSON.stringify(e.error.data,null,4)}\n\n`:e.result?r=`Result: ${JSON.stringify(e.result,null,4)}\n\n`:void 0===e.error&&(r="No result returned.\n\n")),N.log(`Sending response '${t} - (${e.id})'. Processing request took ${Date.now()-n}ms`,r)}else ne("send-response",e)}function ne(e,t){if(!N||q===h.Off)return;const n={isLSPMessage:!0,type:e,message:t,timestamp:Date.now()};N.log(n)}function re(){if(Q())throw new w(g.Closed,"Connection is closed.");if(J())throw new w(g.Disposed,"Connection is disposed.")}function ie(e){return void 0===e?null:e}function oe(e){return null===e?void 0:e}function se(e){return null!=e&&!Array.isArray(e)&&"object"==typeof e}function ae(e,t){switch(e){case o.ParameterStructures.auto:return se(t)?oe(t):[ie(t)];case o.ParameterStructures.byName:if(!se(t))throw new Error("Recevied parameters by name but param is not an object literal.");return oe(t);case o.ParameterStructures.byPosition:return[ie(t)];default:throw new Error(`Unknown parameter structure ${e.toString()}`)}}function ce(e,t){let n;const r=e.numberOfParams;switch(r){case 0:n=void 0;break;case 1:n=ae(e.parameterStructures,t[0]);break;default:n=[];for(let e=0;e<t.length&&e<r;e++)n.push(ie(t[e]));if(t.length<r)for(let e=t.length;e<r;e++)n.push(null)}return n}const ue={sendNotification:(e,...t)=>{let r,s;if(re(),i.string(e)){r=e;const n=t[0];let i=0,a=o.ParameterStructures.auto;o.ParameterStructures.is(n)&&(i=1,a=n);let c=t.length;const u=c-i;switch(u){case 0:s=void 0;break;case 1:s=ae(a,t[i]);break;default:if(a===o.ParameterStructures.byName)throw new Error(`Recevied ${u} parameters for 'by Name' notification parameter structure.`);s=t.slice(i,c).map((e=>ie(e)))}}else{const n=t;r=e.method,s=ce(e,n)}const a={jsonrpc:C,method:r,params:s};!function(e){if(q!==h.Off&&N)if(L===f.Text){let t;q===h.Verbose&&(t=e.params?`Params: ${JSON.stringify(e.params,null,4)}\n\n`:"No parameters provided.\n\n"),N.log(`Sending notification '${e.method}'.`,t)}else ne("send-notification",e)}(a),n.write(a)},onNotification:(e,t)=>{let n;return re(),i.func(e)?O=e:t&&(i.string(e)?(n=e,k[e]={type:void 0,handler:t}):(n=e.method,k[e.method]={type:e,handler:t})),{dispose:()=>{void 0!==n?delete k[n]:O=void 0}}},onProgress:(e,t,n)=>{if(D.has(t))throw new Error(`Progress handler for token ${t} already registered`);return D.set(t,n),{dispose:()=>{D.delete(t)}}},sendProgress:(e,t,n)=>{ue.sendNotification(l.type,{token:t,value:n})},onUnhandledProgress:K.event,sendRequest:(e,...t)=>{let r,s,a;if(re(),function(){if(!Y())throw new Error("Call listen() first.")}(),i.string(e)){r=e;const n=t[0],i=t[t.length-1];let u=0,l=o.ParameterStructures.auto;o.ParameterStructures.is(n)&&(u=1,l=n);let d=t.length;c.CancellationToken.is(i)&&(d-=1,a=i);const h=d-u;switch(h){case 0:s=void 0;break;case 1:s=ae(l,t[u]);break;default:if(l===o.ParameterStructures.byName)throw new Error(`Recevied ${h} parameters for 'by Name' request parameter structure.`);s=t.slice(u,d).map((e=>ie(e)))}}else{const n=t;r=e.method,s=ce(e,n);const i=e.numberOfParams;a=c.CancellationToken.is(n[i])?n[i]:void 0}const u=E++;let l;a&&(l=a.onCancellationRequested((()=>{U.sender.sendCancellation(ue,u)})));return new Promise(((e,t)=>{const i={jsonrpc:C,id:u,method:r,params:s};let a={method:r,timerStart:Date.now(),resolve:t=>{e(t),U.sender.cleanup(u),null==l||l.dispose()},reject:e=>{t(e),U.sender.cleanup(u),null==l||l.dispose()}};!function(e){if(q!==h.Off&&N)if(L===f.Text){let t;q===h.Verbose&&e.params&&(t=`Params: ${JSON.stringify(e.params,null,4)}\n\n`),N.log(`Sending request '${e.method} - (${e.id})'.`,t)}else ne("send-request",e)}(i);try{n.write(i)}catch(e){a.reject(new o.ResponseError(o.ErrorCodes.MessageWriteError,e.message?e.message:"Unknown reason")),a=null}a&&(j[String(u)]=a)}))},onRequest:(e,t)=>{re();let n=null;return d.is(e)?(n=void 0,P=e):i.string(e)?(n=null,void 0!==t&&(n=e,T[e]={handler:t,type:void 0})):void 0!==t&&(n=e.method,T[e.method]={type:e,handler:t}),{dispose:()=>{null!==n&&(void 0!==n?delete T[n]:P=void 0)}}},trace:(e,t,n)=>{let r=!1,o=f.Text;void 0!==n&&(i.boolean(n)?r=n:(r=n.sendNotification||!1,o=n.traceFormat||f.Text)),q=e,L=o,N=q===h.Off?void 0:t,!r||Q()||J()||ue.sendNotification(p.type,{value:h.toString(e)})},onError:$.event,onClose:H.event,onUnhandledNotification:W.event,onDispose:B.event,end:()=>{n.end()},dispose:()=>{if(J())return;I=S.Disposed,B.fire(void 0);const t=new Error("Connection got disposed.");Object.keys(j).forEach((e=>{j[e].reject(t)})),j=Object.create(null),F=Object.create(null),M=new s.LinkedMap,i.func(n.dispose)&&n.dispose(),i.func(e.dispose)&&e.dispose()},listen:()=>{re(),function(){if(Y())throw new w(g.AlreadyListening,"Connection is already listening")}(),I=S.Listening,e.listen(ee)},inspect:()=>{r.default().console.log("inspect")}};return ue.onNotification(m.type,(e=>{q!==h.Off&&N&&N.log(e.message,q===h.Verbose?e.verbose:void 0)})),ue.onNotification(l.type,(e=>{const t=D.get(e.token);t?t(e.value):K.fire(e)})),ue}},3911:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Disposable=void 0,function(e){e.create=function(e){return{dispose:e}}}(t.Disposable||(t.Disposable={}))},7135:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Emitter=t.Event=void 0;const r=n(147);!function(e){const t={dispose(){}};e.None=function(){return t}}(t.Event||(t.Event={}));class i{add(e,t=null,n){this._callbacks||(this._callbacks=[],this._contexts=[]),this._callbacks.push(e),this._contexts.push(t),Array.isArray(n)&&n.push({dispose:()=>this.remove(e,t)})}remove(e,t=null){if(!this._callbacks)return;let n=!1;for(let r=0,i=this._callbacks.length;r<i;r++)if(this._callbacks[r]===e){if(this._contexts[r]===t)return this._callbacks.splice(r,1),void this._contexts.splice(r,1);n=!0}if(n)throw new Error("When adding a listener with a context, you should remove it with the same context")}invoke(...e){if(!this._callbacks)return[];const t=[],n=this._callbacks.slice(0),i=this._contexts.slice(0);for(let o=0,s=n.length;o<s;o++)try{t.push(n[o].apply(i[o],e))}catch(e){r.default().console.error(e)}return t}isEmpty(){return!this._callbacks||0===this._callbacks.length}dispose(){this._callbacks=void 0,this._contexts=void 0}}class o{constructor(e){this._options=e}get event(){return this._event||(this._event=(e,t,n)=>{this._callbacks||(this._callbacks=new i),this._options&&this._options.onFirstListenerAdd&&this._callbacks.isEmpty()&&this._options.onFirstListenerAdd(this),this._callbacks.add(e,t);const r={dispose:()=>{this._callbacks&&(this._callbacks.remove(e,t),r.dispose=o._noop,this._options&&this._options.onLastListenerRemove&&this._callbacks.isEmpty()&&this._options.onLastListenerRemove(this))}};return Array.isArray(n)&&n.push(r),r}),this._event}fire(e){this._callbacks&&this._callbacks.invoke.call(this._callbacks,e)}dispose(){this._callbacks&&(this._callbacks.dispose(),this._callbacks=void 0)}}t.Emitter=o,o._noop=function(){}},7574:(e,t)=>{"use strict";function n(e){return"string"==typeof e||e instanceof String}function r(e){return Array.isArray(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.stringArray=t.array=t.func=t.error=t.number=t.string=t.boolean=void 0,t.boolean=function(e){return!0===e||!1===e},t.string=n,t.number=function(e){return"number"==typeof e||e instanceof Number},t.error=function(e){return e instanceof Error},t.func=function(e){return"function"==typeof e},t.array=r,t.stringArray=function(e){return r(e)&&e.every((e=>n(e)))}},6184:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.LRUCache=t.LinkedMap=t.Touch=void 0,function(e){e.None=0,e.First=1,e.AsOld=e.First,e.Last=2,e.AsNew=e.Last}(n=t.Touch||(t.Touch={}));class r{constructor(){this[Symbol.toStringTag]="LinkedMap",this._map=new Map,this._head=void 0,this._tail=void 0,this._size=0,this._state=0}clear(){this._map.clear(),this._head=void 0,this._tail=void 0,this._size=0,this._state++}isEmpty(){return!this._head&&!this._tail}get size(){return this._size}get first(){var e;return null===(e=this._head)||void 0===e?void 0:e.value}get last(){var e;return null===(e=this._tail)||void 0===e?void 0:e.value}has(e){return this._map.has(e)}get(e,t=n.None){const r=this._map.get(e);if(r)return t!==n.None&&this.touch(r,t),r.value}set(e,t,r=n.None){let i=this._map.get(e);if(i)i.value=t,r!==n.None&&this.touch(i,r);else{switch(i={key:e,value:t,next:void 0,previous:void 0},r){case n.None:this.addItemLast(i);break;case n.First:this.addItemFirst(i);break;case n.Last:default:this.addItemLast(i)}this._map.set(e,i),this._size++}return this}delete(e){return!!this.remove(e)}remove(e){const t=this._map.get(e);if(t)return this._map.delete(e),this.removeItem(t),this._size--,t.value}shift(){if(!this._head&&!this._tail)return;if(!this._head||!this._tail)throw new Error("Invalid list");const e=this._head;return this._map.delete(e.key),this.removeItem(e),this._size--,e.value}forEach(e,t){const n=this._state;let r=this._head;for(;r;){if(t?e.bind(t)(r.value,r.key,this):e(r.value,r.key,this),this._state!==n)throw new Error("LinkedMap got modified during iteration.");r=r.next}}keys(){const e=this,t=this._state;let n=this._head;const r={[Symbol.iterator]:()=>r,next(){if(e._state!==t)throw new Error("LinkedMap got modified during iteration.");if(n){const e={value:n.key,done:!1};return n=n.next,e}return{value:void 0,done:!0}}};return r}values(){const e=this,t=this._state;let n=this._head;const r={[Symbol.iterator]:()=>r,next(){if(e._state!==t)throw new Error("LinkedMap got modified during iteration.");if(n){const e={value:n.value,done:!1};return n=n.next,e}return{value:void 0,done:!0}}};return r}entries(){const e=this,t=this._state;let n=this._head;const r={[Symbol.iterator]:()=>r,next(){if(e._state!==t)throw new Error("LinkedMap got modified during iteration.");if(n){const e={value:[n.key,n.value],done:!1};return n=n.next,e}return{value:void 0,done:!0}}};return r}[Symbol.iterator](){return this.entries()}trimOld(e){if(e>=this.size)return;if(0===e)return void this.clear();let t=this._head,n=this.size;for(;t&&n>e;)this._map.delete(t.key),t=t.next,n--;this._head=t,this._size=n,t&&(t.previous=void 0),this._state++}addItemFirst(e){if(this._head||this._tail){if(!this._head)throw new Error("Invalid list");e.next=this._head,this._head.previous=e}else this._tail=e;this._head=e,this._state++}addItemLast(e){if(this._head||this._tail){if(!this._tail)throw new Error("Invalid list");e.previous=this._tail,this._tail.next=e}else this._head=e;this._tail=e,this._state++}removeItem(e){if(e===this._head&&e===this._tail)this._head=void 0,this._tail=void 0;else if(e===this._head){if(!e.next)throw new Error("Invalid list");e.next.previous=void 0,this._head=e.next}else if(e===this._tail){if(!e.previous)throw new Error("Invalid list");e.previous.next=void 0,this._tail=e.previous}else{const t=e.next,n=e.previous;if(!t||!n)throw new Error("Invalid list");t.previous=n,n.next=t}e.next=void 0,e.previous=void 0,this._state++}touch(e,t){if(!this._head||!this._tail)throw new Error("Invalid list");if(t===n.First||t===n.Last)if(t===n.First){if(e===this._head)return;const t=e.next,n=e.previous;e===this._tail?(n.next=void 0,this._tail=n):(t.previous=n,n.next=t),e.previous=void 0,e.next=this._head,this._head.previous=e,this._head=e,this._state++}else if(t===n.Last){if(e===this._tail)return;const t=e.next,n=e.previous;e===this._head?(t.previous=void 0,this._head=t):(t.previous=n,n.next=t),e.next=void 0,e.previous=this._tail,this._tail.next=e,this._tail=e,this._state++}}toJSON(){const e=[];return this.forEach(((t,n)=>{e.push([n,t])})),e}fromJSON(e){this.clear();for(const[t,n]of e)this.set(t,n)}}t.LinkedMap=r;t.LRUCache=class extends r{constructor(e,t=1){super(),this._limit=e,this._ratio=Math.min(Math.max(0,t),1)}get limit(){return this._limit}set limit(e){this._limit=e,this.checkTrim()}get ratio(){return this._ratio}set ratio(e){this._ratio=Math.min(Math.max(0,e),1),this.checkTrim()}get(e,t=n.AsNew){return super.get(e,t)}peek(e){return super.get(e,n.None)}set(e,t){return super.set(e,t,n.Last),this.checkTrim(),this}checkTrim(){this.size>this._limit&&this.trimOld(Math.round(this._limit*this._ratio))}}},5530:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractMessageBuffer=void 0;t.AbstractMessageBuffer=class{constructor(e="utf-8"){this._encoding=e,this._chunks=[],this._totalLength=0}get encoding(){return this._encoding}append(e){const t="string"==typeof e?this.fromString(e,this._encoding):e;this._chunks.push(t),this._totalLength+=t.byteLength}tryReadHeaders(){if(0===this._chunks.length)return;let e=0,t=0,n=0,r=0;e:for(;t<this._chunks.length;){const i=this._chunks[t];for(n=0;n<i.length;){switch(i[n]){case 13:switch(e){case 0:e=1;break;case 2:e=3;break;default:e=0}break;case 10:switch(e){case 1:e=2;break;case 3:e=4,n++;break e;default:e=0}break;default:e=0}n++}r+=i.byteLength,t++}if(4!==e)return;const i=this._read(r+n),o=new Map,s=this.toString(i,"ascii").split("\r\n");if(s.length<2)return o;for(let e=0;e<s.length-2;e++){const t=s[e],n=t.indexOf(":");if(-1===n)throw new Error("Message header must separate key and value using :");const r=t.substr(0,n),i=t.substr(n+1).trim();o.set(r,i)}return o}tryReadBody(e){if(!(this._totalLength<e))return this._read(e)}get numberOfBytes(){return this._totalLength}_read(e){if(0===e)return this.emptyBuffer();if(e>this._totalLength)throw new Error("Cannot read so many bytes!");if(this._chunks[0].byteLength===e){const t=this._chunks[0];return this._chunks.shift(),this._totalLength-=e,this.asNative(t)}if(this._chunks[0].byteLength>e){const t=this._chunks[0],n=this.asNative(t,e);return this._chunks[0]=t.slice(e),this._totalLength-=e,n}const t=this.allocNative(e);let n=0;for(;e>0;){const r=this._chunks[0];if(r.byteLength>e){const i=r.slice(0,e);t.set(i,n),n+=e,this._chunks[0]=r.slice(e),this._totalLength-=e,e-=e}else t.set(r,n),n+=r.byteLength,this._chunks.shift(),this._totalLength-=r.byteLength,e-=r.byteLength}return t}}},6525:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ReadableStreamMessageReader=t.AbstractMessageReader=t.MessageReader=void 0;const r=n(147),i=n(7574),o=n(7135);var s;!function(e){e.is=function(e){let t=e;return t&&i.func(t.listen)&&i.func(t.dispose)&&i.func(t.onError)&&i.func(t.onClose)&&i.func(t.onPartialMessage)}}(t.MessageReader||(t.MessageReader={}));class a{constructor(){this.errorEmitter=new o.Emitter,this.closeEmitter=new o.Emitter,this.partialMessageEmitter=new o.Emitter}dispose(){this.errorEmitter.dispose(),this.closeEmitter.dispose()}get onError(){return this.errorEmitter.event}fireError(e){this.errorEmitter.fire(this.asError(e))}get onClose(){return this.closeEmitter.event}fireClose(){this.closeEmitter.fire(void 0)}get onPartialMessage(){return this.partialMessageEmitter.event}firePartialMessage(e){this.partialMessageEmitter.fire(e)}asError(e){return e instanceof Error?e:new Error(`Reader received error. Reason: ${i.string(e.message)?e.message:"unknown"}`)}}t.AbstractMessageReader=a,function(e){e.fromOptions=function(e){var t;let n,i;const o=new Map;let s;const a=new Map;if(void 0===e||"string"==typeof e)n=null!=e?e:"utf-8";else{if(n=null!==(t=e.charset)&&void 0!==t?t:"utf-8",void 0!==e.contentDecoder&&(i=e.contentDecoder,o.set(i.name,i)),void 0!==e.contentDecoders)for(const t of e.contentDecoders)o.set(t.name,t);if(void 0!==e.contentTypeDecoder&&(s=e.contentTypeDecoder,a.set(s.name,s)),void 0!==e.contentTypeDecoders)for(const t of e.contentTypeDecoders)a.set(t.name,t)}return void 0===s&&(s=r.default().applicationJson.decoder,a.set(s.name,s)),{charset:n,contentDecoder:i,contentDecoders:o,contentTypeDecoder:s,contentTypeDecoders:a}}}(s||(s={}));t.ReadableStreamMessageReader=class extends a{constructor(e,t){super(),this.readable=e,this.options=s.fromOptions(t),this.buffer=r.default().messageBuffer.create(this.options.charset),this._partialMessageTimeout=1e4,this.nextMessageLength=-1,this.messageToken=0}set partialMessageTimeout(e){this._partialMessageTimeout=e}get partialMessageTimeout(){return this._partialMessageTimeout}listen(e){this.nextMessageLength=-1,this.messageToken=0,this.partialMessageTimer=void 0,this.callback=e;const t=this.readable.onData((e=>{this.onData(e)}));return this.readable.onError((e=>this.fireError(e))),this.readable.onClose((()=>this.fireClose())),t}onData(e){for(this.buffer.append(e);;){if(-1===this.nextMessageLength){const e=this.buffer.tryReadHeaders();if(!e)return;const t=e.get("Content-Length");if(!t)throw new Error("Header must provide a Content-Length property.");const n=parseInt(t);if(isNaN(n))throw new Error("Content-Length value must be a number.");this.nextMessageLength=n}const e=this.buffer.tryReadBody(this.nextMessageLength);if(void 0===e)return void this.setPartialMessageTimer();let t;this.clearPartialMessageTimer(),this.nextMessageLength=-1,t=void 0!==this.options.contentDecoder?this.options.contentDecoder.decode(e):Promise.resolve(e),t.then((e=>{this.options.contentTypeDecoder.decode(e,this.options).then((e=>{this.callback(e)}),(e=>{this.fireError(e)}))}),(e=>{this.fireError(e)}))}}clearPartialMessageTimer(){this.partialMessageTimer&&(r.default().timer.clearTimeout(this.partialMessageTimer),this.partialMessageTimer=void 0)}setPartialMessageTimer(){this.clearPartialMessageTimer(),this._partialMessageTimeout<=0||(this.partialMessageTimer=r.default().timer.setTimeout(((e,t)=>{this.partialMessageTimer=void 0,e===this.messageToken&&(this.firePartialMessage({messageToken:e,waitingTime:t}),this.setPartialMessageTimer())}),this._partialMessageTimeout,this.messageToken,this._partialMessageTimeout))}}},6654:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WriteableStreamMessageWriter=t.AbstractMessageWriter=t.MessageWriter=void 0;const r=n(147),i=n(7574),o=n(142),s=n(7135);var a;!function(e){e.is=function(e){let t=e;return t&&i.func(t.dispose)&&i.func(t.onClose)&&i.func(t.onError)&&i.func(t.write)}}(t.MessageWriter||(t.MessageWriter={}));class c{constructor(){this.errorEmitter=new s.Emitter,this.closeEmitter=new s.Emitter}dispose(){this.errorEmitter.dispose(),this.closeEmitter.dispose()}get onError(){return this.errorEmitter.event}fireError(e,t,n){this.errorEmitter.fire([this.asError(e),t,n])}get onClose(){return this.closeEmitter.event}fireClose(){this.closeEmitter.fire(void 0)}asError(e){return e instanceof Error?e:new Error(`Writer received error. Reason: ${i.string(e.message)?e.message:"unknown"}`)}}t.AbstractMessageWriter=c,function(e){e.fromOptions=function(e){var t,n;return void 0===e||"string"==typeof e?{charset:null!=e?e:"utf-8",contentTypeEncoder:r.default().applicationJson.encoder}:{charset:null!==(t=e.charset)&&void 0!==t?t:"utf-8",contentEncoder:e.contentEncoder,contentTypeEncoder:null!==(n=e.contentTypeEncoder)&&void 0!==n?n:r.default().applicationJson.encoder}}}(a||(a={}));t.WriteableStreamMessageWriter=class extends c{constructor(e,t){super(),this.writable=e,this.options=a.fromOptions(t),this.errorCount=0,this.writeSemaphore=new o.Semaphore(1),this.writable.onError((e=>this.fireError(e))),this.writable.onClose((()=>this.fireClose()))}async write(e){return this.writeSemaphore.lock((async()=>this.options.contentTypeEncoder.encode(e,this.options).then((e=>void 0!==this.options.contentEncoder?this.options.contentEncoder.encode(e):e)).then((t=>{const n=[];return n.push("Content-Length: ",t.byteLength.toString(),"\r\n"),n.push("\r\n"),this.doWrite(e,n,t)}),(e=>{throw this.fireError(e),e}))))}async doWrite(e,t,n){try{return await this.writable.write(t.join(""),"ascii"),this.writable.write(n)}catch(t){return this.handleError(t,e),Promise.reject(t)}}handleError(e,t){this.errorCount++,this.fireError(e,t,this.errorCount)}end(){this.writable.end()}}},839:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isResponseMessage=t.isNotificationMessage=t.isRequestMessage=t.NotificationType9=t.NotificationType8=t.NotificationType7=t.NotificationType6=t.NotificationType5=t.NotificationType4=t.NotificationType3=t.NotificationType2=t.NotificationType1=t.NotificationType0=t.NotificationType=t.RequestType9=t.RequestType8=t.RequestType7=t.RequestType6=t.RequestType5=t.RequestType4=t.RequestType3=t.RequestType2=t.RequestType1=t.RequestType=t.RequestType0=t.AbstractMessageSignature=t.ParameterStructures=t.ResponseError=t.ErrorCodes=void 0;const r=n(7574);var i;!function(e){e.ParseError=-32700,e.InvalidRequest=-32600,e.MethodNotFound=-32601,e.InvalidParams=-32602,e.InternalError=-32603,e.jsonrpcReservedErrorRangeStart=-32099,e.serverErrorStart=e.jsonrpcReservedErrorRangeStart,e.MessageWriteError=-32099,e.MessageReadError=-32098,e.ServerNotInitialized=-32002,e.UnknownErrorCode=-32001,e.jsonrpcReservedErrorRangeEnd=-32e3,e.serverErrorEnd=e.jsonrpcReservedErrorRangeEnd}(i=t.ErrorCodes||(t.ErrorCodes={}));class o extends Error{constructor(e,t,n){super(t),this.code=r.number(e)?e:i.UnknownErrorCode,this.data=n,Object.setPrototypeOf(this,o.prototype)}toJson(){return{code:this.code,message:this.message,data:this.data}}}t.ResponseError=o;class s{constructor(e){this.kind=e}static is(e){return e===s.auto||e===s.byName||e===s.byPosition}toString(){return this.kind}}t.ParameterStructures=s,s.auto=new s("auto"),s.byPosition=new s("byPosition"),s.byName=new s("byName");class a{constructor(e,t){this.method=e,this.numberOfParams=t}get parameterStructures(){return s.auto}}t.AbstractMessageSignature=a;t.RequestType0=class extends a{constructor(e){super(e,0)}};t.RequestType=class extends a{constructor(e,t=s.auto){super(e,1),this._parameterStructures=t}get parameterStructures(){return this._parameterStructures}};t.RequestType1=class extends a{constructor(e,t=s.auto){super(e,1),this._parameterStructures=t}get parameterStructures(){return this._parameterStructures}};t.RequestType2=class extends a{constructor(e){super(e,2)}};t.RequestType3=class extends a{constructor(e){super(e,3)}};t.RequestType4=class extends a{constructor(e){super(e,4)}};t.RequestType5=class extends a{constructor(e){super(e,5)}};t.RequestType6=class extends a{constructor(e){super(e,6)}};t.RequestType7=class extends a{constructor(e){super(e,7)}};t.RequestType8=class extends a{constructor(e){super(e,8)}};t.RequestType9=class extends a{constructor(e){super(e,9)}};t.NotificationType=class extends a{constructor(e,t=s.auto){super(e,1),this._parameterStructures=t}get parameterStructures(){return this._parameterStructures}};t.NotificationType0=class extends a{constructor(e){super(e,0)}};t.NotificationType1=class extends a{constructor(e,t=s.auto){super(e,1),this._parameterStructures=t}get parameterStructures(){return this._parameterStructures}};t.NotificationType2=class extends a{constructor(e){super(e,2)}};t.NotificationType3=class extends a{constructor(e){super(e,3)}};t.NotificationType4=class extends a{constructor(e){super(e,4)}};t.NotificationType5=class extends a{constructor(e){super(e,5)}};t.NotificationType6=class extends a{constructor(e){super(e,6)}};t.NotificationType7=class extends a{constructor(e){super(e,7)}};t.NotificationType8=class extends a{constructor(e){super(e,8)}};t.NotificationType9=class extends a{constructor(e){super(e,9)}},t.isRequestMessage=function(e){const t=e;return t&&r.string(t.method)&&(r.string(t.id)||r.number(t.id))},t.isNotificationMessage=function(e){const t=e;return t&&r.string(t.method)&&void 0===e.id},t.isResponseMessage=function(e){const t=e;return t&&(void 0!==t.result||!!t.error)&&(r.string(t.id)||r.number(t.id)||null===t.id)}},147:(e,t)=>{"use strict";let n;function r(){if(void 0===n)throw new Error("No runtime abstraction layer installed");return n}Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.install=function(e){if(void 0===e)throw new Error("No runtime abstraction layer provided");n=e}}(r||(r={})),t.default=r},142:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Semaphore=void 0;const r=n(147);t.Semaphore=class{constructor(e=1){if(e<=0)throw new Error("Capacity must be greater than 0");this._capacity=e,this._active=0,this._waiting=[]}lock(e){return new Promise(((t,n)=>{this._waiting.push({thunk:e,resolve:t,reject:n}),this.runNext()}))}get active(){return this._active}runNext(){0!==this._waiting.length&&this._active!==this._capacity&&r.default().timer.setImmediate((()=>this.doRunNext()))}doRunNext(){if(0===this._waiting.length||this._active===this._capacity)return;const e=this._waiting.shift();if(this._active++,this._active>this._capacity)throw new Error("To many thunks active");try{const t=e.thunk();t instanceof Promise?t.then((t=>{this._active--,e.resolve(t),this.runNext()}),(t=>{this._active--,e.reject(t),this.runNext()})):(this._active--,e.resolve(t),this.runNext())}catch(t){this._active--,e.reject(t),this.runNext()}}}},4389:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.createMessageConnection=t.createServerSocketTransport=t.createClientSocketTransport=t.createServerPipeTransport=t.createClientPipeTransport=t.generateRandomPipeName=t.StreamMessageWriter=t.StreamMessageReader=t.SocketMessageWriter=t.SocketMessageReader=t.IPCMessageWriter=t.IPCMessageReader=void 0;const o=n(3034);o.default.install();const s=n(3870),a=n(1017),c=n(2037),u=n(6113),l=n(1808);i(n(3870),t);class d extends s.AbstractMessageReader{constructor(e){super(),this.process=e;let t=this.process;t.on("error",(e=>this.fireError(e))),t.on("close",(()=>this.fireClose()))}listen(e){return this.process.on("message",e),s.Disposable.create((()=>this.process.off("message",e)))}}t.IPCMessageReader=d;class h extends s.AbstractMessageWriter{constructor(e){super(),this.process=e,this.errorCount=0;let t=this.process;t.on("error",(e=>this.fireError(e))),t.on("close",(()=>this.fireClose))}write(e){try{return"function"==typeof this.process.send&&this.process.send(e,void 0,void 0,(t=>{t?(this.errorCount++,this.handleError(t,e)):this.errorCount=0})),Promise.resolve()}catch(t){return this.handleError(t,e),Promise.reject(t)}}handleError(e,t){this.errorCount++,this.fireError(e,t,this.errorCount)}end(){}}t.IPCMessageWriter=h;class f extends s.ReadableStreamMessageReader{constructor(e,t="utf-8"){super(o.default().stream.asReadableStream(e),t)}}t.SocketMessageReader=f;class p extends s.WriteableStreamMessageWriter{constructor(e,t){super(o.default().stream.asWritableStream(e),t),this.socket=e}dispose(){super.dispose(),this.socket.destroy()}}t.SocketMessageWriter=p;class m extends s.ReadableStreamMessageReader{constructor(e,t){super(o.default().stream.asReadableStream(e),t)}}t.StreamMessageReader=m;class g extends s.WriteableStreamMessageWriter{constructor(e,t){super(o.default().stream.asWritableStream(e),t)}}t.StreamMessageWriter=g;const y=process.env.XDG_RUNTIME_DIR,v=new Map([["linux",107],["darwin",103]]);t.generateRandomPipeName=function(){const e=u.randomBytes(21).toString("hex");if("win32"===process.platform)return`\\\\.\\pipe\\vscode-jsonrpc-${e}-sock`;let t;t=y?a.join(y,`vscode-ipc-${e}.sock`):a.join(c.tmpdir(),`vscode-${e}.sock`);const n=v.get(process.platform);return void 0!==n&&t.length>=n&&o.default().console.warn(`WARNING: IPC handle "${t}" is longer than ${n} characters.`),t},t.createClientPipeTransport=function(e,t="utf-8"){let n;const r=new Promise(((e,t)=>{n=e}));return new Promise(((i,o)=>{let s=l.createServer((e=>{s.close(),n([new f(e,t),new p(e,t)])}));s.on("error",o),s.listen(e,(()=>{s.removeListener("error",o),i({onConnected:()=>r})}))}))},t.createServerPipeTransport=function(e,t="utf-8"){const n=l.createConnection(e);return[new f(n,t),new p(n,t)]},t.createClientSocketTransport=function(e,t="utf-8"){let n;const r=new Promise(((e,t)=>{n=e}));return new Promise(((i,o)=>{const s=l.createServer((e=>{s.close(),n([new f(e,t),new p(e,t)])}));s.on("error",o),s.listen(e,"127.0.0.1",(()=>{s.removeListener("error",o),i({onConnected:()=>r})}))}))},t.createServerSocketTransport=function(e,t="utf-8"){const n=l.createConnection(e,"127.0.0.1");return[new f(n,t),new p(n,t)]},t.createMessageConnection=function(e,t,n,r){n||(n=s.NullLogger);const i=function(e){const t=e;return void 0!==t.read&&void 0!==t.addListener}(e)?new m(e):e,o=function(e){const t=e;return void 0!==t.write&&void 0!==t.addListener}(t)?new g(t):t;return s.ConnectionStrategy.is(r)&&(r={connectionStrategy:r}),s.createMessageConnection(i,o,n,r)}},3034:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(147),i=n(3837),o=n(3911),s=n(5530);class a extends s.AbstractMessageBuffer{constructor(e="utf-8"){super(e)}emptyBuffer(){return a.emptyBuffer}fromString(e,t){return Buffer.from(e,t)}toString(e,t){return e instanceof Buffer?e.toString(t):new i.TextDecoder(t).decode(e)}asNative(e,t){return void 0===t?e instanceof Buffer?e:Buffer.from(e):e instanceof Buffer?e.slice(0,t):Buffer.from(e,0,t)}allocNative(e){return Buffer.allocUnsafe(e)}}a.emptyBuffer=Buffer.allocUnsafe(0);class c{constructor(e){this.stream=e}onClose(e){return this.stream.on("close",e),o.Disposable.create((()=>this.stream.off("close",e)))}onError(e){return this.stream.on("error",e),o.Disposable.create((()=>this.stream.off("error",e)))}onEnd(e){return this.stream.on("end",e),o.Disposable.create((()=>this.stream.off("end",e)))}onData(e){return this.stream.on("data",e),o.Disposable.create((()=>this.stream.off("data",e)))}}class u{constructor(e){this.stream=e}onClose(e){return this.stream.on("close",e),o.Disposable.create((()=>this.stream.off("close",e)))}onError(e){return this.stream.on("error",e),o.Disposable.create((()=>this.stream.off("error",e)))}onEnd(e){return this.stream.on("end",e),o.Disposable.create((()=>this.stream.off("end",e)))}write(e,t){return new Promise(((n,r)=>{const i=e=>{null==e?n():r(e)};"string"==typeof e?this.stream.write(e,t,i):this.stream.write(e,i)}))}end(){this.stream.end()}}const l=Object.freeze({messageBuffer:Object.freeze({create:e=>new a(e)}),applicationJson:Object.freeze({encoder:Object.freeze({name:"application/json",encode:(e,t)=>{try{return Promise.resolve(Buffer.from(JSON.stringify(e,void 0,0),t.charset))}catch(e){return Promise.reject(e)}}}),decoder:Object.freeze({name:"application/json",decode:(e,t)=>{try{return e instanceof Buffer?Promise.resolve(JSON.parse(e.toString(t.charset))):Promise.resolve(JSON.parse(new i.TextDecoder(t.charset).decode(e)))}catch(e){return Promise.reject(e)}}})}),stream:Object.freeze({asReadableStream:e=>new c(e),asWritableStream:e=>new u(e)}),console,timer:Object.freeze({setTimeout:(e,t,...n)=>setTimeout(e,t,...n),clearTimeout(e){clearTimeout(e)},setImmediate:(e,...t)=>setImmediate(e,...t),clearImmediate(e){clearImmediate(e)}})});function d(){return l}!function(e){e.install=function(){r.default.install(l)}}(d||(d={})),t.default=d},5028:(e,t,n)=>{"use strict";e.exports=n(4389)},1661:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.LSPErrorCodes=t.createProtocolConnection=void 0,i(n(4389),t),i(n(1674),t),i(n(6140),t),i(n(542),t);var o=n(3767);Object.defineProperty(t,"createProtocolConnection",{enumerable:!0,get:function(){return o.createProtocolConnection}}),function(e){e.lspReservedErrorRangeStart=-32899,e.ContentModified=-32801,e.RequestCancelled=-32800,e.lspReservedErrorRangeEnd=-32800}(t.LSPErrorCodes||(t.LSPErrorCodes={}))},3767:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createProtocolConnection=void 0;const r=n(4389);t.createProtocolConnection=function(e,t,n,i){return r.ConnectionStrategy.is(i)&&(i={connectionStrategy:i}),r.createMessageConnection(e,t,n,i)}},6140:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProtocolNotificationType=t.ProtocolNotificationType0=t.ProtocolRequestType=t.ProtocolRequestType0=t.RegistrationType=void 0;const r=n(4389);t.RegistrationType=class{constructor(e){this.method=e}};class i extends r.RequestType0{constructor(e){super(e)}}t.ProtocolRequestType0=i;class o extends r.RequestType{constructor(e){super(e,r.ParameterStructures.byName)}}t.ProtocolRequestType=o;class s extends r.NotificationType0{constructor(e){super(e)}}t.ProtocolNotificationType0=s;class a extends r.NotificationType{constructor(e){super(e,r.ParameterStructures.byName)}}t.ProtocolNotificationType=a},2918:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CallHierarchyOutgoingCallsRequest=t.CallHierarchyIncomingCallsRequest=t.CallHierarchyPrepareRequest=void 0;const r=n(6140);!function(e){e.method="textDocument/prepareCallHierarchy",e.type=new r.ProtocolRequestType(e.method)}(t.CallHierarchyPrepareRequest||(t.CallHierarchyPrepareRequest={})),function(e){e.method="callHierarchy/incomingCalls",e.type=new r.ProtocolRequestType(e.method)}(t.CallHierarchyIncomingCallsRequest||(t.CallHierarchyIncomingCallsRequest={})),function(e){e.method="callHierarchy/outgoingCalls",e.type=new r.ProtocolRequestType(e.method)}(t.CallHierarchyOutgoingCallsRequest||(t.CallHierarchyOutgoingCallsRequest={}))},3390:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColorPresentationRequest=t.DocumentColorRequest=void 0;const r=n(6140);!function(e){e.method="textDocument/documentColor",e.type=new r.ProtocolRequestType(e.method)}(t.DocumentColorRequest||(t.DocumentColorRequest={})),function(e){e.type=new r.ProtocolRequestType("textDocument/colorPresentation")}(t.ColorPresentationRequest||(t.ColorPresentationRequest={}))},5934:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigurationRequest=void 0;const r=n(6140);!function(e){e.type=new r.ProtocolRequestType("workspace/configuration")}(t.ConfigurationRequest||(t.ConfigurationRequest={}))},764:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DeclarationRequest=void 0;const r=n(6140);!function(e){e.method="textDocument/declaration",e.type=new r.ProtocolRequestType(e.method)}(t.DeclarationRequest||(t.DeclarationRequest={}))},7846:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WillDeleteFilesRequest=t.DidDeleteFilesNotification=t.DidRenameFilesNotification=t.WillRenameFilesRequest=t.DidCreateFilesNotification=t.WillCreateFilesRequest=t.FileOperationPatternKind=void 0;const r=n(6140);!function(e){e.file="file",e.folder="folder"}(t.FileOperationPatternKind||(t.FileOperationPatternKind={})),function(e){e.method="workspace/willCreateFiles",e.type=new r.ProtocolRequestType(e.method)}(t.WillCreateFilesRequest||(t.WillCreateFilesRequest={})),function(e){e.method="workspace/didCreateFiles",e.type=new r.ProtocolNotificationType(e.method)}(t.DidCreateFilesNotification||(t.DidCreateFilesNotification={})),function(e){e.method="workspace/willRenameFiles",e.type=new r.ProtocolRequestType(e.method)}(t.WillRenameFilesRequest||(t.WillRenameFilesRequest={})),function(e){e.method="workspace/didRenameFiles",e.type=new r.ProtocolNotificationType(e.method)}(t.DidRenameFilesNotification||(t.DidRenameFilesNotification={})),function(e){e.method="workspace/didDeleteFiles",e.type=new r.ProtocolNotificationType(e.method)}(t.DidDeleteFilesNotification||(t.DidDeleteFilesNotification={})),function(e){e.method="workspace/willDeleteFiles",e.type=new r.ProtocolRequestType(e.method)}(t.WillDeleteFilesRequest||(t.WillDeleteFilesRequest={}))},3394:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FoldingRangeRequest=t.FoldingRangeKind=void 0;const r=n(6140);!function(e){e.Comment="comment",e.Imports="imports",e.Region="region"}(t.FoldingRangeKind||(t.FoldingRangeKind={})),function(e){e.method="textDocument/foldingRange",e.type=new r.ProtocolRequestType(e.method)}(t.FoldingRangeRequest||(t.FoldingRangeRequest={}))},2122:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ImplementationRequest=void 0;const r=n(6140);!function(e){e.method="textDocument/implementation",e.type=new r.ProtocolRequestType(e.method)}(t.ImplementationRequest||(t.ImplementationRequest={}))},542:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentLinkRequest=t.CodeLensRefreshRequest=t.CodeLensResolveRequest=t.CodeLensRequest=t.WorkspaceSymbolRequest=t.CodeActionResolveRequest=t.CodeActionRequest=t.DocumentSymbolRequest=t.DocumentHighlightRequest=t.ReferencesRequest=t.DefinitionRequest=t.SignatureHelpRequest=t.SignatureHelpTriggerKind=t.HoverRequest=t.CompletionResolveRequest=t.CompletionRequest=t.CompletionTriggerKind=t.PublishDiagnosticsNotification=t.WatchKind=t.FileChangeType=t.DidChangeWatchedFilesNotification=t.WillSaveTextDocumentWaitUntilRequest=t.WillSaveTextDocumentNotification=t.TextDocumentSaveReason=t.DidSaveTextDocumentNotification=t.DidCloseTextDocumentNotification=t.DidChangeTextDocumentNotification=t.TextDocumentContentChangeEvent=t.DidOpenTextDocumentNotification=t.TextDocumentSyncKind=t.TelemetryEventNotification=t.LogMessageNotification=t.ShowMessageRequest=t.ShowMessageNotification=t.MessageType=t.DidChangeConfigurationNotification=t.ExitNotification=t.ShutdownRequest=t.InitializedNotification=t.InitializeError=t.InitializeRequest=t.WorkDoneProgressOptions=t.TextDocumentRegistrationOptions=t.StaticRegistrationOptions=t.FailureHandlingKind=t.ResourceOperationKind=t.UnregistrationRequest=t.RegistrationRequest=t.DocumentSelector=t.DocumentFilter=void 0,t.MonikerRequest=t.MonikerKind=t.UniquenessLevel=t.WillDeleteFilesRequest=t.DidDeleteFilesNotification=t.WillRenameFilesRequest=t.DidRenameFilesNotification=t.WillCreateFilesRequest=t.DidCreateFilesNotification=t.FileOperationPatternKind=t.LinkedEditingRangeRequest=t.ShowDocumentRequest=t.SemanticTokensRegistrationType=t.SemanticTokensRefreshRequest=t.SemanticTokensRangeRequest=t.SemanticTokensDeltaRequest=t.SemanticTokensRequest=t.TokenFormat=t.SemanticTokens=t.SemanticTokenModifiers=t.SemanticTokenTypes=t.CallHierarchyPrepareRequest=t.CallHierarchyOutgoingCallsRequest=t.CallHierarchyIncomingCallsRequest=t.WorkDoneProgressCancelNotification=t.WorkDoneProgressCreateRequest=t.WorkDoneProgress=t.SelectionRangeRequest=t.DeclarationRequest=t.FoldingRangeRequest=t.ColorPresentationRequest=t.DocumentColorRequest=t.ConfigurationRequest=t.DidChangeWorkspaceFoldersNotification=t.WorkspaceFoldersRequest=t.TypeDefinitionRequest=t.ImplementationRequest=t.ApplyWorkspaceEditRequest=t.ExecuteCommandRequest=t.PrepareRenameRequest=t.RenameRequest=t.PrepareSupportDefaultBehavior=t.DocumentOnTypeFormattingRequest=t.DocumentRangeFormattingRequest=t.DocumentFormattingRequest=t.DocumentLinkResolveRequest=void 0;const r=n(9533),i=n(6140),o=n(2122);Object.defineProperty(t,"ImplementationRequest",{enumerable:!0,get:function(){return o.ImplementationRequest}});const s=n(1589);Object.defineProperty(t,"TypeDefinitionRequest",{enumerable:!0,get:function(){return s.TypeDefinitionRequest}});const a=n(9795);Object.defineProperty(t,"WorkspaceFoldersRequest",{enumerable:!0,get:function(){return a.WorkspaceFoldersRequest}}),Object.defineProperty(t,"DidChangeWorkspaceFoldersNotification",{enumerable:!0,get:function(){return a.DidChangeWorkspaceFoldersNotification}});const c=n(5934);Object.defineProperty(t,"ConfigurationRequest",{enumerable:!0,get:function(){return c.ConfigurationRequest}});const u=n(3390);Object.defineProperty(t,"DocumentColorRequest",{enumerable:!0,get:function(){return u.DocumentColorRequest}}),Object.defineProperty(t,"ColorPresentationRequest",{enumerable:!0,get:function(){return u.ColorPresentationRequest}});const l=n(3394);Object.defineProperty(t,"FoldingRangeRequest",{enumerable:!0,get:function(){return l.FoldingRangeRequest}});const d=n(764);Object.defineProperty(t,"DeclarationRequest",{enumerable:!0,get:function(){return d.DeclarationRequest}});const h=n(5206);Object.defineProperty(t,"SelectionRangeRequest",{enumerable:!0,get:function(){return h.SelectionRangeRequest}});const f=n(1862);Object.defineProperty(t,"WorkDoneProgress",{enumerable:!0,get:function(){return f.WorkDoneProgress}}),Object.defineProperty(t,"WorkDoneProgressCreateRequest",{enumerable:!0,get:function(){return f.WorkDoneProgressCreateRequest}}),Object.defineProperty(t,"WorkDoneProgressCancelNotification",{enumerable:!0,get:function(){return f.WorkDoneProgressCancelNotification}});const p=n(2918);Object.defineProperty(t,"CallHierarchyIncomingCallsRequest",{enumerable:!0,get:function(){return p.CallHierarchyIncomingCallsRequest}}),Object.defineProperty(t,"CallHierarchyOutgoingCallsRequest",{enumerable:!0,get:function(){return p.CallHierarchyOutgoingCallsRequest}}),Object.defineProperty(t,"CallHierarchyPrepareRequest",{enumerable:!0,get:function(){return p.CallHierarchyPrepareRequest}});const m=n(9434);Object.defineProperty(t,"SemanticTokenTypes",{enumerable:!0,get:function(){return m.SemanticTokenTypes}}),Object.defineProperty(t,"SemanticTokenModifiers",{enumerable:!0,get:function(){return m.SemanticTokenModifiers}}),Object.defineProperty(t,"SemanticTokens",{enumerable:!0,get:function(){return m.SemanticTokens}}),Object.defineProperty(t,"TokenFormat",{enumerable:!0,get:function(){return m.TokenFormat}}),Object.defineProperty(t,"SemanticTokensRequest",{enumerable:!0,get:function(){return m.SemanticTokensRequest}}),Object.defineProperty(t,"SemanticTokensDeltaRequest",{enumerable:!0,get:function(){return m.SemanticTokensDeltaRequest}}),Object.defineProperty(t,"SemanticTokensRangeRequest",{enumerable:!0,get:function(){return m.SemanticTokensRangeRequest}}),Object.defineProperty(t,"SemanticTokensRefreshRequest",{enumerable:!0,get:function(){return m.SemanticTokensRefreshRequest}}),Object.defineProperty(t,"SemanticTokensRegistrationType",{enumerable:!0,get:function(){return m.SemanticTokensRegistrationType}});const g=n(5726);Object.defineProperty(t,"ShowDocumentRequest",{enumerable:!0,get:function(){return g.ShowDocumentRequest}});const y=n(6305);Object.defineProperty(t,"LinkedEditingRangeRequest",{enumerable:!0,get:function(){return y.LinkedEditingRangeRequest}});const v=n(7846);Object.defineProperty(t,"FileOperationPatternKind",{enumerable:!0,get:function(){return v.FileOperationPatternKind}}),Object.defineProperty(t,"DidCreateFilesNotification",{enumerable:!0,get:function(){return v.DidCreateFilesNotification}}),Object.defineProperty(t,"WillCreateFilesRequest",{enumerable:!0,get:function(){return v.WillCreateFilesRequest}}),Object.defineProperty(t,"DidRenameFilesNotification",{enumerable:!0,get:function(){return v.DidRenameFilesNotification}}),Object.defineProperty(t,"WillRenameFilesRequest",{enumerable:!0,get:function(){return v.WillRenameFilesRequest}}),Object.defineProperty(t,"DidDeleteFilesNotification",{enumerable:!0,get:function(){return v.DidDeleteFilesNotification}}),Object.defineProperty(t,"WillDeleteFilesRequest",{enumerable:!0,get:function(){return v.WillDeleteFilesRequest}});const _=n(3443);var b,S;Object.defineProperty(t,"UniquenessLevel",{enumerable:!0,get:function(){return _.UniquenessLevel}}),Object.defineProperty(t,"MonikerKind",{enumerable:!0,get:function(){return _.MonikerKind}}),Object.defineProperty(t,"MonikerRequest",{enumerable:!0,get:function(){return _.MonikerRequest}}),function(e){e.is=function(e){const t=e;return r.string(t.language)||r.string(t.scheme)||r.string(t.pattern)}}(b=t.DocumentFilter||(t.DocumentFilter={})),function(e){e.is=function(e){if(!Array.isArray(e))return!1;for(let t of e)if(!r.string(t)&&!b.is(t))return!1;return!0}}(S=t.DocumentSelector||(t.DocumentSelector={})),function(e){e.type=new i.ProtocolRequestType("client/registerCapability")}(t.RegistrationRequest||(t.RegistrationRequest={})),function(e){e.type=new i.ProtocolRequestType("client/unregisterCapability")}(t.UnregistrationRequest||(t.UnregistrationRequest={})),function(e){e.Create="create",e.Rename="rename",e.Delete="delete"}(t.ResourceOperationKind||(t.ResourceOperationKind={})),function(e){e.Abort="abort",e.Transactional="transactional",e.TextOnlyTransactional="textOnlyTransactional",e.Undo="undo"}(t.FailureHandlingKind||(t.FailureHandlingKind={})),function(e){e.hasId=function(e){const t=e;return t&&r.string(t.id)&&t.id.length>0}}(t.StaticRegistrationOptions||(t.StaticRegistrationOptions={})),function(e){e.is=function(e){const t=e;return t&&(null===t.documentSelector||S.is(t.documentSelector))}}(t.TextDocumentRegistrationOptions||(t.TextDocumentRegistrationOptions={})),function(e){e.is=function(e){const t=e;return r.objectLiteral(t)&&(void 0===t.workDoneProgress||r.boolean(t.workDoneProgress))},e.hasWorkDoneProgress=function(e){const t=e;return t&&r.boolean(t.workDoneProgress)}}(t.WorkDoneProgressOptions||(t.WorkDoneProgressOptions={})),function(e){e.type=new i.ProtocolRequestType("initialize")}(t.InitializeRequest||(t.InitializeRequest={})),function(e){e.unknownProtocolVersion=1}(t.InitializeError||(t.InitializeError={})),function(e){e.type=new i.ProtocolNotificationType("initialized")}(t.InitializedNotification||(t.InitializedNotification={})),function(e){e.type=new i.ProtocolRequestType0("shutdown")}(t.ShutdownRequest||(t.ShutdownRequest={})),function(e){e.type=new i.ProtocolNotificationType0("exit")}(t.ExitNotification||(t.ExitNotification={})),function(e){e.type=new i.ProtocolNotificationType("workspace/didChangeConfiguration")}(t.DidChangeConfigurationNotification||(t.DidChangeConfigurationNotification={})),function(e){e.Error=1,e.Warning=2,e.Info=3,e.Log=4}(t.MessageType||(t.MessageType={})),function(e){e.type=new i.ProtocolNotificationType("window/showMessage")}(t.ShowMessageNotification||(t.ShowMessageNotification={})),function(e){e.type=new i.ProtocolRequestType("window/showMessageRequest")}(t.ShowMessageRequest||(t.ShowMessageRequest={})),function(e){e.type=new i.ProtocolNotificationType("window/logMessage")}(t.LogMessageNotification||(t.LogMessageNotification={})),function(e){e.type=new i.ProtocolNotificationType("telemetry/event")}(t.TelemetryEventNotification||(t.TelemetryEventNotification={})),function(e){e.None=0,e.Full=1,e.Incremental=2}(t.TextDocumentSyncKind||(t.TextDocumentSyncKind={})),function(e){e.method="textDocument/didOpen",e.type=new i.ProtocolNotificationType(e.method)}(t.DidOpenTextDocumentNotification||(t.DidOpenTextDocumentNotification={})),function(e){e.isIncremental=function(e){let t=e;return null!=t&&"string"==typeof t.text&&void 0!==t.range&&(void 0===t.rangeLength||"number"==typeof t.rangeLength)},e.isFull=function(e){let t=e;return null!=t&&"string"==typeof t.text&&void 0===t.range&&void 0===t.rangeLength}}(t.TextDocumentContentChangeEvent||(t.TextDocumentContentChangeEvent={})),function(e){e.method="textDocument/didChange",e.type=new i.ProtocolNotificationType(e.method)}(t.DidChangeTextDocumentNotification||(t.DidChangeTextDocumentNotification={})),function(e){e.method="textDocument/didClose",e.type=new i.ProtocolNotificationType(e.method)}(t.DidCloseTextDocumentNotification||(t.DidCloseTextDocumentNotification={})),function(e){e.method="textDocument/didSave",e.type=new i.ProtocolNotificationType(e.method)}(t.DidSaveTextDocumentNotification||(t.DidSaveTextDocumentNotification={})),function(e){e.Manual=1,e.AfterDelay=2,e.FocusOut=3}(t.TextDocumentSaveReason||(t.TextDocumentSaveReason={})),function(e){e.method="textDocument/willSave",e.type=new i.ProtocolNotificationType(e.method)}(t.WillSaveTextDocumentNotification||(t.WillSaveTextDocumentNotification={})),function(e){e.method="textDocument/willSaveWaitUntil",e.type=new i.ProtocolRequestType(e.method)}(t.WillSaveTextDocumentWaitUntilRequest||(t.WillSaveTextDocumentWaitUntilRequest={})),function(e){e.type=new i.ProtocolNotificationType("workspace/didChangeWatchedFiles")}(t.DidChangeWatchedFilesNotification||(t.DidChangeWatchedFilesNotification={})),function(e){e.Created=1,e.Changed=2,e.Deleted=3}(t.FileChangeType||(t.FileChangeType={})),function(e){e.Create=1,e.Change=2,e.Delete=4}(t.WatchKind||(t.WatchKind={})),function(e){e.type=new i.ProtocolNotificationType("textDocument/publishDiagnostics")}(t.PublishDiagnosticsNotification||(t.PublishDiagnosticsNotification={})),function(e){e.Invoked=1,e.TriggerCharacter=2,e.TriggerForIncompleteCompletions=3}(t.CompletionTriggerKind||(t.CompletionTriggerKind={})),function(e){e.method="textDocument/completion",e.type=new i.ProtocolRequestType(e.method)}(t.CompletionRequest||(t.CompletionRequest={})),function(e){e.method="completionItem/resolve",e.type=new i.ProtocolRequestType(e.method)}(t.CompletionResolveRequest||(t.CompletionResolveRequest={})),function(e){e.method="textDocument/hover",e.type=new i.ProtocolRequestType(e.method)}(t.HoverRequest||(t.HoverRequest={})),function(e){e.Invoked=1,e.TriggerCharacter=2,e.ContentChange=3}(t.SignatureHelpTriggerKind||(t.SignatureHelpTriggerKind={})),function(e){e.method="textDocument/signatureHelp",e.type=new i.ProtocolRequestType(e.method)}(t.SignatureHelpRequest||(t.SignatureHelpRequest={})),function(e){e.method="textDocument/definition",e.type=new i.ProtocolRequestType(e.method)}(t.DefinitionRequest||(t.DefinitionRequest={})),function(e){e.method="textDocument/references",e.type=new i.ProtocolRequestType(e.method)}(t.ReferencesRequest||(t.ReferencesRequest={})),function(e){e.method="textDocument/documentHighlight",e.type=new i.ProtocolRequestType(e.method)}(t.DocumentHighlightRequest||(t.DocumentHighlightRequest={})),function(e){e.method="textDocument/documentSymbol",e.type=new i.ProtocolRequestType(e.method)}(t.DocumentSymbolRequest||(t.DocumentSymbolRequest={})),function(e){e.method="textDocument/codeAction",e.type=new i.ProtocolRequestType(e.method)}(t.CodeActionRequest||(t.CodeActionRequest={})),function(e){e.method="codeAction/resolve",e.type=new i.ProtocolRequestType(e.method)}(t.CodeActionResolveRequest||(t.CodeActionResolveRequest={})),function(e){e.method="workspace/symbol",e.type=new i.ProtocolRequestType(e.method)}(t.WorkspaceSymbolRequest||(t.WorkspaceSymbolRequest={})),function(e){e.method="textDocument/codeLens",e.type=new i.ProtocolRequestType(e.method)}(t.CodeLensRequest||(t.CodeLensRequest={})),function(e){e.method="codeLens/resolve",e.type=new i.ProtocolRequestType(e.method)}(t.CodeLensResolveRequest||(t.CodeLensResolveRequest={})),function(e){e.method="workspace/codeLens/refresh",e.type=new i.ProtocolRequestType0(e.method)}(t.CodeLensRefreshRequest||(t.CodeLensRefreshRequest={})),function(e){e.method="textDocument/documentLink",e.type=new i.ProtocolRequestType(e.method)}(t.DocumentLinkRequest||(t.DocumentLinkRequest={})),function(e){e.method="documentLink/resolve",e.type=new i.ProtocolRequestType(e.method)}(t.DocumentLinkResolveRequest||(t.DocumentLinkResolveRequest={})),function(e){e.method="textDocument/formatting",e.type=new i.ProtocolRequestType(e.method)}(t.DocumentFormattingRequest||(t.DocumentFormattingRequest={})),function(e){e.method="textDocument/rangeFormatting",e.type=new i.ProtocolRequestType(e.method)}(t.DocumentRangeFormattingRequest||(t.DocumentRangeFormattingRequest={})),function(e){e.method="textDocument/onTypeFormatting",e.type=new i.ProtocolRequestType(e.method)}(t.DocumentOnTypeFormattingRequest||(t.DocumentOnTypeFormattingRequest={})),function(e){e.Identifier=1}(t.PrepareSupportDefaultBehavior||(t.PrepareSupportDefaultBehavior={})),function(e){e.method="textDocument/rename",e.type=new i.ProtocolRequestType(e.method)}(t.RenameRequest||(t.RenameRequest={})),function(e){e.method="textDocument/prepareRename",e.type=new i.ProtocolRequestType(e.method)}(t.PrepareRenameRequest||(t.PrepareRenameRequest={})),function(e){e.type=new i.ProtocolRequestType("workspace/executeCommand")}(t.ExecuteCommandRequest||(t.ExecuteCommandRequest={})),function(e){e.type=new i.ProtocolRequestType("workspace/applyEdit")}(t.ApplyWorkspaceEditRequest||(t.ApplyWorkspaceEditRequest={}))},6305:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LinkedEditingRangeRequest=void 0;const r=n(6140);!function(e){e.method="textDocument/linkedEditingRange",e.type=new r.ProtocolRequestType(e.method)}(t.LinkedEditingRangeRequest||(t.LinkedEditingRangeRequest={}))},3443:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MonikerRequest=t.MonikerKind=t.UniquenessLevel=void 0;const r=n(6140);!function(e){e.document="document",e.project="project",e.group="group",e.scheme="scheme",e.global="global"}(t.UniquenessLevel||(t.UniquenessLevel={})),function(e){e.import="import",e.export="export",e.local="local"}(t.MonikerKind||(t.MonikerKind={})),function(e){e.method="textDocument/moniker",e.type=new r.ProtocolRequestType(e.method)}(t.MonikerRequest||(t.MonikerRequest={}))},1862:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WorkDoneProgressCancelNotification=t.WorkDoneProgressCreateRequest=t.WorkDoneProgress=void 0;const r=n(4389),i=n(6140);!function(e){e.type=new r.ProgressType,e.is=function(t){return t===e.type}}(t.WorkDoneProgress||(t.WorkDoneProgress={})),function(e){e.type=new i.ProtocolRequestType("window/workDoneProgress/create")}(t.WorkDoneProgressCreateRequest||(t.WorkDoneProgressCreateRequest={})),function(e){e.type=new i.ProtocolNotificationType("window/workDoneProgress/cancel")}(t.WorkDoneProgressCancelNotification||(t.WorkDoneProgressCancelNotification={}))},5206:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionRangeRequest=void 0;const r=n(6140);!function(e){e.method="textDocument/selectionRange",e.type=new r.ProtocolRequestType(e.method)}(t.SelectionRangeRequest||(t.SelectionRangeRequest={}))},9434:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SemanticTokensRefreshRequest=t.SemanticTokensRangeRequest=t.SemanticTokensDeltaRequest=t.SemanticTokensRequest=t.SemanticTokensRegistrationType=t.TokenFormat=t.SemanticTokens=t.SemanticTokenModifiers=t.SemanticTokenTypes=void 0;const r=n(6140);!function(e){e.namespace="namespace",e.type="type",e.class="class",e.enum="enum",e.interface="interface",e.struct="struct",e.typeParameter="typeParameter",e.parameter="parameter",e.variable="variable",e.property="property",e.enumMember="enumMember",e.event="event",e.function="function",e.method="method",e.macro="macro",e.keyword="keyword",e.modifier="modifier",e.comment="comment",e.string="string",e.number="number",e.regexp="regexp",e.operator="operator"}(t.SemanticTokenTypes||(t.SemanticTokenTypes={})),function(e){e.declaration="declaration",e.definition="definition",e.readonly="readonly",e.static="static",e.deprecated="deprecated",e.abstract="abstract",e.async="async",e.modification="modification",e.documentation="documentation",e.defaultLibrary="defaultLibrary"}(t.SemanticTokenModifiers||(t.SemanticTokenModifiers={})),function(e){e.is=function(e){const t=e;return void 0!==t&&(void 0===t.resultId||"string"==typeof t.resultId)&&Array.isArray(t.data)&&(0===t.data.length||"number"==typeof t.data[0])}}(t.SemanticTokens||(t.SemanticTokens={})),function(e){e.Relative="relative"}(t.TokenFormat||(t.TokenFormat={})),function(e){e.method="textDocument/semanticTokens",e.type=new r.RegistrationType(e.method)}(t.SemanticTokensRegistrationType||(t.SemanticTokensRegistrationType={})),function(e){e.method="textDocument/semanticTokens/full",e.type=new r.ProtocolRequestType(e.method)}(t.SemanticTokensRequest||(t.SemanticTokensRequest={})),function(e){e.method="textDocument/semanticTokens/full/delta",e.type=new r.ProtocolRequestType(e.method)}(t.SemanticTokensDeltaRequest||(t.SemanticTokensDeltaRequest={})),function(e){e.method="textDocument/semanticTokens/range",e.type=new r.ProtocolRequestType(e.method)}(t.SemanticTokensRangeRequest||(t.SemanticTokensRangeRequest={})),function(e){e.method="workspace/semanticTokens/refresh",e.type=new r.ProtocolRequestType0(e.method)}(t.SemanticTokensRefreshRequest||(t.SemanticTokensRefreshRequest={}))},5726:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ShowDocumentRequest=void 0;const r=n(6140);!function(e){e.method="window/showDocument",e.type=new r.ProtocolRequestType(e.method)}(t.ShowDocumentRequest||(t.ShowDocumentRequest={}))},1589:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TypeDefinitionRequest=void 0;const r=n(6140);!function(e){e.method="textDocument/typeDefinition",e.type=new r.ProtocolRequestType(e.method)}(t.TypeDefinitionRequest||(t.TypeDefinitionRequest={}))},9795:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DidChangeWorkspaceFoldersNotification=t.WorkspaceFoldersRequest=void 0;const r=n(6140);!function(e){e.type=new r.ProtocolRequestType0("workspace/workspaceFolders")}(t.WorkspaceFoldersRequest||(t.WorkspaceFoldersRequest={})),function(e){e.type=new r.ProtocolNotificationType("workspace/didChangeWorkspaceFolders")}(t.DidChangeWorkspaceFoldersNotification||(t.DidChangeWorkspaceFoldersNotification={}))},9533:(e,t)=>{"use strict";function n(e){return"string"==typeof e||e instanceof String}function r(e){return Array.isArray(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.objectLiteral=t.typedArray=t.stringArray=t.array=t.func=t.error=t.number=t.string=t.boolean=void 0,t.boolean=function(e){return!0===e||!1===e},t.string=n,t.number=function(e){return"number"==typeof e||e instanceof Number},t.error=function(e){return e instanceof Error},t.func=function(e){return"function"==typeof e},t.array=r,t.stringArray=function(e){return r(e)&&e.every((e=>n(e)))},t.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)},t.objectLiteral=function(e){return null!==e&&"object"==typeof e}},273:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.createProtocolConnection=void 0;const o=n(5028);i(n(5028),t),i(n(1661),t),t.createProtocolConnection=function(e,t,n,r){return o.createMessageConnection(e,t,n,r)}},6560:(e,t,n)=>{"use strict";e.exports=n(273)},1040:(e,t,n)=>{"use strict";n.r(t),n.d(t,{TextDocument:()=>r});var r,i=function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))},o=function(){function e(e,t,n,r){this._uri=e,this._languageId=t,this._version=n,this._content=r,this._lineOffsets=void 0}return Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"languageId",{get:function(){return this._languageId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!1,configurable:!0}),e.prototype.getText=function(e){if(e){var t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content},e.prototype.update=function(t,n){for(var r=0,o=t;r<o.length;r++){var s=o[r];if(e.isIncremental(s)){var u=c(s.range),l=this.offsetAt(u.start),d=this.offsetAt(u.end);this._content=this._content.substring(0,l)+s.text+this._content.substring(d,this._content.length);var h=Math.max(u.start.line,0),f=Math.max(u.end.line,0),p=this._lineOffsets,m=a(s.text,!1,l);if(f-h===m.length)for(var g=0,y=m.length;g<y;g++)p[g+h+1]=m[g];else m.length<1e4?p.splice.apply(p,i([h+1,f-h],m,!1)):this._lineOffsets=p=p.slice(0,h+1).concat(m,p.slice(f+1));var v=s.text.length-(d-l);if(0!==v)for(g=h+1+m.length,y=p.length;g<y;g++)p[g]=p[g]+v}else{if(!e.isFull(s))throw new Error("Unknown change event received");this._content=s.text,this._lineOffsets=void 0}}this._version=n},e.prototype.getLineOffsets=function(){return void 0===this._lineOffsets&&(this._lineOffsets=a(this._content,!0)),this._lineOffsets},e.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var t=this.getLineOffsets(),n=0,r=t.length;if(0===r)return{line:0,character:e};for(;n<r;){var i=Math.floor((n+r)/2);t[i]>e?r=i:n=i+1}var o=n-1;return{line:o,character:e-t[o]}},e.prototype.offsetAt=function(e){var t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;var n=t[e.line],r=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,r),n)},Object.defineProperty(e.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!1,configurable:!0}),e.isIncremental=function(e){var t=e;return null!=t&&"string"==typeof t.text&&void 0!==t.range&&(void 0===t.rangeLength||"number"==typeof t.rangeLength)},e.isFull=function(e){var t=e;return null!=t&&"string"==typeof t.text&&void 0===t.range&&void 0===t.rangeLength},e}();function s(e,t){if(e.length<=1)return e;var n=e.length/2|0,r=e.slice(0,n),i=e.slice(n);s(r,t),s(i,t);for(var o=0,a=0,c=0;o<r.length&&a<i.length;){var u=t(r[o],i[a]);e[c++]=u<=0?r[o++]:i[a++]}for(;o<r.length;)e[c++]=r[o++];for(;a<i.length;)e[c++]=i[a++];return e}function a(e,t,n){void 0===n&&(n=0);for(var r=t?[n]:[],i=0;i<e.length;i++){var o=e.charCodeAt(i);13!==o&&10!==o||(13===o&&i+1<e.length&&10===e.charCodeAt(i+1)&&i++,r.push(n+i+1))}return r}function c(e){var t=e.start,n=e.end;return t.line>n.line||t.line===n.line&&t.character>n.character?{start:n,end:t}:e}function u(e){var t=c(e.range);return t!==e.range?{newText:e.newText,range:t}:e}!function(e){e.create=function(e,t,n,r){return new o(e,t,n,r)},e.update=function(e,t,n){if(e instanceof o)return e.update(t,n),e;throw new Error("TextDocument.update: document must be created by TextDocument.create")},e.applyEdits=function(e,t){for(var n=e.getText(),r=0,i=[],o=0,a=s(t.map(u),(function(e,t){var n=e.range.start.line-t.range.start.line;return 0===n?e.range.start.character-t.range.start.character:n}));o<a.length;o++){var c=a[o],l=e.offsetAt(c.range.start);if(l<r)throw new Error("Overlapping edit");l>r&&i.push(n.substring(r,l)),c.newText.length&&i.push(c.newText),r=e.offsetAt(c.range.end)}return i.push(n.substr(r)),i.join("")}}(r||(r={}))},1674:(e,t,n)=>{"use strict";var r,i,o,s,a,c,u,l,d,h,f,p,m,g,y,v,_,b,S,w,E,R,x,C,P,T;n.r(t),n.d(t,{integer:()=>r,uinteger:()=>i,Position:()=>o,Range:()=>s,Location:()=>a,LocationLink:()=>c,Color:()=>u,ColorInformation:()=>l,ColorPresentation:()=>d,FoldingRangeKind:()=>h,FoldingRange:()=>f,DiagnosticRelatedInformation:()=>p,DiagnosticSeverity:()=>m,DiagnosticTag:()=>g,CodeDescription:()=>y,Diagnostic:()=>v,Command:()=>_,TextEdit:()=>b,ChangeAnnotation:()=>S,ChangeAnnotationIdentifier:()=>w,AnnotatedTextEdit:()=>E,TextDocumentEdit:()=>R,CreateFile:()=>x,RenameFile:()=>C,DeleteFile:()=>P,WorkspaceEdit:()=>T,WorkspaceChange:()=>ae,TextDocumentIdentifier:()=>O,VersionedTextDocumentIdentifier:()=>k,OptionalVersionedTextDocumentIdentifier:()=>D,TextDocumentItem:()=>A,MarkupKind:()=>N,MarkupContent:()=>M,CompletionItemKind:()=>j,InsertTextFormat:()=>F,CompletionItemTag:()=>q,InsertReplaceEdit:()=>L,InsertTextMode:()=>I,CompletionItem:()=>$,CompletionList:()=>H,MarkedString:()=>W,Hover:()=>K,ParameterInformation:()=>B,SignatureInformation:()=>U,DocumentHighlightKind:()=>G,DocumentHighlight:()=>V,SymbolKind:()=>z,SymbolTag:()=>Y,SymbolInformation:()=>Q,DocumentSymbol:()=>J,CodeActionKind:()=>X,CodeActionContext:()=>Z,CodeAction:()=>ee,CodeLens:()=>te,FormattingOptions:()=>ne,DocumentLink:()=>re,SelectionRange:()=>ie,EOL:()=>ue,TextDocument:()=>ce}),function(e){e.MIN_VALUE=-2147483648,e.MAX_VALUE=2147483647}(r||(r={})),function(e){e.MIN_VALUE=0,e.MAX_VALUE=2147483647}(i||(i={})),function(e){e.create=function(e,t){return e===Number.MAX_VALUE&&(e=i.MAX_VALUE),t===Number.MAX_VALUE&&(t=i.MAX_VALUE),{line:e,character:t}},e.is=function(e){var t=e;return le.objectLiteral(t)&&le.uinteger(t.line)&&le.uinteger(t.character)}}(o||(o={})),function(e){e.create=function(e,t,n,r){if(le.uinteger(e)&&le.uinteger(t)&&le.uinteger(n)&&le.uinteger(r))return{start:o.create(e,t),end:o.create(n,r)};if(o.is(e)&&o.is(t))return{start:e,end:t};throw new Error("Range#create called with invalid arguments["+e+", "+t+", "+n+", "+r+"]")},e.is=function(e){var t=e;return le.objectLiteral(t)&&o.is(t.start)&&o.is(t.end)}}(s||(s={})),function(e){e.create=function(e,t){return{uri:e,range:t}},e.is=function(e){var t=e;return le.defined(t)&&s.is(t.range)&&(le.string(t.uri)||le.undefined(t.uri))}}(a||(a={})),function(e){e.create=function(e,t,n,r){return{targetUri:e,targetRange:t,targetSelectionRange:n,originSelectionRange:r}},e.is=function(e){var t=e;return le.defined(t)&&s.is(t.targetRange)&&le.string(t.targetUri)&&(s.is(t.targetSelectionRange)||le.undefined(t.targetSelectionRange))&&(s.is(t.originSelectionRange)||le.undefined(t.originSelectionRange))}}(c||(c={})),function(e){e.create=function(e,t,n,r){return{red:e,green:t,blue:n,alpha:r}},e.is=function(e){var t=e;return le.numberRange(t.red,0,1)&&le.numberRange(t.green,0,1)&&le.numberRange(t.blue,0,1)&&le.numberRange(t.alpha,0,1)}}(u||(u={})),function(e){e.create=function(e,t){return{range:e,color:t}},e.is=function(e){var t=e;return s.is(t.range)&&u.is(t.color)}}(l||(l={})),function(e){e.create=function(e,t,n){return{label:e,textEdit:t,additionalTextEdits:n}},e.is=function(e){var t=e;return le.string(t.label)&&(le.undefined(t.textEdit)||b.is(t))&&(le.undefined(t.additionalTextEdits)||le.typedArray(t.additionalTextEdits,b.is))}}(d||(d={})),function(e){e.Comment="comment",e.Imports="imports",e.Region="region"}(h||(h={})),function(e){e.create=function(e,t,n,r,i){var o={startLine:e,endLine:t};return le.defined(n)&&(o.startCharacter=n),le.defined(r)&&(o.endCharacter=r),le.defined(i)&&(o.kind=i),o},e.is=function(e){var t=e;return le.uinteger(t.startLine)&&le.uinteger(t.startLine)&&(le.undefined(t.startCharacter)||le.uinteger(t.startCharacter))&&(le.undefined(t.endCharacter)||le.uinteger(t.endCharacter))&&(le.undefined(t.kind)||le.string(t.kind))}}(f||(f={})),function(e){e.create=function(e,t){return{location:e,message:t}},e.is=function(e){var t=e;return le.defined(t)&&a.is(t.location)&&le.string(t.message)}}(p||(p={})),function(e){e.Error=1,e.Warning=2,e.Information=3,e.Hint=4}(m||(m={})),function(e){e.Unnecessary=1,e.Deprecated=2}(g||(g={})),function(e){e.is=function(e){var t=e;return null!=t&&le.string(t.href)}}(y||(y={})),function(e){e.create=function(e,t,n,r,i,o){var s={range:e,message:t};return le.defined(n)&&(s.severity=n),le.defined(r)&&(s.code=r),le.defined(i)&&(s.source=i),le.defined(o)&&(s.relatedInformation=o),s},e.is=function(e){var t,n=e;return le.defined(n)&&s.is(n.range)&&le.string(n.message)&&(le.number(n.severity)||le.undefined(n.severity))&&(le.integer(n.code)||le.string(n.code)||le.undefined(n.code))&&(le.undefined(n.codeDescription)||le.string(null===(t=n.codeDescription)||void 0===t?void 0:t.href))&&(le.string(n.source)||le.undefined(n.source))&&(le.undefined(n.relatedInformation)||le.typedArray(n.relatedInformation,p.is))}}(v||(v={})),function(e){e.create=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i={title:e,command:t};return le.defined(n)&&n.length>0&&(i.arguments=n),i},e.is=function(e){var t=e;return le.defined(t)&&le.string(t.title)&&le.string(t.command)}}(_||(_={})),function(e){e.replace=function(e,t){return{range:e,newText:t}},e.insert=function(e,t){return{range:{start:e,end:e},newText:t}},e.del=function(e){return{range:e,newText:""}},e.is=function(e){var t=e;return le.objectLiteral(t)&&le.string(t.newText)&&s.is(t.range)}}(b||(b={})),function(e){e.create=function(e,t,n){var r={label:e};return void 0!==t&&(r.needsConfirmation=t),void 0!==n&&(r.description=n),r},e.is=function(e){var t=e;return void 0!==t&&le.objectLiteral(t)&&le.string(t.label)&&(le.boolean(t.needsConfirmation)||void 0===t.needsConfirmation)&&(le.string(t.description)||void 0===t.description)}}(S||(S={})),function(e){e.is=function(e){return"string"==typeof e}}(w||(w={})),function(e){e.replace=function(e,t,n){return{range:e,newText:t,annotationId:n}},e.insert=function(e,t,n){return{range:{start:e,end:e},newText:t,annotationId:n}},e.del=function(e,t){return{range:e,newText:"",annotationId:t}},e.is=function(e){var t=e;return b.is(t)&&(S.is(t.annotationId)||w.is(t.annotationId))}}(E||(E={})),function(e){e.create=function(e,t){return{textDocument:e,edits:t}},e.is=function(e){var t=e;return le.defined(t)&&D.is(t.textDocument)&&Array.isArray(t.edits)}}(R||(R={})),function(e){e.create=function(e,t,n){var r={kind:"create",uri:e};return void 0===t||void 0===t.overwrite&&void 0===t.ignoreIfExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},e.is=function(e){var t=e;return t&&"create"===t.kind&&le.string(t.uri)&&(void 0===t.options||(void 0===t.options.overwrite||le.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||le.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||w.is(t.annotationId))}}(x||(x={})),function(e){e.create=function(e,t,n,r){var i={kind:"rename",oldUri:e,newUri:t};return void 0===n||void 0===n.overwrite&&void 0===n.ignoreIfExists||(i.options=n),void 0!==r&&(i.annotationId=r),i},e.is=function(e){var t=e;return t&&"rename"===t.kind&&le.string(t.oldUri)&&le.string(t.newUri)&&(void 0===t.options||(void 0===t.options.overwrite||le.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||le.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||w.is(t.annotationId))}}(C||(C={})),function(e){e.create=function(e,t,n){var r={kind:"delete",uri:e};return void 0===t||void 0===t.recursive&&void 0===t.ignoreIfNotExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},e.is=function(e){var t=e;return t&&"delete"===t.kind&&le.string(t.uri)&&(void 0===t.options||(void 0===t.options.recursive||le.boolean(t.options.recursive))&&(void 0===t.options.ignoreIfNotExists||le.boolean(t.options.ignoreIfNotExists)))&&(void 0===t.annotationId||w.is(t.annotationId))}}(P||(P={})),function(e){e.is=function(e){var t=e;return t&&(void 0!==t.changes||void 0!==t.documentChanges)&&(void 0===t.documentChanges||t.documentChanges.every((function(e){return le.string(e.kind)?x.is(e)||C.is(e)||P.is(e):R.is(e)})))}}(T||(T={}));var O,k,D,A,N,M,j,F,q,L,I,$,H,W,K,B,U,G,V,z,Y,Q,J,X,Z,ee,te,ne,re,ie,oe=function(){function e(e,t){this.edits=e,this.changeAnnotations=t}return e.prototype.insert=function(e,t,n){var r,i;if(void 0===n?r=b.insert(e,t):w.is(n)?(i=n,r=E.insert(e,t,n)):(this.assertChangeAnnotations(this.changeAnnotations),i=this.changeAnnotations.manage(n),r=E.insert(e,t,i)),this.edits.push(r),void 0!==i)return i},e.prototype.replace=function(e,t,n){var r,i;if(void 0===n?r=b.replace(e,t):w.is(n)?(i=n,r=E.replace(e,t,n)):(this.assertChangeAnnotations(this.changeAnnotations),i=this.changeAnnotations.manage(n),r=E.replace(e,t,i)),this.edits.push(r),void 0!==i)return i},e.prototype.delete=function(e,t){var n,r;if(void 0===t?n=b.del(e):w.is(t)?(r=t,n=E.del(e,t)):(this.assertChangeAnnotations(this.changeAnnotations),r=this.changeAnnotations.manage(t),n=E.del(e,r)),this.edits.push(n),void 0!==r)return r},e.prototype.add=function(e){this.edits.push(e)},e.prototype.all=function(){return this.edits},e.prototype.clear=function(){this.edits.splice(0,this.edits.length)},e.prototype.assertChangeAnnotations=function(e){if(void 0===e)throw new Error("Text edit change is not configured to manage change annotations.")},e}(),se=function(){function e(e){this._annotations=void 0===e?Object.create(null):e,this._counter=0,this._size=0}return e.prototype.all=function(){return this._annotations},Object.defineProperty(e.prototype,"size",{get:function(){return this._size},enumerable:!1,configurable:!0}),e.prototype.manage=function(e,t){var n;if(w.is(e)?n=e:(n=this.nextId(),t=e),void 0!==this._annotations[n])throw new Error("Id "+n+" is already in use.");if(void 0===t)throw new Error("No annotation provided for id "+n);return this._annotations[n]=t,this._size++,n},e.prototype.nextId=function(){return this._counter++,this._counter.toString()},e}(),ae=function(){function e(e){var t=this;this._textEditChanges=Object.create(null),void 0!==e?(this._workspaceEdit=e,e.documentChanges?(this._changeAnnotations=new se(e.changeAnnotations),e.changeAnnotations=this._changeAnnotations.all(),e.documentChanges.forEach((function(e){if(R.is(e)){var n=new oe(e.edits,t._changeAnnotations);t._textEditChanges[e.textDocument.uri]=n}}))):e.changes&&Object.keys(e.changes).forEach((function(n){var r=new oe(e.changes[n]);t._textEditChanges[n]=r}))):this._workspaceEdit={}}return Object.defineProperty(e.prototype,"edit",{get:function(){return this.initDocumentChanges(),void 0!==this._changeAnnotations&&(0===this._changeAnnotations.size?this._workspaceEdit.changeAnnotations=void 0:this._workspaceEdit.changeAnnotations=this._changeAnnotations.all()),this._workspaceEdit},enumerable:!1,configurable:!0}),e.prototype.getTextEditChange=function(e){if(D.is(e)){if(this.initDocumentChanges(),void 0===this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var t={uri:e.uri,version:e.version};if(!(r=this._textEditChanges[t.uri])){var n={textDocument:t,edits:i=[]};this._workspaceEdit.documentChanges.push(n),r=new oe(i,this._changeAnnotations),this._textEditChanges[t.uri]=r}return r}if(this.initChanges(),void 0===this._workspaceEdit.changes)throw new Error("Workspace edit is not configured for normal text edit changes.");var r;if(!(r=this._textEditChanges[e])){var i=[];this._workspaceEdit.changes[e]=i,r=new oe(i),this._textEditChanges[e]=r}return r},e.prototype.initDocumentChanges=function(){void 0===this._workspaceEdit.documentChanges&&void 0===this._workspaceEdit.changes&&(this._changeAnnotations=new se,this._workspaceEdit.documentChanges=[],this._workspaceEdit.changeAnnotations=this._changeAnnotations.all())},e.prototype.initChanges=function(){void 0===this._workspaceEdit.documentChanges&&void 0===this._workspaceEdit.changes&&(this._workspaceEdit.changes=Object.create(null))},e.prototype.createFile=function(e,t,n){if(this.initDocumentChanges(),void 0===this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var r,i,o;if(S.is(t)||w.is(t)?r=t:n=t,void 0===r?i=x.create(e,n):(o=w.is(r)?r:this._changeAnnotations.manage(r),i=x.create(e,n,o)),this._workspaceEdit.documentChanges.push(i),void 0!==o)return o},e.prototype.renameFile=function(e,t,n,r){if(this.initDocumentChanges(),void 0===this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var i,o,s;if(S.is(n)||w.is(n)?i=n:r=n,void 0===i?o=C.create(e,t,r):(s=w.is(i)?i:this._changeAnnotations.manage(i),o=C.create(e,t,r,s)),this._workspaceEdit.documentChanges.push(o),void 0!==s)return s},e.prototype.deleteFile=function(e,t,n){if(this.initDocumentChanges(),void 0===this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var r,i,o;if(S.is(t)||w.is(t)?r=t:n=t,void 0===r?i=P.create(e,n):(o=w.is(r)?r:this._changeAnnotations.manage(r),i=P.create(e,n,o)),this._workspaceEdit.documentChanges.push(i),void 0!==o)return o},e}();!function(e){e.create=function(e){return{uri:e}},e.is=function(e){var t=e;return le.defined(t)&&le.string(t.uri)}}(O||(O={})),function(e){e.create=function(e,t){return{uri:e,version:t}},e.is=function(e){var t=e;return le.defined(t)&&le.string(t.uri)&&le.integer(t.version)}}(k||(k={})),function(e){e.create=function(e,t){return{uri:e,version:t}},e.is=function(e){var t=e;return le.defined(t)&&le.string(t.uri)&&(null===t.version||le.integer(t.version))}}(D||(D={})),function(e){e.create=function(e,t,n,r){return{uri:e,languageId:t,version:n,text:r}},e.is=function(e){var t=e;return le.defined(t)&&le.string(t.uri)&&le.string(t.languageId)&&le.integer(t.version)&&le.string(t.text)}}(A||(A={})),function(e){e.PlainText="plaintext",e.Markdown="markdown"}(N||(N={})),function(e){e.is=function(t){var n=t;return n===e.PlainText||n===e.Markdown}}(N||(N={})),function(e){e.is=function(e){var t=e;return le.objectLiteral(e)&&N.is(t.kind)&&le.string(t.value)}}(M||(M={})),function(e){e.Text=1,e.Method=2,e.Function=3,e.Constructor=4,e.Field=5,e.Variable=6,e.Class=7,e.Interface=8,e.Module=9,e.Property=10,e.Unit=11,e.Value=12,e.Enum=13,e.Keyword=14,e.Snippet=15,e.Color=16,e.File=17,e.Reference=18,e.Folder=19,e.EnumMember=20,e.Constant=21,e.Struct=22,e.Event=23,e.Operator=24,e.TypeParameter=25}(j||(j={})),function(e){e.PlainText=1,e.Snippet=2}(F||(F={})),function(e){e.Deprecated=1}(q||(q={})),function(e){e.create=function(e,t,n){return{newText:e,insert:t,replace:n}},e.is=function(e){var t=e;return t&&le.string(t.newText)&&s.is(t.insert)&&s.is(t.replace)}}(L||(L={})),function(e){e.asIs=1,e.adjustIndentation=2}(I||(I={})),function(e){e.create=function(e){return{label:e}}}($||($={})),function(e){e.create=function(e,t){return{items:e||[],isIncomplete:!!t}}}(H||(H={})),function(e){e.fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")},e.is=function(e){var t=e;return le.string(t)||le.objectLiteral(t)&&le.string(t.language)&&le.string(t.value)}}(W||(W={})),function(e){e.is=function(e){var t=e;return!!t&&le.objectLiteral(t)&&(M.is(t.contents)||W.is(t.contents)||le.typedArray(t.contents,W.is))&&(void 0===e.range||s.is(e.range))}}(K||(K={})),function(e){e.create=function(e,t){return t?{label:e,documentation:t}:{label:e}}}(B||(B={})),function(e){e.create=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i={label:e};return le.defined(t)&&(i.documentation=t),le.defined(n)?i.parameters=n:i.parameters=[],i}}(U||(U={})),function(e){e.Text=1,e.Read=2,e.Write=3}(G||(G={})),function(e){e.create=function(e,t){var n={range:e};return le.number(t)&&(n.kind=t),n}}(V||(V={})),function(e){e.File=1,e.Module=2,e.Namespace=3,e.Package=4,e.Class=5,e.Method=6,e.Property=7,e.Field=8,e.Constructor=9,e.Enum=10,e.Interface=11,e.Function=12,e.Variable=13,e.Constant=14,e.String=15,e.Number=16,e.Boolean=17,e.Array=18,e.Object=19,e.Key=20,e.Null=21,e.EnumMember=22,e.Struct=23,e.Event=24,e.Operator=25,e.TypeParameter=26}(z||(z={})),function(e){e.Deprecated=1}(Y||(Y={})),function(e){e.create=function(e,t,n,r,i){var o={name:e,kind:t,location:{uri:r,range:n}};return i&&(o.containerName=i),o}}(Q||(Q={})),function(e){e.create=function(e,t,n,r,i,o){var s={name:e,detail:t,kind:n,range:r,selectionRange:i};return void 0!==o&&(s.children=o),s},e.is=function(e){var t=e;return t&&le.string(t.name)&&le.number(t.kind)&&s.is(t.range)&&s.is(t.selectionRange)&&(void 0===t.detail||le.string(t.detail))&&(void 0===t.deprecated||le.boolean(t.deprecated))&&(void 0===t.children||Array.isArray(t.children))&&(void 0===t.tags||Array.isArray(t.tags))}}(J||(J={})),function(e){e.Empty="",e.QuickFix="quickfix",e.Refactor="refactor",e.RefactorExtract="refactor.extract",e.RefactorInline="refactor.inline",e.RefactorRewrite="refactor.rewrite",e.Source="source",e.SourceOrganizeImports="source.organizeImports",e.SourceFixAll="source.fixAll"}(X||(X={})),function(e){e.create=function(e,t){var n={diagnostics:e};return null!=t&&(n.only=t),n},e.is=function(e){var t=e;return le.defined(t)&&le.typedArray(t.diagnostics,v.is)&&(void 0===t.only||le.typedArray(t.only,le.string))}}(Z||(Z={})),function(e){e.create=function(e,t,n){var r={title:e},i=!0;return"string"==typeof t?(i=!1,r.kind=t):_.is(t)?r.command=t:r.edit=t,i&&void 0!==n&&(r.kind=n),r},e.is=function(e){var t=e;return t&&le.string(t.title)&&(void 0===t.diagnostics||le.typedArray(t.diagnostics,v.is))&&(void 0===t.kind||le.string(t.kind))&&(void 0!==t.edit||void 0!==t.command)&&(void 0===t.command||_.is(t.command))&&(void 0===t.isPreferred||le.boolean(t.isPreferred))&&(void 0===t.edit||T.is(t.edit))}}(ee||(ee={})),function(e){e.create=function(e,t){var n={range:e};return le.defined(t)&&(n.data=t),n},e.is=function(e){var t=e;return le.defined(t)&&s.is(t.range)&&(le.undefined(t.command)||_.is(t.command))}}(te||(te={})),function(e){e.create=function(e,t){return{tabSize:e,insertSpaces:t}},e.is=function(e){var t=e;return le.defined(t)&&le.uinteger(t.tabSize)&&le.boolean(t.insertSpaces)}}(ne||(ne={})),function(e){e.create=function(e,t,n){return{range:e,target:t,data:n}},e.is=function(e){var t=e;return le.defined(t)&&s.is(t.range)&&(le.undefined(t.target)||le.string(t.target))}}(re||(re={})),function(e){e.create=function(e,t){return{range:e,parent:t}},e.is=function(t){var n=t;return void 0!==n&&s.is(n.range)&&(void 0===n.parent||e.is(n.parent))}}(ie||(ie={}));var ce,ue=["\n","\r\n","\r"];!function(e){function t(e,n){if(e.length<=1)return e;var r=e.length/2|0,i=e.slice(0,r),o=e.slice(r);t(i,n),t(o,n);for(var s=0,a=0,c=0;s<i.length&&a<o.length;){var u=n(i[s],o[a]);e[c++]=u<=0?i[s++]:o[a++]}for(;s<i.length;)e[c++]=i[s++];for(;a<o.length;)e[c++]=o[a++];return e}e.create=function(e,t,n,r){return new de(e,t,n,r)},e.is=function(e){var t=e;return!!(le.defined(t)&&le.string(t.uri)&&(le.undefined(t.languageId)||le.string(t.languageId))&&le.uinteger(t.lineCount)&&le.func(t.getText)&&le.func(t.positionAt)&&le.func(t.offsetAt))},e.applyEdits=function(e,n){for(var r=e.getText(),i=t(n,(function(e,t){var n=e.range.start.line-t.range.start.line;return 0===n?e.range.start.character-t.range.start.character:n})),o=r.length,s=i.length-1;s>=0;s--){var a=i[s],c=e.offsetAt(a.range.start),u=e.offsetAt(a.range.end);if(!(u<=o))throw new Error("Overlapping edit");r=r.substring(0,c)+a.newText+r.substring(u,r.length),o=c}return r}}(ce||(ce={}));var le,de=function(){function e(e,t,n,r){this._uri=e,this._languageId=t,this._version=n,this._content=r,this._lineOffsets=void 0}return Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"languageId",{get:function(){return this._languageId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!1,configurable:!0}),e.prototype.getText=function(e){if(e){var t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content},e.prototype.update=function(e,t){this._content=e.text,this._version=t,this._lineOffsets=void 0},e.prototype.getLineOffsets=function(){if(void 0===this._lineOffsets){for(var e=[],t=this._content,n=!0,r=0;r<t.length;r++){n&&(e.push(r),n=!1);var i=t.charAt(r);n="\r"===i||"\n"===i,"\r"===i&&r+1<t.length&&"\n"===t.charAt(r+1)&&r++}n&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets},e.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var t=this.getLineOffsets(),n=0,r=t.length;if(0===r)return o.create(0,e);for(;n<r;){var i=Math.floor((n+r)/2);t[i]>e?r=i:n=i+1}var s=n-1;return o.create(s,e-t[s])},e.prototype.offsetAt=function(e){var t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;var n=t[e.line],r=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,r),n)},Object.defineProperty(e.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!1,configurable:!0}),e}();!function(e){var t=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===t.call(e)},e.number=function(e){return"[object Number]"===t.call(e)},e.numberRange=function(e,n,r){return"[object Number]"===t.call(e)&&n<=e&&e<=r},e.integer=function(e){return"[object Number]"===t.call(e)&&-2147483648<=e&&e<=2147483647},e.uinteger=function(e){return"[object Number]"===t.call(e)&&0<=e&&e<=2147483647},e.func=function(e){return"[object Function]"===t.call(e)},e.objectLiteral=function(e){return null!==e&&"object"==typeof e},e.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)}}(le||(le={}))},6265:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.ProposedFeatures=t.SemanticTokensBuilder=void 0;const o=n(9817);Object.defineProperty(t,"SemanticTokensBuilder",{enumerable:!0,get:function(){return o.SemanticTokensBuilder}}),i(n(273),t),i(n(9891),t),function(e){e.all={__brand:"features"}}(t.ProposedFeatures||(t.ProposedFeatures={}))},7985:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CallHierarchyFeature=void 0;const r=n(273);t.CallHierarchyFeature=e=>class extends e{get callHierarchy(){return{onPrepare:e=>{this.connection.onRequest(r.CallHierarchyPrepareRequest.type,((t,n)=>e(t,n,this.attachWorkDoneProgress(t),void 0)))},onIncomingCalls:e=>{const t=r.CallHierarchyIncomingCallsRequest.type;this.connection.onRequest(t,((n,r)=>e(n,r,this.attachWorkDoneProgress(n),this.attachPartialResultProgress(t,n))))},onOutgoingCalls:e=>{const t=r.CallHierarchyOutgoingCallsRequest.type;this.connection.onRequest(t,((n,r)=>e(n,r,this.attachWorkDoneProgress(n),this.attachPartialResultProgress(t,n))))}}}}},2507:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigurationFeature=void 0;const r=n(273),i=n(289);t.ConfigurationFeature=e=>class extends e{getConfiguration(e){return e?i.string(e)?this._getConfiguration({section:e}):this._getConfiguration(e):this._getConfiguration({})}_getConfiguration(e){let t={items:Array.isArray(e)?e:[e]};return this.connection.sendRequest(r.ConfigurationRequest.type,t).then((t=>Array.isArray(e)?t:t[0]))}}},828:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileOperationsFeature=void 0;const r=n(273);t.FileOperationsFeature=e=>class extends e{onDidCreateFiles(e){this.connection.onNotification(r.DidCreateFilesNotification.type,(t=>{e(t)}))}onDidRenameFiles(e){this.connection.onNotification(r.DidRenameFilesNotification.type,(t=>{e(t)}))}onDidDeleteFiles(e){this.connection.onNotification(r.DidDeleteFilesNotification.type,(t=>{e(t)}))}onWillCreateFiles(e){return this.connection.onRequest(r.WillCreateFilesRequest.type,((t,n)=>e(t,n)))}onWillRenameFiles(e){return this.connection.onRequest(r.WillRenameFilesRequest.type,((t,n)=>e(t,n)))}onWillDeleteFiles(e){return this.connection.onRequest(r.WillDeleteFilesRequest.type,((t,n)=>e(t,n)))}}},2776:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LinkedEditingRangeFeature=void 0;const r=n(273);t.LinkedEditingRangeFeature=e=>class extends e{onLinkedEditingRange(e){this.connection.onRequest(r.LinkedEditingRangeRequest.type,((t,n)=>e(t,n,this.attachWorkDoneProgress(t),void 0)))}}},8120:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MonikerFeature=void 0;const r=n(273);t.MonikerFeature=e=>class extends e{get moniker(){return{on:e=>{const t=r.MonikerRequest.type;this.connection.onRequest(t,((n,r)=>e(n,r,this.attachWorkDoneProgress(n),this.attachPartialResultProgress(t,n))))}}}}},2731:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.attachPartialResult=t.ProgressFeature=t.attachWorkDone=void 0;const r=n(273),i=n(7560);class o{constructor(e,t){this._connection=e,this._token=t,o.Instances.set(this._token,this)}begin(e,t,n,i){let o={kind:"begin",title:e,percentage:t,message:n,cancellable:i};this._connection.sendProgress(r.WorkDoneProgress.type,this._token,o)}report(e,t){let n={kind:"report"};"number"==typeof e?(n.percentage=e,void 0!==t&&(n.message=t)):n.message=e,this._connection.sendProgress(r.WorkDoneProgress.type,this._token,n)}done(){o.Instances.delete(this._token),this._connection.sendProgress(r.WorkDoneProgress.type,this._token,{kind:"end"})}}o.Instances=new Map;class s extends o{constructor(e,t){super(e,t),this._source=new r.CancellationTokenSource}get token(){return this._source.token}done(){this._source.dispose(),super.done()}cancel(){this._source.cancel()}}class a{constructor(){}begin(){}report(){}done(){}}class c extends a{constructor(){super(),this._source=new r.CancellationTokenSource}get token(){return this._source.token}done(){this._source.dispose()}cancel(){this._source.cancel()}}t.attachWorkDone=function(e,t){if(void 0===t||void 0===t.workDoneToken)return new a;const n=t.workDoneToken;return delete t.workDoneToken,new o(e,n)};var u;t.ProgressFeature=e=>class extends e{constructor(){super(),this._progressSupported=!1}initialize(e){var t;!0===(null===(t=null==e?void 0:e.window)||void 0===t?void 0:t.workDoneProgress)&&(this._progressSupported=!0,this.connection.onNotification(r.WorkDoneProgressCancelNotification.type,(e=>{let t=o.Instances.get(e.token);(t instanceof s||t instanceof c)&&t.cancel()})))}attachWorkDoneProgress(e){return void 0===e?new a:new o(this.connection,e)}createWorkDoneProgress(){if(this._progressSupported){const e=i.generateUuid();return this.connection.sendRequest(r.WorkDoneProgressCreateRequest.type,{token:e}).then((()=>new s(this.connection,e)))}return Promise.resolve(new c)}},function(e){e.type=new r.ProgressType}(u||(u={}));class l{constructor(e,t){this._connection=e,this._token=t}report(e){this._connection.sendProgress(u.type,this._token,e)}}t.attachPartialResult=function(e,t){if(void 0===t||void 0===t.partialResultToken)return;const n=t.partialResultToken;return delete t.partialResultToken,new l(e,n)}},9817:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SemanticTokensBuilder=t.SemanticTokensFeature=void 0;const r=n(273);t.SemanticTokensFeature=e=>class extends e{get semanticTokens(){return{on:e=>{const t=r.SemanticTokensRequest.type;this.connection.onRequest(t,((n,r)=>e(n,r,this.attachWorkDoneProgress(n),this.attachPartialResultProgress(t,n))))},onDelta:e=>{const t=r.SemanticTokensDeltaRequest.type;this.connection.onRequest(t,((n,r)=>e(n,r,this.attachWorkDoneProgress(n),this.attachPartialResultProgress(t,n))))},onRange:e=>{const t=r.SemanticTokensRangeRequest.type;this.connection.onRequest(t,((n,r)=>e(n,r,this.attachWorkDoneProgress(n),this.attachPartialResultProgress(t,n))))}}}};t.SemanticTokensBuilder=class{constructor(){this._prevData=void 0,this.initialize()}initialize(){this._id=Date.now(),this._prevLine=0,this._prevChar=0,this._data=[],this._dataLen=0}push(e,t,n,r,i){let o=e,s=t;this._dataLen>0&&(o-=this._prevLine,0===o&&(s-=this._prevChar)),this._data[this._dataLen++]=o,this._data[this._dataLen++]=s,this._data[this._dataLen++]=n,this._data[this._dataLen++]=r,this._data[this._dataLen++]=i,this._prevLine=e,this._prevChar=t}get id(){return this._id.toString()}previousResult(e){this.id===e&&(this._prevData=this._data),this.initialize()}build(){return this._prevData=void 0,{resultId:this.id,data:this._data}}canBuildEdits(){return void 0!==this._prevData}buildEdits(){if(void 0!==this._prevData){const e=this._prevData.length,t=this._data.length;let n=0;for(;n<t&&n<e&&this._prevData[n]===this._data[n];)n++;if(n<t&&n<e){let r=0;for(;r<t&&r<e&&this._prevData[e-1-r]===this._data[t-1-r];)r++;const i=this._data.slice(n,t-r);return{resultId:this.id,edits:[{start:n,deleteCount:e-r-n,data:i}]}}return n<t?{resultId:this.id,edits:[{start:n,deleteCount:0,data:this._data.slice(n)}]}:n<e?{resultId:this.id,edits:[{start:n,deleteCount:e-n}]}:{resultId:this.id,edits:[]}}return this.build()}}},9891:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createConnection=t.combineFeatures=t.combineLanguagesFeatures=t.combineWorkspaceFeatures=t.combineWindowFeatures=t.combineClientFeatures=t.combineTracerFeatures=t.combineTelemetryFeatures=t.combineConsoleFeatures=t._LanguagesImpl=t.BulkUnregistration=t.BulkRegistration=t.ErrorMessageTracker=t.TextDocuments=void 0;const r=n(273),i=n(289),o=n(7560),s=n(2731),a=n(2507),c=n(8634),u=n(7985),l=n(9817),d=n(5421),h=n(828),f=n(2776),p=n(8120);function m(e){if(null!==e)return e}t.TextDocuments=class{constructor(e){this._documents=Object.create(null),this._configuration=e,this._onDidChangeContent=new r.Emitter,this._onDidOpen=new r.Emitter,this._onDidClose=new r.Emitter,this._onDidSave=new r.Emitter,this._onWillSave=new r.Emitter}get onDidChangeContent(){return this._onDidChangeContent.event}get onDidOpen(){return this._onDidOpen.event}get onWillSave(){return this._onWillSave.event}onWillSaveWaitUntil(e){this._willSaveWaitUntil=e}get onDidSave(){return this._onDidSave.event}get onDidClose(){return this._onDidClose.event}get(e){return this._documents[e]}all(){return Object.keys(this._documents).map((e=>this._documents[e]))}keys(){return Object.keys(this._documents)}listen(e){e.__textDocumentSync=r.TextDocumentSyncKind.Full,e.onDidOpenTextDocument((e=>{let t=e.textDocument,n=this._configuration.create(t.uri,t.languageId,t.version,t.text);this._documents[t.uri]=n;let r=Object.freeze({document:n});this._onDidOpen.fire(r),this._onDidChangeContent.fire(r)})),e.onDidChangeTextDocument((e=>{let t=e.textDocument,n=e.contentChanges;if(0===n.length)return;let r=this._documents[t.uri];const{version:i}=t;if(null==i)throw new Error(`Received document change event for ${t.uri} without valid version identifier`);r=this._configuration.update(r,n,i),this._documents[t.uri]=r,this._onDidChangeContent.fire(Object.freeze({document:r}))})),e.onDidCloseTextDocument((e=>{let t=this._documents[e.textDocument.uri];t&&(delete this._documents[e.textDocument.uri],this._onDidClose.fire(Object.freeze({document:t})))})),e.onWillSaveTextDocument((e=>{let t=this._documents[e.textDocument.uri];t&&this._onWillSave.fire(Object.freeze({document:t,reason:e.reason}))})),e.onWillSaveTextDocumentWaitUntil(((e,t)=>{let n=this._documents[e.textDocument.uri];return n&&this._willSaveWaitUntil?this._willSaveWaitUntil(Object.freeze({document:n,reason:e.reason}),t):[]})),e.onDidSaveTextDocument((e=>{let t=this._documents[e.textDocument.uri];t&&this._onDidSave.fire(Object.freeze({document:t}))}))}};t.ErrorMessageTracker=class{constructor(){this._messages=Object.create(null)}add(e){let t=this._messages[e];t||(t=0),t++,this._messages[e]=t}sendErrors(e){Object.keys(this._messages).forEach((t=>{e.window.showErrorMessage(t)}))}};class g{constructor(){}rawAttach(e){this._rawConnection=e}attach(e){this._connection=e}get connection(){if(!this._connection)throw new Error("Remote is not attached to a connection yet.");return this._connection}fillServerCapabilities(e){}initialize(e){}error(e){this.send(r.MessageType.Error,e)}warn(e){this.send(r.MessageType.Warning,e)}info(e){this.send(r.MessageType.Info,e)}log(e){this.send(r.MessageType.Log,e)}send(e,t){this._rawConnection&&this._rawConnection.sendNotification(r.LogMessageNotification.type,{type:e,message:t})}}const y=d.ShowDocumentFeature(s.ProgressFeature(class{constructor(){}attach(e){this._connection=e}get connection(){if(!this._connection)throw new Error("Remote is not attached to a connection yet.");return this._connection}initialize(e){}fillServerCapabilities(e){}showErrorMessage(e,...t){let n={type:r.MessageType.Error,message:e,actions:t};return this.connection.sendRequest(r.ShowMessageRequest.type,n).then(m)}showWarningMessage(e,...t){let n={type:r.MessageType.Warning,message:e,actions:t};return this.connection.sendRequest(r.ShowMessageRequest.type,n).then(m)}showInformationMessage(e,...t){let n={type:r.MessageType.Info,message:e,actions:t};return this.connection.sendRequest(r.ShowMessageRequest.type,n).then(m)}}));!function(e){e.create=function(){return new v}}(t.BulkRegistration||(t.BulkRegistration={}));class v{constructor(){this._registrations=[],this._registered=new Set}add(e,t){const n=i.string(e)?e:e.method;if(this._registered.has(n))throw new Error(`${n} is already added to this registration`);const r=o.generateUuid();this._registrations.push({id:r,method:n,registerOptions:t||{}}),this._registered.add(n)}asRegistrationParams(){return{registrations:this._registrations}}}!function(e){e.create=function(){return new _(void 0,[])}}(t.BulkUnregistration||(t.BulkUnregistration={}));class _{constructor(e,t){this._connection=e,this._unregistrations=new Map,t.forEach((e=>{this._unregistrations.set(e.method,e)}))}get isAttached(){return!!this._connection}attach(e){this._connection=e}add(e){this._unregistrations.set(e.method,e)}dispose(){let e=[];for(let t of this._unregistrations.values())e.push(t);let t={unregisterations:e};this._connection.sendRequest(r.UnregistrationRequest.type,t).then(void 0,(e=>{this._connection.console.info("Bulk unregistration failed.")}))}disposeSingle(e){const t=i.string(e)?e:e.method,n=this._unregistrations.get(t);if(!n)return!1;let o={unregisterations:[n]};return this._connection.sendRequest(r.UnregistrationRequest.type,o).then((()=>{this._unregistrations.delete(t)}),(e=>{this._connection.console.info(`Un-registering request handler for ${n.id} failed.`)})),!0}}class b{attach(e){this._connection=e}get connection(){if(!this._connection)throw new Error("Remote is not attached to a connection yet.");return this._connection}initialize(e){}fillServerCapabilities(e){}register(e,t,n){return e instanceof v?this.registerMany(e):e instanceof _?this.registerSingle1(e,t,n):this.registerSingle2(e,t)}registerSingle1(e,t,n){const s=i.string(t)?t:t.method,a=o.generateUuid();let c={registrations:[{id:a,method:s,registerOptions:n||{}}]};return e.isAttached||e.attach(this.connection),this.connection.sendRequest(r.RegistrationRequest.type,c).then((t=>(e.add({id:a,method:s}),e)),(e=>(this.connection.console.info(`Registering request handler for ${s} failed.`),Promise.reject(e))))}registerSingle2(e,t){const n=i.string(e)?e:e.method,s=o.generateUuid();let a={registrations:[{id:s,method:n,registerOptions:t||{}}]};return this.connection.sendRequest(r.RegistrationRequest.type,a).then((e=>r.Disposable.create((()=>{this.unregisterSingle(s,n)}))),(e=>(this.connection.console.info(`Registering request handler for ${n} failed.`),Promise.reject(e))))}unregisterSingle(e,t){let n={unregisterations:[{id:e,method:t}]};return this.connection.sendRequest(r.UnregistrationRequest.type,n).then(void 0,(t=>{this.connection.console.info(`Un-registering request handler for ${e} failed.`)}))}registerMany(e){let t=e.asRegistrationParams();return this.connection.sendRequest(r.RegistrationRequest.type,t).then((()=>new _(this._connection,t.registrations.map((e=>({id:e.id,method:e.method}))))),(e=>(this.connection.console.info("Bulk registration failed."),Promise.reject(e))))}}const S=h.FileOperationsFeature(c.WorkspaceFoldersFeature(a.ConfigurationFeature(class{constructor(){}attach(e){this._connection=e}get connection(){if(!this._connection)throw new Error("Remote is not attached to a connection yet.");return this._connection}initialize(e){}fillServerCapabilities(e){}applyEdit(e){let t=(n=e)&&n.edit?e:{edit:e};var n;return this.connection.sendRequest(r.ApplyWorkspaceEditRequest.type,t)}})));class w{constructor(){this._trace=r.Trace.Off}attach(e){this._connection=e}get connection(){if(!this._connection)throw new Error("Remote is not attached to a connection yet.");return this._connection}initialize(e){}fillServerCapabilities(e){}set trace(e){this._trace=e}log(e,t){this._trace!==r.Trace.Off&&this.connection.sendNotification(r.LogTraceNotification.type,{message:e,verbose:this._trace===r.Trace.Verbose?t:void 0})}}class E{constructor(){}attach(e){this._connection=e}get connection(){if(!this._connection)throw new Error("Remote is not attached to a connection yet.");return this._connection}initialize(e){}fillServerCapabilities(e){}logEvent(e){this.connection.sendNotification(r.TelemetryEventNotification.type,e)}}class R{constructor(){}attach(e){this._connection=e}get connection(){if(!this._connection)throw new Error("Remote is not attached to a connection yet.");return this._connection}initialize(e){}fillServerCapabilities(e){}attachWorkDoneProgress(e){return s.attachWorkDone(this.connection,e)}attachPartialResultProgress(e,t){return s.attachPartialResult(this.connection,t)}}t._LanguagesImpl=R;const x=p.MonikerFeature(f.LinkedEditingRangeFeature(l.SemanticTokensFeature(u.CallHierarchyFeature(R))));function C(e,t){return function(n){return t(e(n))}}function P(e,t){return function(n){return t(e(n))}}function T(e,t){return function(n){return t(e(n))}}function O(e,t){return function(n){return t(e(n))}}function k(e,t){return function(n){return t(e(n))}}function D(e,t){return function(n){return t(e(n))}}t.combineConsoleFeatures=C,t.combineTelemetryFeatures=P,t.combineTracerFeatures=T,t.combineClientFeatures=O,t.combineWindowFeatures=k,t.combineWorkspaceFeatures=D,t.combineLanguagesFeatures=function(e,t){return function(n){return t(e(n))}},t.combineFeatures=function(e,t){function n(e,t,n){return e&&t?n(e,t):e||t}return{__brand:"features",console:n(e.console,t.console,C),tracer:n(e.tracer,t.tracer,T),telemetry:n(e.telemetry,t.telemetry,P),client:n(e.client,t.client,O),window:n(e.window,t.window,k),workspace:n(e.workspace,t.workspace,D)}},t.createConnection=function(e,t,n){const o=n&&n.console?new(n.console(g)):new g,a=e(o);o.rawAttach(a);const c=n&&n.tracer?new(n.tracer(w)):new w,u=n&&n.telemetry?new(n.telemetry(E)):new E,l=n&&n.client?new(n.client(b)):new b,d=n&&n.window?new(n.window(y)):new y,h=n&&n.workspace?new(n.workspace(S)):new S,f=n&&n.languages?new(n.languages(x)):new x,p=[o,c,u,l,d,h,f];function m(e){return e instanceof Promise?e:i.thenable(e)?new Promise(((t,n)=>{e.then((e=>t(e)),(e=>n(e)))})):Promise.resolve(e)}let v,_,R,C={listen:()=>a.listen(),sendRequest:(e,...t)=>a.sendRequest(i.string(e)?e:e.method,...t),onRequest:(e,t)=>a.onRequest(e,t),sendNotification:(e,t)=>{const n=i.string(e)?e:e.method;1===arguments.length?a.sendNotification(n):a.sendNotification(n,t)},onNotification:(e,t)=>a.onNotification(e,t),onProgress:a.onProgress,sendProgress:a.sendProgress,onInitialize:e=>_=e,onInitialized:e=>a.onNotification(r.InitializedNotification.type,e),onShutdown:e=>v=e,onExit:e=>R=e,get console(){return o},get telemetry(){return u},get tracer(){return c},get client(){return l},get window(){return d},get workspace(){return h},get languages(){return f},onDidChangeConfiguration:e=>a.onNotification(r.DidChangeConfigurationNotification.type,e),onDidChangeWatchedFiles:e=>a.onNotification(r.DidChangeWatchedFilesNotification.type,e),__textDocumentSync:void 0,onDidOpenTextDocument:e=>a.onNotification(r.DidOpenTextDocumentNotification.type,e),onDidChangeTextDocument:e=>a.onNotification(r.DidChangeTextDocumentNotification.type,e),onDidCloseTextDocument:e=>a.onNotification(r.DidCloseTextDocumentNotification.type,e),onWillSaveTextDocument:e=>a.onNotification(r.WillSaveTextDocumentNotification.type,e),onWillSaveTextDocumentWaitUntil:e=>a.onRequest(r.WillSaveTextDocumentWaitUntilRequest.type,e),onDidSaveTextDocument:e=>a.onNotification(r.DidSaveTextDocumentNotification.type,e),sendDiagnostics:e=>a.sendNotification(r.PublishDiagnosticsNotification.type,e),onHover:e=>a.onRequest(r.HoverRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),void 0))),onCompletion:e=>a.onRequest(r.CompletionRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onCompletionResolve:e=>a.onRequest(r.CompletionResolveRequest.type,e),onSignatureHelp:e=>a.onRequest(r.SignatureHelpRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),void 0))),onDeclaration:e=>a.onRequest(r.DeclarationRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onDefinition:e=>a.onRequest(r.DefinitionRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onTypeDefinition:e=>a.onRequest(r.TypeDefinitionRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onImplementation:e=>a.onRequest(r.ImplementationRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onReferences:e=>a.onRequest(r.ReferencesRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onDocumentHighlight:e=>a.onRequest(r.DocumentHighlightRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onDocumentSymbol:e=>a.onRequest(r.DocumentSymbolRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onWorkspaceSymbol:e=>a.onRequest(r.WorkspaceSymbolRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onCodeAction:e=>a.onRequest(r.CodeActionRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onCodeActionResolve:e=>a.onRequest(r.CodeActionResolveRequest.type,((t,n)=>e(t,n))),onCodeLens:e=>a.onRequest(r.CodeLensRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onCodeLensResolve:e=>a.onRequest(r.CodeLensResolveRequest.type,((t,n)=>e(t,n))),onDocumentFormatting:e=>a.onRequest(r.DocumentFormattingRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),void 0))),onDocumentRangeFormatting:e=>a.onRequest(r.DocumentRangeFormattingRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),void 0))),onDocumentOnTypeFormatting:e=>a.onRequest(r.DocumentOnTypeFormattingRequest.type,((t,n)=>e(t,n))),onRenameRequest:e=>a.onRequest(r.RenameRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),void 0))),onPrepareRename:e=>a.onRequest(r.PrepareRenameRequest.type,((t,n)=>e(t,n))),onDocumentLinks:e=>a.onRequest(r.DocumentLinkRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onDocumentLinkResolve:e=>a.onRequest(r.DocumentLinkResolveRequest.type,((t,n)=>e(t,n))),onDocumentColor:e=>a.onRequest(r.DocumentColorRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onColorPresentation:e=>a.onRequest(r.ColorPresentationRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onFoldingRanges:e=>a.onRequest(r.FoldingRangeRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onSelectionRanges:e=>a.onRequest(r.SelectionRangeRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),s.attachPartialResult(a,t)))),onExecuteCommand:e=>a.onRequest(r.ExecuteCommandRequest.type,((t,n)=>e(t,n,s.attachWorkDone(a,t),void 0))),dispose:()=>a.dispose()};for(let e of p)e.attach(C);return a.onRequest(r.InitializeRequest.type,(e=>{t.initialize(e),i.string(e.trace)&&(c.trace=r.Trace.fromString(e.trace));for(let t of p)t.initialize(e.capabilities);if(_){return m(_(e,(new r.CancellationTokenSource).token,s.attachWorkDone(a,e),void 0)).then((e=>{if(e instanceof r.ResponseError)return e;let t=e;t||(t={capabilities:{}});let n=t.capabilities;n||(n={},t.capabilities=n),void 0===n.textDocumentSync||null===n.textDocumentSync?n.textDocumentSync=i.number(C.__textDocumentSync)?C.__textDocumentSync:r.TextDocumentSyncKind.None:i.number(n.textDocumentSync)||i.number(n.textDocumentSync.change)||(n.textDocumentSync.change=i.number(C.__textDocumentSync)?C.__textDocumentSync:r.TextDocumentSyncKind.None);for(let e of p)e.fillServerCapabilities(n);return t}))}{let e={capabilities:{textDocumentSync:r.TextDocumentSyncKind.None}};for(let t of p)t.fillServerCapabilities(e.capabilities);return e}})),a.onRequest(r.ShutdownRequest.type,(()=>(t.shutdownReceived=!0,v?v((new r.CancellationTokenSource).token):void 0))),a.onNotification(r.ExitNotification.type,(()=>{try{R&&R()}finally{t.shutdownReceived?t.exit(0):t.exit(1)}})),a.onNotification(r.SetTraceNotification.type,(e=>{c.trace=r.Trace.fromString(e.value)})),C}},5421:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ShowDocumentFeature=void 0;const r=n(273);t.ShowDocumentFeature=e=>class extends e{showDocument(e){return this.connection.sendRequest(r.ShowDocumentRequest.type,e)}}},289:(e,t)=>{"use strict";function n(e){return"string"==typeof e||e instanceof String}function r(e){return"function"==typeof e}function i(e){return Array.isArray(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.thenable=t.typedArray=t.stringArray=t.array=t.func=t.error=t.number=t.string=t.boolean=void 0,t.boolean=function(e){return!0===e||!1===e},t.string=n,t.number=function(e){return"number"==typeof e||e instanceof Number},t.error=function(e){return e instanceof Error},t.func=r,t.array=i,t.stringArray=function(e){return i(e)&&e.every((e=>n(e)))},t.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)},t.thenable=function(e){return e&&r(e.then)}},7560:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateUuid=t.parse=t.isUUID=t.v4=t.empty=void 0;class n{constructor(e){this._value=e}asHex(){return this._value}equals(e){return this.asHex()===e.asHex()}}class r extends n{constructor(){super([r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),"-",r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),"-","4",r._randomHex(),r._randomHex(),r._randomHex(),"-",r._oneOf(r._timeHighBits),r._randomHex(),r._randomHex(),r._randomHex(),"-",r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex(),r._randomHex()].join(""))}static _oneOf(e){return e[Math.floor(e.length*Math.random())]}static _randomHex(){return r._oneOf(r._chars)}}function i(){return new r}r._chars=["0","1","2","3","4","5","6","6","7","8","9","a","b","c","d","e","f"],r._timeHighBits=["8","9","a","b"],t.empty=new n("00000000-0000-0000-0000-000000000000"),t.v4=i;const o=/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;function s(e){return o.test(e)}t.isUUID=s,t.parse=function(e){if(!s(e))throw new Error("invalid uuid");return new n(e)},t.generateUuid=function(){return i().asHex()}},8634:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WorkspaceFoldersFeature=void 0;const r=n(273);t.WorkspaceFoldersFeature=e=>class extends e{initialize(e){let t=e.workspace;t&&t.workspaceFolders&&(this._onDidChangeWorkspaceFolders=new r.Emitter,this.connection.onNotification(r.DidChangeWorkspaceFoldersNotification.type,(e=>{this._onDidChangeWorkspaceFolders.fire(e.event)})))}getWorkspaceFolders(){return this.connection.sendRequest(r.WorkspaceFoldersRequest.type)}get onDidChangeWorkspaceFolders(){if(!this._onDidChangeWorkspaceFolders)throw new Error("Client doesn't support sending workspace folder change events.");return this._unregistration||(this._unregistration=this.connection.client.register(r.DidChangeWorkspaceFoldersNotification.type)),this._onDidChangeWorkspaceFolders.event}}},7613:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resolveModulePath=t.FileSystem=t.resolveGlobalYarnPath=t.resolveGlobalNodePath=t.resolve=t.uriToFilePath=void 0;const r=n(7310),i=n(1017),o=n(7147),s=n(2081);function a(){return"win32"===process.platform}function c(e,t,n,r){const a=["var p = process;","p.on('message',function(m){","if(m.c==='e'){","p.exit(0);","}","else if(m.c==='rs'){","try{","var r=require.resolve(m.a);","p.send({c:'r',s:true,r:r});","}","catch(err){","p.send({c:'r',s:false});","}","}","});"].join("");return new Promise(((c,u)=>{let l=process.env,d=Object.create(null);Object.keys(l).forEach((e=>d[e]=l[e])),t&&o.existsSync(t)&&(d.NODE_PATH?d.NODE_PATH=t+i.delimiter+d.NODE_PATH:d.NODE_PATH=t,r&&r(`NODE_PATH value is: ${d.NODE_PATH}`)),d.ELECTRON_RUN_AS_NODE="1";try{let t=s.fork("",[],{cwd:n,env:d,execArgv:["-e",a]});if(void 0===t.pid)return void u(new Error(`Starting process to resolve node module  ${e} failed`));t.on("error",(e=>{u(e)})),t.on("message",(n=>{"r"===n.c&&(t.send({c:"e"}),n.s?c(n.r):u(new Error(`Failed to resolve module: ${e}`)))}));let r={c:"rs",a:e};t.send(r)}catch(e){u(e)}}))}function u(e){let t="npm";const n=Object.create(null);Object.keys(process.env).forEach((e=>n[e]=process.env[e])),n.NO_UPDATE_NOTIFIER="true";const r={encoding:"utf8",env:n};a()&&(t="npm.cmd",r.shell=!0);let o=()=>{};try{process.on("SIGPIPE",o);let n=s.spawnSync(t,["config","get","prefix"],r).stdout;if(!n)return void(e&&e("'npm config get prefix' didn't return a value."));let c=n.trim();return e&&e(`'npm config get prefix' value is: ${c}`),c.length>0?a()?i.join(c,"node_modules"):i.join(c,"lib","node_modules"):void 0}catch(e){return}finally{process.removeListener("SIGPIPE",o)}}var l;t.uriToFilePath=function(e){let t=r.parse(e);if("file:"!==t.protocol||!t.path)return;let n=t.path.split("/");for(var o=0,s=n.length;o<s;o++)n[o]=decodeURIComponent(n[o]);if("win32"===process.platform&&n.length>1){let e=n[0],t=n[1];0===e.length&&t.length>1&&":"===t[1]&&n.shift()}return i.normalize(n.join("/"))},t.resolve=c,t.resolveGlobalNodePath=u,t.resolveGlobalYarnPath=function(e){let t="yarn",n={encoding:"utf8"};a()&&(t="yarn.cmd",n.shell=!0);let r=()=>{};try{process.on("SIGPIPE",r);let o=s.spawnSync(t,["global","dir","--json"],n),a=o.stdout;if(!a)return void(e&&(e("'yarn global dir' didn't return a value."),o.stderr&&e(o.stderr)));let c=a.trim().split(/\r?\n/);for(let e of c)try{let t=JSON.parse(e);if("log"===t.type)return i.join(t.data,"node_modules")}catch(e){}return}catch(e){return}finally{process.removeListener("SIGPIPE",r)}},function(e){let t;function n(){return void 0!==t||(t="win32"!==process.platform&&(!o.existsSync(__filename.toUpperCase())||!o.existsSync(__filename.toLowerCase()))),t}e.isCaseSensitive=n,e.isParent=function(e,t){return n()?0===i.normalize(t).indexOf(i.normalize(e)):0===i.normalize(t).toLowerCase().indexOf(i.normalize(e).toLowerCase())}}(l=t.FileSystem||(t.FileSystem={})),t.resolveModulePath=function(e,t,n,r){return n?(i.isAbsolute(n)||(n=i.join(e,n)),c(t,n,n,r).then((e=>l.isParent(n,e)?e:Promise.reject(new Error(`Failed to load ${t} from node path location.`)))).then(void 0,(n=>c(t,u(r),e,r)))):c(t,u(r),e,r)}},5809:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.createConnection=t.Files=void 0;const o=n(289),s=n(9891),a=n(7613),c=n(6560);i(n(6560),t),i(n(6265),t),function(e){e.uriToFilePath=a.uriToFilePath,e.resolveGlobalNodePath=a.resolveGlobalNodePath,e.resolveGlobalYarnPath=a.resolveGlobalYarnPath,e.resolve=a.resolve,e.resolveModulePath=a.resolveModulePath}(t.Files||(t.Files={}));let u,l=!1;!function(){const e="--clientProcessId";function t(e){try{let t=parseInt(e);isNaN(t)||(u=setInterval((()=>{try{process.kill(t,0)}catch(e){process.exit(l?0:1)}}),3e3))}catch(e){}}for(let n=2;n<process.argv.length;n++){let r=process.argv[n];if(r===e&&n+1<process.argv.length)return void t(process.argv[n+1]);{let n=r.split("=");n[0]===e&&t(n[1])}}}();const d={initialize:e=>{const t=e.processId;o.number(t)&&void 0===u&&setInterval((()=>{try{process.kill(t,0)}catch(e){process.exit(l?0:1)}}),3e3)},get shutdownReceived(){return l},set shutdownReceived(e){l=e},exit:e=>{process.exit(e)}};t.createConnection=function(e,t,n,r){let i,a,u,h;return void 0!==e&&"features"===e.__brand&&(i=e,e=t,t=n,n=r),c.ConnectionStrategy.is(e)||c.ConnectionOptions.is(e)?h=e:(a=e,u=t,h=n),function(e,t,n,r){if(!e&&!t&&process.argv.length>2){let n,r,o=process.argv.slice(2);for(let s=0;s<o.length;s++){let a=o[s];if("--node-ipc"===a){e=new c.IPCMessageReader(process),t=new c.IPCMessageWriter(process);break}if("--stdio"===a){e=process.stdin,t=process.stdout;break}if("--socket"===a){n=parseInt(o[s+1]);break}if("--pipe"===a){r=o[s+1];break}var i=a.split("=");if("--socket"===i[0]){n=parseInt(i[1]);break}if("--pipe"===i[0]){r=i[1];break}}if(n){let r=c.createServerSocketTransport(n);e=r[0],t=r[1]}else if(r){let n=c.createServerPipeTransport(r);e=n[0],t=n[1]}}var a="Use arguments of createConnection or set command line parameters: '--node-ipc', '--stdio' or '--socket={number}'";if(!e)throw new Error("Connection input stream is not set. "+a);if(!t)throw new Error("Connection output stream is not set. "+a);if(o.func(e.read)&&o.func(e.on)){let t=e;t.on("end",(()=>{process.exit(l?0:1)})),t.on("close",(()=>{process.exit(l?0:1)}))}const u=r=>c.createProtocolConnection(e,t,r,n);return s.createConnection(u,d,r)}(a,u,h,i)}},8212:(e,t,n)=>{"use strict";e.exports=n(5809)},2479:e=>{e.exports=function e(t,n){if(t&&n)return e(t)(n);if("function"!=typeof t)throw new TypeError("need wrapper function");return Object.keys(t).forEach((function(e){r[e]=t[e]})),r;function r(){for(var e=new Array(arguments.length),n=0;n<e.length;n++)e[n]=arguments[n];var r=t.apply(this,e),i=e[e.length-1];return"function"==typeof r&&r!==i&&Object.keys(i).forEach((function(e){r[e]=i[e]})),r}}},9491:e=>{"use strict";e.exports=require("assert")},2081:e=>{"use strict";e.exports=require("child_process")},2057:e=>{"use strict";e.exports=require("constants")},6113:e=>{"use strict";e.exports=require("crypto")},2361:e=>{"use strict";e.exports=require("events")},7147:e=>{"use strict";e.exports=require("fs")},1808:e=>{"use strict";e.exports=require("net")},2037:e=>{"use strict";e.exports=require("os")},1017:e=>{"use strict";e.exports=require("path")},4521:e=>{"use strict";e.exports=require("readline")},2781:e=>{"use strict";e.exports=require("stream")},1576:e=>{"use strict";e.exports=require("string_decoder")},7310:e=>{"use strict";e.exports=require("url")},3837:e=>{"use strict";e.exports=require("util")},4165:(e,t,n)=>{const r=n(2361).EventEmitter,i=n(2081),o=n(1017),s=n(7147);class a{constructor(){this.helpWidth=void 0,this.sortSubcommands=!1,this.sortOptions=!1}visibleCommands(e){const t=e.commands.filter((e=>!e._hidden));if(e._hasImplicitHelpCommand()){const n=e._helpCommandnameAndArgs.split(/ +/),r=e.createCommand(n.shift()).helpOption(!1);r.description(e._helpCommandDescription),r._parseExpectedArgs(n),t.push(r)}return this.sortSubcommands&&t.sort(((e,t)=>e.name().localeCompare(t.name()))),t}visibleOptions(e){const t=e.options.filter((e=>!e.hidden)),n=e._hasHelpOption&&e._helpShortFlag&&!e._findOption(e._helpShortFlag),r=e._hasHelpOption&&!e._findOption(e._helpLongFlag);if(n||r){let i;i=n?r?e.createOption(e._helpFlags,e._helpDescription):e.createOption(e._helpShortFlag,e._helpDescription):e.createOption(e._helpLongFlag,e._helpDescription),t.push(i)}if(this.sortOptions){const e=e=>e.short?e.short.replace(/^-/,""):e.long.replace(/^--/,"");t.sort(((t,n)=>e(t).localeCompare(e(n))))}return t}visibleArguments(e){return e._argsDescription&&e._args.length?e._args.map((t=>({term:t.name,description:e._argsDescription[t.name]||""})),0):[]}subcommandTerm(e){const t=e._args.map((e=>f(e))).join(" ");return e._name+(e._aliases[0]?"|"+e._aliases[0]:"")+(e.options.length?" [options]":"")+(t?" "+t:"")}optionTerm(e){return e.flags}longestSubcommandTermLength(e,t){return t.visibleCommands(e).reduce(((e,n)=>Math.max(e,t.subcommandTerm(n).length)),0)}longestOptionTermLength(e,t){return t.visibleOptions(e).reduce(((e,n)=>Math.max(e,t.optionTerm(n).length)),0)}longestArgumentTermLength(e,t){return t.visibleArguments(e).reduce(((e,t)=>Math.max(e,t.term.length)),0)}commandUsage(e){let t=e._name;e._aliases[0]&&(t=t+"|"+e._aliases[0]);let n="";for(let t=e.parent;t;t=t.parent)n=t.name()+" "+n;return n+t+" "+e.usage()}commandDescription(e){return e.description()}subcommandDescription(e){return e.description()}optionDescription(e){if(e.negate)return e.description;const t=[];return e.argChoices&&t.push(`choices: ${e.argChoices.map((e=>JSON.stringify(e))).join(", ")}`),void 0!==e.defaultValue&&t.push(`default: ${e.defaultValueDescription||JSON.stringify(e.defaultValue)}`),t.length>0?`${e.description} (${t.join(", ")})`:e.description}formatHelp(e,t){const n=t.padWidth(e,t),r=t.helpWidth||80;function i(e,i){if(i){const o=`${e.padEnd(n+2)}${i}`;return t.wrap(o,r-2,n+2)}return e}function o(e){return e.join("\n").replace(/^/gm," ".repeat(2))}let s=[`Usage: ${t.commandUsage(e)}`,""];const a=t.commandDescription(e);a.length>0&&(s=s.concat([a,""]));const c=t.visibleArguments(e).map((e=>i(e.term,e.description)));c.length>0&&(s=s.concat(["Arguments:",o(c),""]));const u=t.visibleOptions(e).map((e=>i(t.optionTerm(e),t.optionDescription(e))));u.length>0&&(s=s.concat(["Options:",o(u),""]));const l=t.visibleCommands(e).map((e=>i(t.subcommandTerm(e),t.subcommandDescription(e))));return l.length>0&&(s=s.concat(["Commands:",o(l),""])),s.join("\n")}padWidth(e,t){return Math.max(t.longestOptionTermLength(e,t),t.longestSubcommandTermLength(e,t),t.longestArgumentTermLength(e,t))}wrap(e,t,n,r=40){if(e.match(/[\n]\s+/))return e;const i=t-n;if(i<r)return e;const o=e.substr(0,n),s=e.substr(n),a=" ".repeat(n),c=new RegExp(".{1,"+(i-1)+"}([\\s​]|$)|[^\\s​]+?([\\s​]|$)","g");return o+(s.match(c)||[]).map(((e,t)=>("\n"===e.slice(-1)&&(e=e.slice(0,e.length-1)),(t>0?a:"")+e.trimRight()))).join("\n")}}class c{constructor(e,t){this.flags=e,this.description=t||"",this.required=e.includes("<"),this.optional=e.includes("["),this.variadic=/\w\.\.\.[>\]]$/.test(e),this.mandatory=!1;const n=p(e);this.short=n.shortFlag,this.long=n.longFlag,this.negate=!1,this.long&&(this.negate=this.long.startsWith("--no-")),this.defaultValue=void 0,this.defaultValueDescription=void 0,this.parseArg=void 0,this.hidden=!1,this.argChoices=void 0}default(e,t){return this.defaultValue=e,this.defaultValueDescription=t,this}argParser(e){return this.parseArg=e,this}makeOptionMandatory(e=!0){return this.mandatory=!!e,this}hideHelp(e=!0){return this.hidden=!!e,this}_concatValue(e,t){return t!==this.defaultValue&&Array.isArray(t)?t.concat(e):[e]}choices(e){return this.argChoices=e,this.parseArg=(t,n)=>{if(!e.includes(t))throw new l(`Allowed choices are ${e.join(", ")}.`);return this.variadic?this._concatValue(t,n):t},this}name(){return this.long?this.long.replace(/^--/,""):this.short.replace(/^-/,"")}attributeName(){return this.name().replace(/^no-/,"").split("-").reduce(((e,t)=>e+t[0].toUpperCase()+t.slice(1)))}is(e){return this.short===e||this.long===e}}class u extends Error{constructor(e,t,n){super(n),Error.captureStackTrace(this,this.constructor),this.name=this.constructor.name,this.code=t,this.exitCode=e,this.nestedError=void 0}}class l extends u{constructor(e){super(1,"commander.invalidOptionArgument",e),Error.captureStackTrace(this,this.constructor),this.name=this.constructor.name}}class d extends r{constructor(e){super(),this.commands=[],this.options=[],this.parent=null,this._allowUnknownOption=!1,this._allowExcessArguments=!0,this._args=[],this.rawArgs=null,this._scriptPath=null,this._name=e||"",this._optionValues={},this._storeOptionsAsProperties=!1,this._actionResults=[],this._actionHandler=null,this._executableHandler=!1,this._executableFile=null,this._defaultCommandName=null,this._exitCallback=null,this._aliases=[],this._combineFlagAndOptionalValue=!0,this._description="",this._argsDescription=void 0,this._enablePositionalOptions=!1,this._passThroughOptions=!1,this._outputConfiguration={writeOut:e=>process.stdout.write(e),writeErr:e=>process.stderr.write(e),getOutHelpWidth:()=>process.stdout.isTTY?process.stdout.columns:void 0,getErrHelpWidth:()=>process.stderr.isTTY?process.stderr.columns:void 0,outputError:(e,t)=>t(e)},this._hidden=!1,this._hasHelpOption=!0,this._helpFlags="-h, --help",this._helpDescription="display help for command",this._helpShortFlag="-h",this._helpLongFlag="--help",this._addImplicitHelpCommand=void 0,this._helpCommandName="help",this._helpCommandnameAndArgs="help [command]",this._helpCommandDescription="display help for command",this._helpConfiguration={}}command(e,t,n){let r=t,i=n;"object"==typeof r&&null!==r&&(i=r,r=null),i=i||{};const o=e.split(/ +/),s=this.createCommand(o.shift());return r&&(s.description(r),s._executableHandler=!0),i.isDefault&&(this._defaultCommandName=s._name),s._outputConfiguration=this._outputConfiguration,s._hidden=!(!i.noHelp&&!i.hidden),s._hasHelpOption=this._hasHelpOption,s._helpFlags=this._helpFlags,s._helpDescription=this._helpDescription,s._helpShortFlag=this._helpShortFlag,s._helpLongFlag=this._helpLongFlag,s._helpCommandName=this._helpCommandName,s._helpCommandnameAndArgs=this._helpCommandnameAndArgs,s._helpCommandDescription=this._helpCommandDescription,s._helpConfiguration=this._helpConfiguration,s._exitCallback=this._exitCallback,s._storeOptionsAsProperties=this._storeOptionsAsProperties,s._combineFlagAndOptionalValue=this._combineFlagAndOptionalValue,s._allowExcessArguments=this._allowExcessArguments,s._enablePositionalOptions=this._enablePositionalOptions,s._executableFile=i.executableFile||null,this.commands.push(s),s._parseExpectedArgs(o),s.parent=this,r?this:s}createCommand(e){return new d(e)}createHelp(){return Object.assign(new a,this.configureHelp())}configureHelp(e){return void 0===e?this._helpConfiguration:(this._helpConfiguration=e,this)}configureOutput(e){return void 0===e?this._outputConfiguration:(Object.assign(this._outputConfiguration,e),this)}addCommand(e,t){if(!e._name)throw new Error("Command passed to .addCommand() must have a name");return function e(t){t.forEach((t=>{if(t._executableHandler&&!t._executableFile)throw new Error(`Must specify executableFile for deeply nested executable: ${t.name()}`);e(t.commands)}))}(e.commands),(t=t||{}).isDefault&&(this._defaultCommandName=e._name),(t.noHelp||t.hidden)&&(e._hidden=!0),this.commands.push(e),e.parent=this,this}arguments(e){return this._parseExpectedArgs(e.split(/ +/))}addHelpCommand(e,t){return!1===e?this._addImplicitHelpCommand=!1:(this._addImplicitHelpCommand=!0,"string"==typeof e&&(this._helpCommandName=e.split(" ")[0],this._helpCommandnameAndArgs=e),this._helpCommandDescription=t||this._helpCommandDescription),this}_hasImplicitHelpCommand(){return void 0===this._addImplicitHelpCommand?this.commands.length&&!this._actionHandler&&!this._findCommand("help"):this._addImplicitHelpCommand}_parseExpectedArgs(e){if(e.length)return e.forEach((e=>{const t={required:!1,name:"",variadic:!1};switch(e[0]){case"<":t.required=!0,t.name=e.slice(1,-1);break;case"[":t.name=e.slice(1,-1)}t.name.length>3&&"..."===t.name.slice(-3)&&(t.variadic=!0,t.name=t.name.slice(0,-3)),t.name&&this._args.push(t)})),this._args.forEach(((e,t)=>{if(e.variadic&&t<this._args.length-1)throw new Error(`only the last argument can be variadic '${e.name}'`)})),this}exitOverride(e){return this._exitCallback=e||(e=>{if("commander.executeSubCommandAsync"!==e.code)throw e}),this}_exit(e,t,n){this._exitCallback&&this._exitCallback(new u(e,t,n)),process.exit(e)}action(e){return this._actionHandler=t=>{const n=this._args.length,r=t.slice(0,n);this._storeOptionsAsProperties?r[n]=this:r[n]=this.opts(),r.push(this);const i=e.apply(this,r);let o=this;for(;o.parent;)o=o.parent;o._actionResults.push(i)},this}createOption(e,t){return new c(e,t)}addOption(e){const t=e.name(),n=e.attributeName();let r=e.defaultValue;if(e.negate||e.optional||e.required||"boolean"==typeof r){if(e.negate){const t=e.long.replace(/^--no-/,"--");r=!this._findOption(t)||this._getOptionValue(n)}void 0!==r&&this._setOptionValue(n,r)}return this.options.push(e),this.on("option:"+t,(t=>{const i=this._getOptionValue(n);if(null!==t&&e.parseArg)try{t=e.parseArg(t,void 0===i?r:i)}catch(n){if("commander.invalidOptionArgument"===n.code){const r=`error: option '${e.flags}' argument '${t}' is invalid. ${n.message}`;this._displayError(n.exitCode,n.code,r)}throw n}else null!==t&&e.variadic&&(t=e._concatValue(t,i));"boolean"==typeof i||void 0===i?null==t?this._setOptionValue(n,!e.negate&&(r||!0)):this._setOptionValue(n,t):null!==t&&this._setOptionValue(n,!e.negate&&t)})),this}_optionEx(e,t,n,r,i){const o=this.createOption(t,n);if(o.makeOptionMandatory(!!e.mandatory),"function"==typeof r)o.default(i).argParser(r);else if(r instanceof RegExp){const e=r;r=(t,n)=>{const r=e.exec(t);return r?r[0]:n},o.default(i).argParser(r)}else o.default(r);return this.addOption(o)}option(e,t,n,r){return this._optionEx({},e,t,n,r)}requiredOption(e,t,n,r){return this._optionEx({mandatory:!0},e,t,n,r)}combineFlagAndOptionalValue(e=!0){return this._combineFlagAndOptionalValue=!!e,this}allowUnknownOption(e=!0){return this._allowUnknownOption=!!e,this}allowExcessArguments(e=!0){return this._allowExcessArguments=!!e,this}enablePositionalOptions(e=!0){return this._enablePositionalOptions=!!e,this}passThroughOptions(e=!0){if(this._passThroughOptions=!!e,this.parent&&e&&!this.parent._enablePositionalOptions)throw new Error("passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)");return this}storeOptionsAsProperties(e=!0){if(this._storeOptionsAsProperties=!!e,this.options.length)throw new Error("call .storeOptionsAsProperties() before adding options");return this}_setOptionValue(e,t){this._storeOptionsAsProperties?this[e]=t:this._optionValues[e]=t}_getOptionValue(e){return this._storeOptionsAsProperties?this[e]:this._optionValues[e]}parse(e,t){if(void 0!==e&&!Array.isArray(e))throw new Error("first parameter to parse must be array or undefined");let r;switch(t=t||{},void 0===e&&(e=process.argv,process.versions&&process.versions.electron&&(t.from="electron")),this.rawArgs=e.slice(),t.from){case void 0:case"node":this._scriptPath=e[1],r=e.slice(2);break;case"electron":process.defaultApp?(this._scriptPath=e[1],r=e.slice(2)):r=e.slice(1);break;case"user":r=e.slice(0);break;default:throw new Error(`unexpected parse option { from: '${t.from}' }`)}return!this._scriptPath&&n.c[n.s]&&(this._scriptPath=n.c[n.s].filename),this._name=this._name||this._scriptPath&&o.basename(this._scriptPath,o.extname(this._scriptPath)),this._parseCommand([],r),this}parseAsync(e,t){return this.parse(e,t),Promise.all(this._actionResults).then((()=>this))}_executeSubCommand(e,t){t=t.slice();let r=!1;const a=[".js",".ts",".tsx",".mjs",".cjs"];this._checkForMissingMandatoryOptions();let c,l=this._scriptPath;!l&&n.c[n.s]&&(l=n.c[n.s].filename);try{const e=s.realpathSync(l);c=o.dirname(e)}catch(e){c="."}let d=o.basename(l,o.extname(l))+"-"+e._name;e._executableFile&&(d=e._executableFile);const h=o.join(c,d);let f;s.existsSync(h)?d=h:a.forEach((e=>{s.existsSync(`${h}${e}`)&&(d=`${h}${e}`)})),r=a.includes(o.extname(d)),"win32"!==process.platform?r?(t.unshift(d),t=m(process.execArgv).concat(t),f=i.spawn(process.argv[0],t,{stdio:"inherit"})):f=i.spawn(d,t,{stdio:"inherit"}):(t.unshift(d),t=m(process.execArgv).concat(t),f=i.spawn(process.execPath,t,{stdio:"inherit"}));["SIGUSR1","SIGUSR2","SIGTERM","SIGINT","SIGHUP"].forEach((e=>{process.on(e,(()=>{!1===f.killed&&null===f.exitCode&&f.kill(e)}))}));const p=this._exitCallback;p?f.on("close",(()=>{p(new u(process.exitCode||0,"commander.executeSubCommandAsync","(close)"))})):f.on("close",process.exit.bind(process)),f.on("error",(t=>{if("ENOENT"===t.code){const t=`'${d}' does not exist\n - if '${e._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name`;throw new Error(t)}if("EACCES"===t.code)throw new Error(`'${d}' not executable`);if(p){const e=new u(1,"commander.executeSubCommandAsync","(error)");e.nestedError=t,p(e)}else process.exit(1)})),this.runningCommand=f}_dispatchSubcommand(e,t,n){const r=this._findCommand(e);r||this.help({error:!0}),r._executableHandler?this._executeSubCommand(r,t.concat(n)):r._parseCommand(t,n)}_parseCommand(e,t){const n=this.parseOptions(t);if(e=e.concat(n.operands),t=n.unknown,this.args=e.concat(t),e&&this._findCommand(e[0]))this._dispatchSubcommand(e[0],e.slice(1),t);else if(this._hasImplicitHelpCommand()&&e[0]===this._helpCommandName)1===e.length?this.help():this._dispatchSubcommand(e[1],[],[this._helpLongFlag]);else if(this._defaultCommandName)h(this,t),this._dispatchSubcommand(this._defaultCommandName,e,t);else{!this.commands.length||0!==this.args.length||this._actionHandler||this._defaultCommandName||this.help({error:!0}),h(this,n.unknown),this._checkForMissingMandatoryOptions();const r=()=>{n.unknown.length>0&&this.unknownOption(n.unknown[0])},i=`command:${this.name()}`;if(this._actionHandler){r();const n=this.args.slice();this._args.forEach(((e,t)=>{e.required&&null==n[t]?this.missingArgument(e.name):e.variadic&&(n[t]=n.splice(t),n.length=Math.min(t+1,n.length))})),n.length>this._args.length&&this._excessArguments(n),this._actionHandler(n),this.parent&&this.parent.emit(i,e,t)}else this.parent&&this.parent.listenerCount(i)?(r(),this.parent.emit(i,e,t)):e.length?this._findCommand("*")?this._dispatchSubcommand("*",e,t):this.listenerCount("command:*")?this.emit("command:*",e,t):this.commands.length?this.unknownCommand():r():this.commands.length?this.help({error:!0}):r()}}_findCommand(e){if(e)return this.commands.find((t=>t._name===e||t._aliases.includes(e)))}_findOption(e){return this.options.find((t=>t.is(e)))}_checkForMissingMandatoryOptions(){for(let e=this;e;e=e.parent)e.options.forEach((t=>{t.mandatory&&void 0===e._getOptionValue(t.attributeName())&&e.missingMandatoryOptionValue(t)}))}parseOptions(e){const t=[],n=[];let r=t;const i=e.slice();function o(e){return e.length>1&&"-"===e[0]}let s=null;for(;i.length;){const e=i.shift();if("--"===e){r===n&&r.push(e),r.push(...i);break}if(!s||o(e)){if(s=null,o(e)){const t=this._findOption(e);if(t){if(t.required){const e=i.shift();void 0===e&&this.optionMissingArgument(t),this.emit(`option:${t.name()}`,e)}else if(t.optional){let e=null;i.length>0&&!o(i[0])&&(e=i.shift()),this.emit(`option:${t.name()}`,e)}else this.emit(`option:${t.name()}`);s=t.variadic?t:null;continue}}if(e.length>2&&"-"===e[0]&&"-"!==e[1]){const t=this._findOption(`-${e[1]}`);if(t){t.required||t.optional&&this._combineFlagAndOptionalValue?this.emit(`option:${t.name()}`,e.slice(2)):(this.emit(`option:${t.name()}`),i.unshift(`-${e.slice(2)}`));continue}}if(/^--[^=]+=/.test(e)){const t=e.indexOf("="),n=this._findOption(e.slice(0,t));if(n&&(n.required||n.optional)){this.emit(`option:${n.name()}`,e.slice(t+1));continue}}if(o(e)&&(r=n),(this._enablePositionalOptions||this._passThroughOptions)&&0===t.length&&0===n.length){if(this._findCommand(e)){t.push(e),i.length>0&&n.push(...i);break}if(e===this._helpCommandName&&this._hasImplicitHelpCommand()){t.push(e),i.length>0&&t.push(...i);break}if(this._defaultCommandName){n.push(e),i.length>0&&n.push(...i);break}}if(this._passThroughOptions){r.push(e),i.length>0&&r.push(...i);break}r.push(e)}else this.emit(`option:${s.name()}`,e)}return{operands:t,unknown:n}}opts(){if(this._storeOptionsAsProperties){const e={},t=this.options.length;for(let n=0;n<t;n++){const t=this.options[n].attributeName();e[t]=t===this._versionOptionName?this._version:this[t]}return e}return this._optionValues}_displayError(e,t,n){this._outputConfiguration.outputError(`${n}\n`,this._outputConfiguration.writeErr),this._exit(e,t,n)}missingArgument(e){const t=`error: missing required argument '${e}'`;this._displayError(1,"commander.missingArgument",t)}optionMissingArgument(e){const t=`error: option '${e.flags}' argument missing`;this._displayError(1,"commander.optionMissingArgument",t)}missingMandatoryOptionValue(e){const t=`error: required option '${e.flags}' not specified`;this._displayError(1,"commander.missingMandatoryOptionValue",t)}unknownOption(e){if(this._allowUnknownOption)return;const t=`error: unknown option '${e}'`;this._displayError(1,"commander.unknownOption",t)}_excessArguments(e){if(this._allowExcessArguments)return;const t=this._args.length,n=1===t?"":"s",r=`error: too many arguments${this.parent?` for '${this.name()}'`:""}. Expected ${t} argument${n} but got ${e.length}.`;this._displayError(1,"commander.excessArguments",r)}unknownCommand(){const e=[this.name()];for(let t=this.parent;t;t=t.parent)e.unshift(t.name());const t=e.join(" "),n=`error: unknown command '${this.args[0]}'.`+(this._hasHelpOption?` See '${t} ${this._helpLongFlag}'.`:"");this._displayError(1,"commander.unknownCommand",n)}version(e,t,n){if(void 0===e)return this._version;this._version=e,t=t||"-V, --version",n=n||"output the version number";const r=this.createOption(t,n);return this._versionOptionName=r.attributeName(),this.options.push(r),this.on("option:"+r.name(),(()=>{this._outputConfiguration.writeOut(`${e}\n`),this._exit(0,"commander.version",e)})),this}description(e,t){return void 0===e&&void 0===t?this._description:(this._description=e,this._argsDescription=t,this)}alias(e){if(void 0===e)return this._aliases[0];let t=this;if(0!==this.commands.length&&this.commands[this.commands.length-1]._executableHandler&&(t=this.commands[this.commands.length-1]),e===t._name)throw new Error("Command alias can't be the same as its name");return t._aliases.push(e),this}aliases(e){return void 0===e?this._aliases:(e.forEach((e=>this.alias(e))),this)}usage(e){if(void 0===e){if(this._usage)return this._usage;const e=this._args.map((e=>f(e)));return[].concat(this.options.length||this._hasHelpOption?"[options]":[],this.commands.length?"[command]":[],this._args.length?e:[]).join(" ")}return this._usage=e,this}name(e){return void 0===e?this._name:(this._name=e,this)}helpInformation(e){const t=this.createHelp();return void 0===t.helpWidth&&(t.helpWidth=e&&e.error?this._outputConfiguration.getErrHelpWidth():this._outputConfiguration.getOutHelpWidth()),t.formatHelp(this,t)}_getHelpContext(e){const t={error:!!(e=e||{}).error};let n;return n=t.error?e=>this._outputConfiguration.writeErr(e):e=>this._outputConfiguration.writeOut(e),t.write=e.write||n,t.command=this,t}outputHelp(e){let t;"function"==typeof e&&(t=e,e=void 0);const n=this._getHelpContext(e),r=[];let i=this;for(;i;)r.push(i),i=i.parent;r.slice().reverse().forEach((e=>e.emit("beforeAllHelp",n))),this.emit("beforeHelp",n);let o=this.helpInformation(n);if(t&&(o=t(o),"string"!=typeof o&&!Buffer.isBuffer(o)))throw new Error("outputHelp callback must return a string or a Buffer");n.write(o),this.emit(this._helpLongFlag),this.emit("afterHelp",n),r.forEach((e=>e.emit("afterAllHelp",n)))}helpOption(e,t){if("boolean"==typeof e)return this._hasHelpOption=e,this;this._helpFlags=e||this._helpFlags,this._helpDescription=t||this._helpDescription;const n=p(this._helpFlags);return this._helpShortFlag=n.shortFlag,this._helpLongFlag=n.longFlag,this}help(e){this.outputHelp(e);let t=process.exitCode||0;0===t&&e&&"function"!=typeof e&&e.error&&(t=1),this._exit(t,"commander.help","(outputHelp)")}addHelpText(e,t){const n=["beforeAll","before","after","afterAll"];if(!n.includes(e))throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${n.join("', '")}'`);const r=`${e}Help`;return this.on(r,(e=>{let n;n="function"==typeof t?t({error:e.error,command:e.command}):t,n&&e.write(`${n}\n`)})),this}}function h(e,t){e._hasHelpOption&&t.find((t=>t===e._helpLongFlag||t===e._helpShortFlag))&&(e.outputHelp(),e._exit(0,"commander.helpDisplayed","(outputHelp)"))}function f(e){const t=e.name+(!0===e.variadic?"...":"");return e.required?"<"+t+">":"["+t+"]"}function p(e){let t,n;const r=e.split(/[ |,]+/);return r.length>1&&!/^[[<]/.test(r[1])&&(t=r.shift()),n=r.shift(),!t&&/^-[^-]$/.test(n)&&(t=n,n=void 0),{shortFlag:t,longFlag:n}}function m(e){return e.map((e=>{if(!e.startsWith("--inspect"))return e;let t,n,r="127.0.0.1",i="9229";return null!==(n=e.match(/^(--inspect(-brk)?)$/))?t=n[1]:null!==(n=e.match(/^(--inspect(-brk|-port)?)=([^:]+)$/))?(t=n[1],/^\d+$/.test(n[3])?i=n[3]:r=n[3]):null!==(n=e.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/))&&(t=n[1],r=n[3],i=n[4]),t&&"0"!==i?`${t}=${r}:${parseInt(i)+1}`:e}))}(t=e.exports=new d).program=t,t.Command=d,t.Option=c,t.CommanderError=u,t.InvalidOptionArgumentError=l,t.Help=a},6922:e=>{"use strict";e.exports={i8:"0.6.4"}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.c=t,n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};n(n.s=9743)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,